import {
  require_jsdom,
  require_utils,
  require_utils2
} from "./chunk-2VIHCE2T.js";
import {
  __commonJS,
  __require,
  __toESM
} from "./chunk-J5XZNU7V.js";

// node_modules/chart-js-fabric/node_modules/fabric/dist/fabric.js
var require_fabric = __commonJS({
  "node_modules/chart-js-fabric/node_modules/fabric/dist/fabric.js"(exports) {
    var fabric = fabric || { version: "4.6.0" };
    if (typeof exports !== "undefined") {
      exports.fabric = fabric;
    } else if (typeof define === "function" && define.amd) {
      define([], function() {
        return fabric;
      });
    }
    if (typeof document !== "undefined" && typeof window !== "undefined") {
      if (document instanceof (typeof HTMLDocument !== "undefined" ? HTMLDocument : Document)) {
        fabric.document = document;
      } else {
        fabric.document = document.implementation.createHTMLDocument("");
      }
      fabric.window = window;
    } else {
      jsdom = require_jsdom();
      virtualWindow = new jsdom.JSDOM(
        decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"),
        {
          features: {
            FetchExternalResources: ["img"]
          },
          resources: "usable"
        }
      ).window;
      fabric.document = virtualWindow.document;
      fabric.jsdomImplForWrapper = require_utils().implForWrapper;
      fabric.nodeCanvas = require_utils2().Canvas;
      fabric.window = virtualWindow;
      DOMParser = fabric.window.DOMParser;
    }
    var jsdom;
    var virtualWindow;
    fabric.isTouchSupported = "ontouchstart" in fabric.window || "ontouchstart" in fabric.document || fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0;
    fabric.isLikelyNode = typeof Buffer !== "undefined" && typeof window === "undefined";
    fabric.SHARED_ATTRIBUTES = [
      "display",
      "transform",
      "fill",
      "fill-opacity",
      "fill-rule",
      "opacity",
      "stroke",
      "stroke-dasharray",
      "stroke-linecap",
      "stroke-dashoffset",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "id",
      "paint-order",
      "vector-effect",
      "instantiated_by_use",
      "clip-path"
    ];
    fabric.DPI = 96;
    fabric.reNum = "(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)";
    fabric.commaWsp = "(?:\\s+,?\\s*|,\\s*)";
    fabric.rePathCommand = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/ig;
    fabric.reNonWord = /[ \n\.,;!\?\-]/;
    fabric.fontPaths = {};
    fabric.iMatrix = [1, 0, 0, 1, 0, 0];
    fabric.svgNS = "http://www.w3.org/2000/svg";
    fabric.perfLimitSizeTotal = 2097152;
    fabric.maxCacheSideLimit = 4096;
    fabric.minCacheSideLimit = 256;
    fabric.charWidthsCache = {};
    fabric.textureSize = 2048;
    fabric.disableStyleCopyPaste = false;
    fabric.enableGLFiltering = true;
    fabric.devicePixelRatio = fabric.window.devicePixelRatio || fabric.window.webkitDevicePixelRatio || fabric.window.mozDevicePixelRatio || 1;
    fabric.browserShadowBlurConstant = 1;
    fabric.arcToSegmentsCache = {};
    fabric.boundsOfCurveCache = {};
    fabric.cachesBoundsOfCurve = true;
    fabric.forceGLPutImageData = false;
    fabric.initFilterBackend = function() {
      if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {
        console.log("max texture size: " + fabric.maxTextureSize);
        return new fabric.WebglFilterBackend({ tileSize: fabric.textureSize });
      } else if (fabric.Canvas2dFilterBackend) {
        return new fabric.Canvas2dFilterBackend();
      }
    };
    if (typeof document !== "undefined" && typeof window !== "undefined") {
      window.fabric = fabric;
    }
    (function() {
      function _removeEventListener(eventName, handler) {
        if (!this.__eventListeners[eventName]) {
          return;
        }
        var eventListener = this.__eventListeners[eventName];
        if (handler) {
          eventListener[eventListener.indexOf(handler)] = false;
        } else {
          fabric.util.array.fill(eventListener, false);
        }
      }
      function on(eventName, handler) {
        if (!this.__eventListeners) {
          this.__eventListeners = {};
        }
        if (arguments.length === 1) {
          for (var prop in eventName) {
            this.on(prop, eventName[prop]);
          }
        } else {
          if (!this.__eventListeners[eventName]) {
            this.__eventListeners[eventName] = [];
          }
          this.__eventListeners[eventName].push(handler);
        }
        return this;
      }
      function _once(eventName, handler) {
        var _handler = (function() {
          handler.apply(this, arguments);
          this.off(eventName, _handler);
        }).bind(this);
        this.on(eventName, _handler);
      }
      function once(eventName, handler) {
        if (arguments.length === 1) {
          for (var prop in eventName) {
            _once.call(this, prop, eventName[prop]);
          }
        } else {
          _once.call(this, eventName, handler);
        }
        return this;
      }
      function off(eventName, handler) {
        if (!this.__eventListeners) {
          return this;
        }
        if (arguments.length === 0) {
          for (eventName in this.__eventListeners) {
            _removeEventListener.call(this, eventName);
          }
        } else if (arguments.length === 1 && typeof arguments[0] === "object") {
          for (var prop in eventName) {
            _removeEventListener.call(this, prop, eventName[prop]);
          }
        } else {
          _removeEventListener.call(this, eventName, handler);
        }
        return this;
      }
      function fire(eventName, options) {
        if (!this.__eventListeners) {
          return this;
        }
        var listenersForEvent = this.__eventListeners[eventName];
        if (!listenersForEvent) {
          return this;
        }
        for (var i2 = 0, len = listenersForEvent.length; i2 < len; i2++) {
          listenersForEvent[i2] && listenersForEvent[i2].call(this, options || {});
        }
        this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {
          return value !== false;
        });
        return this;
      }
      fabric.Observable = {
        fire,
        on,
        once,
        off
      };
    })();
    fabric.Collection = {
      _objects: [],
      /**
       * Adds objects to collection, Canvas or Group, then renders canvas
       * (if `renderOnAddRemove` is not `false`).
       * in case of Group no changes to bounding box are made.
       * Objects should be instances of (or inherit from) fabric.Object
       * Use of this function is highly discouraged for groups.
       * you can add a bunch of objects with the add method but then you NEED
       * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
       * @param {...fabric.Object} object Zero or more fabric instances
       * @return {Self} thisArg
       * @chainable
       */
      add: function() {
        this._objects.push.apply(this._objects, arguments);
        if (this._onObjectAdded) {
          for (var i2 = 0, length = arguments.length; i2 < length; i2++) {
            this._onObjectAdded(arguments[i2]);
          }
        }
        this.renderOnAddRemove && this.requestRenderAll();
        return this;
      },
      /**
       * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)
       * An object should be an instance of (or inherit from) fabric.Object
       * Use of this function is highly discouraged for groups.
       * you can add a bunch of objects with the insertAt method but then you NEED
       * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
       * @param {Object} object Object to insert
       * @param {Number} index Index to insert object at
       * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs
       * @return {Self} thisArg
       * @chainable
       */
      insertAt: function(object, index, nonSplicing) {
        var objects = this._objects;
        if (nonSplicing) {
          objects[index] = object;
        } else {
          objects.splice(index, 0, object);
        }
        this._onObjectAdded && this._onObjectAdded(object);
        this.renderOnAddRemove && this.requestRenderAll();
        return this;
      },
      /**
       * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)
       * @param {...fabric.Object} object Zero or more fabric instances
       * @return {Self} thisArg
       * @chainable
       */
      remove: function() {
        var objects = this._objects, index, somethingRemoved = false;
        for (var i2 = 0, length = arguments.length; i2 < length; i2++) {
          index = objects.indexOf(arguments[i2]);
          if (index !== -1) {
            somethingRemoved = true;
            objects.splice(index, 1);
            this._onObjectRemoved && this._onObjectRemoved(arguments[i2]);
          }
        }
        this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();
        return this;
      },
      /**
       * Executes given function for each object in this group
       * @param {Function} callback
       *                   Callback invoked with current object as first argument,
       *                   index - as second and an array of all objects - as third.
       *                   Callback is invoked in a context of Global Object (e.g. `window`)
       *                   when no `context` argument is given
       *
       * @param {Object} context Context (aka thisObject)
       * @return {Self} thisArg
       * @chainable
       */
      forEachObject: function(callback, context) {
        var objects = this.getObjects();
        for (var i2 = 0, len = objects.length; i2 < len; i2++) {
          callback.call(context, objects[i2], i2, objects);
        }
        return this;
      },
      /**
       * Returns an array of children objects of this instance
       * Type parameter introduced in 1.3.10
       * since 2.3.5 this method return always a COPY of the array;
       * @param {String} [type] When specified, only objects of this type are returned
       * @return {Array}
       */
      getObjects: function(type) {
        if (typeof type === "undefined") {
          return this._objects.concat();
        }
        return this._objects.filter(function(o2) {
          return o2.type === type;
        });
      },
      /**
       * Returns object at specified index
       * @param {Number} index
       * @return {Self} thisArg
       */
      item: function(index) {
        return this._objects[index];
      },
      /**
       * Returns true if collection contains no objects
       * @return {Boolean} true if collection is empty
       */
      isEmpty: function() {
        return this._objects.length === 0;
      },
      /**
       * Returns a size of a collection (i.e: length of an array containing its objects)
       * @return {Number} Collection size
       */
      size: function() {
        return this._objects.length;
      },
      /**
       * Returns true if collection contains an object
       * @param {Object} object Object to check against
       * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`
       * @return {Boolean} `true` if collection contains an object
       */
      contains: function(object, deep) {
        if (this._objects.indexOf(object) > -1) {
          return true;
        } else if (deep) {
          return this._objects.some(function(obj) {
            return typeof obj.contains === "function" && obj.contains(object, true);
          });
        }
        return false;
      },
      /**
       * Returns number representation of a collection complexity
       * @return {Number} complexity
       */
      complexity: function() {
        return this._objects.reduce(function(memo, current) {
          memo += current.complexity ? current.complexity() : 0;
          return memo;
        }, 0);
      }
    };
    fabric.CommonMethods = {
      /**
       * Sets object's properties from options
       * @param {Object} [options] Options object
       */
      _setOptions: function(options) {
        for (var prop in options) {
          this.set(prop, options[prop]);
        }
      },
      /**
       * @private
       * @param {Object} [filler] Options object
       * @param {String} [property] property to set the Gradient to
       */
      _initGradient: function(filler, property) {
        if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {
          this.set(property, new fabric.Gradient(filler));
        }
      },
      /**
       * @private
       * @param {Object} [filler] Options object
       * @param {String} [property] property to set the Pattern to
       * @param {Function} [callback] callback to invoke after pattern load
       */
      _initPattern: function(filler, property, callback) {
        if (filler && filler.source && !(filler instanceof fabric.Pattern)) {
          this.set(property, new fabric.Pattern(filler, callback));
        } else {
          callback && callback();
        }
      },
      /**
       * @private
       */
      _setObject: function(obj) {
        for (var prop in obj) {
          this._set(prop, obj[prop]);
        }
      },
      /**
       * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
       * @param {String|Object} key Property name or object (if object, iterate over the object properties)
       * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
       * @return {fabric.Object} thisArg
       * @chainable
       */
      set: function(key, value) {
        if (typeof key === "object") {
          this._setObject(key);
        } else {
          this._set(key, value);
        }
        return this;
      },
      _set: function(key, value) {
        this[key] = value;
      },
      /**
       * Toggles specified property from `true` to `false` or from `false` to `true`
       * @param {String} property Property to toggle
       * @return {fabric.Object} thisArg
       * @chainable
       */
      toggle: function(property) {
        var value = this.get(property);
        if (typeof value === "boolean") {
          this.set(property, !value);
        }
        return this;
      },
      /**
       * Basic getter
       * @param {String} property Property name
       * @return {*} value of a property
       */
      get: function(property) {
        return this[property];
      }
    };
    (function(global2) {
      var sqrt = Math.sqrt, atan2 = Math.atan2, pow = Math.pow, PiBy180 = Math.PI / 180, PiBy2 = Math.PI / 2;
      fabric.util = {
        /**
         * Calculate the cos of an angle, avoiding returning floats for known results
         * @static
         * @memberOf fabric.util
         * @param {Number} angle the angle in radians or in degree
         * @return {Number}
         */
        cos: function(angle) {
          if (angle === 0) {
            return 1;
          }
          if (angle < 0) {
            angle = -angle;
          }
          var angleSlice = angle / PiBy2;
          switch (angleSlice) {
            case 1:
            case 3:
              return 0;
            case 2:
              return -1;
          }
          return Math.cos(angle);
        },
        /**
         * Calculate the sin of an angle, avoiding returning floats for known results
         * @static
         * @memberOf fabric.util
         * @param {Number} angle the angle in radians or in degree
         * @return {Number}
         */
        sin: function(angle) {
          if (angle === 0) {
            return 0;
          }
          var angleSlice = angle / PiBy2, sign = 1;
          if (angle < 0) {
            sign = -1;
          }
          switch (angleSlice) {
            case 1:
              return sign;
            case 2:
              return 0;
            case 3:
              return -sign;
          }
          return Math.sin(angle);
        },
        /**
         * Removes value from an array.
         * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
         * @static
         * @memberOf fabric.util
         * @param {Array} array
         * @param {*} value
         * @return {Array} original array
         */
        removeFromArray: function(array, value) {
          var idx = array.indexOf(value);
          if (idx !== -1) {
            array.splice(idx, 1);
          }
          return array;
        },
        /**
         * Returns random number between 2 specified ones.
         * @static
         * @memberOf fabric.util
         * @param {Number} min lower limit
         * @param {Number} max upper limit
         * @return {Number} random value (between min and max)
         */
        getRandomInt: function(min, max) {
          return Math.floor(Math.random() * (max - min + 1)) + min;
        },
        /**
         * Transforms degrees to radians.
         * @static
         * @memberOf fabric.util
         * @param {Number} degrees value in degrees
         * @return {Number} value in radians
         */
        degreesToRadians: function(degrees) {
          return degrees * PiBy180;
        },
        /**
         * Transforms radians to degrees.
         * @static
         * @memberOf fabric.util
         * @param {Number} radians value in radians
         * @return {Number} value in degrees
         */
        radiansToDegrees: function(radians) {
          return radians / PiBy180;
        },
        /**
         * Rotates `point` around `origin` with `radians`
         * @static
         * @memberOf fabric.util
         * @param {fabric.Point} point The point to rotate
         * @param {fabric.Point} origin The origin of the rotation
         * @param {Number} radians The radians of the angle for the rotation
         * @return {fabric.Point} The new rotated point
         */
        rotatePoint: function(point, origin, radians) {
          var newPoint = new fabric.Point(point.x - origin.x, point.y - origin.y), v2 = fabric.util.rotateVector(newPoint, radians);
          return new fabric.Point(v2.x, v2.y).addEquals(origin);
        },
        /**
         * Rotates `vector` with `radians`
         * @static
         * @memberOf fabric.util
         * @param {Object} vector The vector to rotate (x and y)
         * @param {Number} radians The radians of the angle for the rotation
         * @return {Object} The new rotated point
         */
        rotateVector: function(vector, radians) {
          var sin = fabric.util.sin(radians), cos = fabric.util.cos(radians), rx = vector.x * cos - vector.y * sin, ry = vector.x * sin + vector.y * cos;
          return {
            x: rx,
            y: ry
          };
        },
        /**
         * Apply transform t to point p
         * @static
         * @memberOf fabric.util
         * @param  {fabric.Point} p The point to transform
         * @param  {Array} t The transform
         * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
         * @return {fabric.Point} The transformed point
         */
        transformPoint: function(p2, t2, ignoreOffset) {
          if (ignoreOffset) {
            return new fabric.Point(
              t2[0] * p2.x + t2[2] * p2.y,
              t2[1] * p2.x + t2[3] * p2.y
            );
          }
          return new fabric.Point(
            t2[0] * p2.x + t2[2] * p2.y + t2[4],
            t2[1] * p2.x + t2[3] * p2.y + t2[5]
          );
        },
        /**
         * Returns coordinates of points's bounding rectangle (left, top, width, height)
         * @param {Array} points 4 points array
         * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix
         * @return {Object} Object with left, top, width, height properties
         */
        makeBoundingBoxFromPoints: function(points, transform) {
          if (transform) {
            for (var i2 = 0; i2 < points.length; i2++) {
              points[i2] = fabric.util.transformPoint(points[i2], transform);
            }
          }
          var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x], minX = fabric.util.array.min(xPoints), maxX = fabric.util.array.max(xPoints), width = maxX - minX, yPoints = [points[0].y, points[1].y, points[2].y, points[3].y], minY = fabric.util.array.min(yPoints), maxY = fabric.util.array.max(yPoints), height = maxY - minY;
          return {
            left: minX,
            top: minY,
            width,
            height
          };
        },
        /**
         * Invert transformation t
         * @static
         * @memberOf fabric.util
         * @param {Array} t The transform
         * @return {Array} The inverted transform
         */
        invertTransform: function(t2) {
          var a2 = 1 / (t2[0] * t2[3] - t2[1] * t2[2]), r2 = [a2 * t2[3], -a2 * t2[1], -a2 * t2[2], a2 * t2[0]], o2 = fabric.util.transformPoint({ x: t2[4], y: t2[5] }, r2, true);
          r2[4] = -o2.x;
          r2[5] = -o2.y;
          return r2;
        },
        /**
         * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
         * @static
         * @memberOf fabric.util
         * @param {Number|String} number number to operate on
         * @param {Number} fractionDigits number of fraction digits to "leave"
         * @return {Number}
         */
        toFixed: function(number, fractionDigits) {
          return parseFloat(Number(number).toFixed(fractionDigits));
        },
        /**
         * Converts from attribute value to pixel value if applicable.
         * Returns converted pixels or original value not converted.
         * @param {Number|String} value number to operate on
         * @param {Number} fontSize
         * @return {Number|String}
         */
        parseUnit: function(value, fontSize) {
          var unit = /\D{0,2}$/.exec(value), number = parseFloat(value);
          if (!fontSize) {
            fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;
          }
          switch (unit[0]) {
            case "mm":
              return number * fabric.DPI / 25.4;
            case "cm":
              return number * fabric.DPI / 2.54;
            case "in":
              return number * fabric.DPI;
            case "pt":
              return number * fabric.DPI / 72;
            case "pc":
              return number * fabric.DPI / 72 * 12;
            case "em":
              return number * fontSize;
            default:
              return number;
          }
        },
        /**
         * Function which always returns `false`.
         * @static
         * @memberOf fabric.util
         * @return {Boolean}
         */
        falseFunction: function() {
          return false;
        },
        /**
         * Returns klass "Class" object of given namespace
         * @memberOf fabric.util
         * @param {String} type Type of object (eg. 'circle')
         * @param {String} namespace Namespace to get klass "Class" object from
         * @return {Object} klass "Class"
         */
        getKlass: function(type, namespace) {
          type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));
          return fabric.util.resolveNamespace(namespace)[type];
        },
        /**
         * Returns array of attributes for given svg that fabric parses
         * @memberOf fabric.util
         * @param {String} type Type of svg element (eg. 'circle')
         * @return {Array} string names of supported attributes
         */
        getSvgAttributes: function(type) {
          var attributes = [
            "instantiated_by_use",
            "style",
            "id",
            "class"
          ];
          switch (type) {
            case "linearGradient":
              attributes = attributes.concat(["x1", "y1", "x2", "y2", "gradientUnits", "gradientTransform"]);
              break;
            case "radialGradient":
              attributes = attributes.concat(["gradientUnits", "gradientTransform", "cx", "cy", "r", "fx", "fy", "fr"]);
              break;
            case "stop":
              attributes = attributes.concat(["offset", "stop-color", "stop-opacity"]);
              break;
          }
          return attributes;
        },
        /**
         * Returns object of given namespace
         * @memberOf fabric.util
         * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'
         * @return {Object} Object for given namespace (default fabric)
         */
        resolveNamespace: function(namespace) {
          if (!namespace) {
            return fabric;
          }
          var parts = namespace.split("."), len = parts.length, i2, obj = global2 || fabric.window;
          for (i2 = 0; i2 < len; ++i2) {
            obj = obj[parts[i2]];
          }
          return obj;
        },
        /**
         * Loads image element from given url and passes it to a callback
         * @memberOf fabric.util
         * @param {String} url URL representing an image
         * @param {Function} callback Callback; invoked with loaded image
         * @param {*} [context] Context to invoke callback in
         * @param {Object} [crossOrigin] crossOrigin value to set image element to
         */
        loadImage: function(url, callback, context, crossOrigin) {
          if (!url) {
            callback && callback.call(context, url);
            return;
          }
          var img = fabric.util.createImage();
          var onLoadCallback = function() {
            callback && callback.call(context, img, false);
            img = img.onload = img.onerror = null;
          };
          img.onload = onLoadCallback;
          img.onerror = function() {
            fabric.log("Error loading " + img.src);
            callback && callback.call(context, null, true);
            img = img.onload = img.onerror = null;
          };
          if (url.indexOf("data") !== 0 && crossOrigin !== void 0 && crossOrigin !== null) {
            img.crossOrigin = crossOrigin;
          }
          if (url.substring(0, 14) === "data:image/svg") {
            img.onload = null;
            fabric.util.loadImageInDom(img, onLoadCallback);
          }
          img.src = url;
        },
        /**
         * Attaches SVG image with data: URL to the dom
         * @memberOf fabric.util
         * @param {Object} img Image object with data:image/svg src
         * @param {Function} callback Callback; invoked with loaded image
         * @return {Object} DOM element (div containing the SVG image)
         */
        loadImageInDom: function(img, onLoadCallback) {
          var div = fabric.document.createElement("div");
          div.style.width = div.style.height = "1px";
          div.style.left = div.style.top = "-100%";
          div.style.position = "absolute";
          div.appendChild(img);
          fabric.document.querySelector("body").appendChild(div);
          img.onload = function() {
            onLoadCallback();
            div.parentNode.removeChild(div);
            div = null;
          };
        },
        /**
         * Creates corresponding fabric instances from their object representations
         * @static
         * @memberOf fabric.util
         * @param {Array} objects Objects to enliven
         * @param {Function} callback Callback to invoke when all objects are created
         * @param {String} namespace Namespace to get klass "Class" object from
         * @param {Function} reviver Method for further parsing of object elements,
         * called after each fabric object created.
         */
        enlivenObjects: function(objects, callback, namespace, reviver) {
          objects = objects || [];
          var enlivenedObjects = [], numLoadedObjects = 0, numTotalObjects = objects.length;
          function onLoaded() {
            if (++numLoadedObjects === numTotalObjects) {
              callback && callback(enlivenedObjects.filter(function(obj) {
                return obj;
              }));
            }
          }
          if (!numTotalObjects) {
            callback && callback(enlivenedObjects);
            return;
          }
          objects.forEach(function(o2, index) {
            if (!o2 || !o2.type) {
              onLoaded();
              return;
            }
            var klass = fabric.util.getKlass(o2.type, namespace);
            klass.fromObject(o2, function(obj, error) {
              error || (enlivenedObjects[index] = obj);
              reviver && reviver(o2, obj, error);
              onLoaded();
            });
          });
        },
        /**
         * Create and wait for loading of patterns
         * @static
         * @memberOf fabric.util
         * @param {Array} patterns Objects to enliven
         * @param {Function} callback Callback to invoke when all objects are created
         * called after each fabric object created.
         */
        enlivenPatterns: function(patterns, callback) {
          patterns = patterns || [];
          function onLoaded() {
            if (++numLoadedPatterns === numPatterns) {
              callback && callback(enlivenedPatterns);
            }
          }
          var enlivenedPatterns = [], numLoadedPatterns = 0, numPatterns = patterns.length;
          if (!numPatterns) {
            callback && callback(enlivenedPatterns);
            return;
          }
          patterns.forEach(function(p2, index) {
            if (p2 && p2.source) {
              new fabric.Pattern(p2, function(pattern) {
                enlivenedPatterns[index] = pattern;
                onLoaded();
              });
            } else {
              enlivenedPatterns[index] = p2;
              onLoaded();
            }
          });
        },
        /**
         * Groups SVG elements (usually those retrieved from SVG document)
         * @static
         * @memberOf fabric.util
         * @param {Array} elements SVG elements to group
         * @param {Object} [options] Options object
         * @param {String} path Value to set sourcePath to
         * @return {fabric.Object|fabric.Group}
         */
        groupSVGElements: function(elements, options, path) {
          var object;
          if (elements && elements.length === 1) {
            return elements[0];
          }
          if (options) {
            if (options.width && options.height) {
              options.centerPoint = {
                x: options.width / 2,
                y: options.height / 2
              };
            } else {
              delete options.width;
              delete options.height;
            }
          }
          object = new fabric.Group(elements, options);
          if (typeof path !== "undefined") {
            object.sourcePath = path;
          }
          return object;
        },
        /**
         * Populates an object with properties of another object
         * @static
         * @memberOf fabric.util
         * @param {Object} source Source object
         * @param {Object} destination Destination object
         * @return {Array} properties Properties names to include
         */
        populateWithProperties: function(source, destination, properties) {
          if (properties && Object.prototype.toString.call(properties) === "[object Array]") {
            for (var i2 = 0, len = properties.length; i2 < len; i2++) {
              if (properties[i2] in source) {
                destination[properties[i2]] = source[properties[i2]];
              }
            }
          }
        },
        /**
         * WARNING: THIS WAS TO SUPPORT OLD BROWSERS. deprecated.
         * WILL BE REMOVED IN FABRIC 5.0
         * Draws a dashed line between two points
         *
         * This method is used to draw dashed line around selection area.
         * See <a href="http://stackoverflow.com/questions/4576724/dotted-stroke-in-canvas">dotted stroke in canvas</a>
         *
         * @param {CanvasRenderingContext2D} ctx context
         * @param {Number} x  start x coordinate
         * @param {Number} y start y coordinate
         * @param {Number} x2 end x coordinate
         * @param {Number} y2 end y coordinate
         * @param {Array} da dash array pattern
         * @deprecated
         */
        drawDashedLine: function(ctx, x, y2, x2, y22, da) {
          var dx = x2 - x, dy = y22 - y2, len = sqrt(dx * dx + dy * dy), rot = atan2(dy, dx), dc = da.length, di = 0, draw = true;
          ctx.save();
          ctx.translate(x, y2);
          ctx.moveTo(0, 0);
          ctx.rotate(rot);
          x = 0;
          while (len > x) {
            x += da[di++ % dc];
            if (x > len) {
              x = len;
            }
            ctx[draw ? "lineTo" : "moveTo"](x, 0);
            draw = !draw;
          }
          ctx.restore();
        },
        /**
         * Creates canvas element
         * @static
         * @memberOf fabric.util
         * @return {CanvasElement} initialized canvas element
         */
        createCanvasElement: function() {
          return fabric.document.createElement("canvas");
        },
        /**
         * Creates a canvas element that is a copy of another and is also painted
         * @param {CanvasElement} canvas to copy size and content of
         * @static
         * @memberOf fabric.util
         * @return {CanvasElement} initialized canvas element
         */
        copyCanvasElement: function(canvas) {
          var newCanvas = fabric.util.createCanvasElement();
          newCanvas.width = canvas.width;
          newCanvas.height = canvas.height;
          newCanvas.getContext("2d").drawImage(canvas, 0, 0);
          return newCanvas;
        },
        /**
         * since 2.6.0 moved from canvas instance to utility.
         * @param {CanvasElement} canvasEl to copy size and content of
         * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too
         * @param {Number} quality <= 1 and > 0
         * @static
         * @memberOf fabric.util
         * @return {String} data url
         */
        toDataURL: function(canvasEl, format, quality) {
          return canvasEl.toDataURL("image/" + format, quality);
        },
        /**
         * Creates image element (works on client and node)
         * @static
         * @memberOf fabric.util
         * @return {HTMLImageElement} HTML image element
         */
        createImage: function() {
          return fabric.document.createElement("img");
        },
        /**
         * Multiply matrix A by matrix B to nest transformations
         * @static
         * @memberOf fabric.util
         * @param  {Array} a First transformMatrix
         * @param  {Array} b Second transformMatrix
         * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices
         * @return {Array} The product of the two transform matrices
         */
        multiplyTransformMatrices: function(a2, b2, is2x2) {
          return [
            a2[0] * b2[0] + a2[2] * b2[1],
            a2[1] * b2[0] + a2[3] * b2[1],
            a2[0] * b2[2] + a2[2] * b2[3],
            a2[1] * b2[2] + a2[3] * b2[3],
            is2x2 ? 0 : a2[0] * b2[4] + a2[2] * b2[5] + a2[4],
            is2x2 ? 0 : a2[1] * b2[4] + a2[3] * b2[5] + a2[5]
          ];
        },
        /**
         * Decomposes standard 2x3 matrix into transform components
         * @static
         * @memberOf fabric.util
         * @param  {Array} a transformMatrix
         * @return {Object} Components of transform
         */
        qrDecompose: function(a2) {
          var angle = atan2(a2[1], a2[0]), denom = pow(a2[0], 2) + pow(a2[1], 2), scaleX = sqrt(denom), scaleY = (a2[0] * a2[3] - a2[2] * a2[1]) / scaleX, skewX = atan2(a2[0] * a2[2] + a2[1] * a2[3], denom);
          return {
            angle: angle / PiBy180,
            scaleX,
            scaleY,
            skewX: skewX / PiBy180,
            skewY: 0,
            translateX: a2[4],
            translateY: a2[5]
          };
        },
        /**
         * Returns a transform matrix starting from an object of the same kind of
         * the one returned from qrDecompose, useful also if you want to calculate some
         * transformations from an object that is not enlived yet
         * @static
         * @memberOf fabric.util
         * @param  {Object} options
         * @param  {Number} [options.angle] angle in degrees
         * @return {Number[]} transform matrix
         */
        calcRotateMatrix: function(options) {
          if (!options.angle) {
            return fabric.iMatrix.concat();
          }
          var theta = fabric.util.degreesToRadians(options.angle), cos = fabric.util.cos(theta), sin = fabric.util.sin(theta);
          return [cos, sin, -sin, cos, 0, 0];
        },
        /**
         * Returns a transform matrix starting from an object of the same kind of
         * the one returned from qrDecompose, useful also if you want to calculate some
         * transformations from an object that is not enlived yet.
         * is called DimensionsTransformMatrix because those properties are the one that influence
         * the size of the resulting box of the object.
         * @static
         * @memberOf fabric.util
         * @param  {Object} options
         * @param  {Number} [options.scaleX]
         * @param  {Number} [options.scaleY]
         * @param  {Boolean} [options.flipX]
         * @param  {Boolean} [options.flipY]
         * @param  {Number} [options.skewX]
         * @param  {Number} [options.skewX]
         * @return {Number[]} transform matrix
         */
        calcDimensionsMatrix: function(options) {
          var scaleX = typeof options.scaleX === "undefined" ? 1 : options.scaleX, scaleY = typeof options.scaleY === "undefined" ? 1 : options.scaleY, scaleMatrix = [
            options.flipX ? -scaleX : scaleX,
            0,
            0,
            options.flipY ? -scaleY : scaleY,
            0,
            0
          ], multiply = fabric.util.multiplyTransformMatrices, degreesToRadians = fabric.util.degreesToRadians;
          if (options.skewX) {
            scaleMatrix = multiply(
              scaleMatrix,
              [1, 0, Math.tan(degreesToRadians(options.skewX)), 1],
              true
            );
          }
          if (options.skewY) {
            scaleMatrix = multiply(
              scaleMatrix,
              [1, Math.tan(degreesToRadians(options.skewY)), 0, 1],
              true
            );
          }
          return scaleMatrix;
        },
        /**
         * Returns a transform matrix starting from an object of the same kind of
         * the one returned from qrDecompose, useful also if you want to calculate some
         * transformations from an object that is not enlived yet
         * @static
         * @memberOf fabric.util
         * @param  {Object} options
         * @param  {Number} [options.angle]
         * @param  {Number} [options.scaleX]
         * @param  {Number} [options.scaleY]
         * @param  {Boolean} [options.flipX]
         * @param  {Boolean} [options.flipY]
         * @param  {Number} [options.skewX]
         * @param  {Number} [options.skewX]
         * @param  {Number} [options.translateX]
         * @param  {Number} [options.translateY]
         * @return {Number[]} transform matrix
         */
        composeMatrix: function(options) {
          var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0], multiply = fabric.util.multiplyTransformMatrices;
          if (options.angle) {
            matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));
          }
          if (options.scaleX !== 1 || options.scaleY !== 1 || options.skewX || options.skewY || options.flipX || options.flipY) {
            matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));
          }
          return matrix;
        },
        /**
         * reset an object transform state to neutral. Top and left are not accounted for
         * @static
         * @memberOf fabric.util
         * @param  {fabric.Object} target object to transform
         */
        resetObjectTransform: function(target) {
          target.scaleX = 1;
          target.scaleY = 1;
          target.skewX = 0;
          target.skewY = 0;
          target.flipX = false;
          target.flipY = false;
          target.rotate(0);
        },
        /**
         * Extract Object transform values
         * @static
         * @memberOf fabric.util
         * @param  {fabric.Object} target object to read from
         * @return {Object} Components of transform
         */
        saveObjectTransform: function(target) {
          return {
            scaleX: target.scaleX,
            scaleY: target.scaleY,
            skewX: target.skewX,
            skewY: target.skewY,
            angle: target.angle,
            left: target.left,
            flipX: target.flipX,
            flipY: target.flipY,
            top: target.top
          };
        },
        /**
         * Returns true if context has transparent pixel
         * at specified location (taking tolerance into account)
         * @param {CanvasRenderingContext2D} ctx context
         * @param {Number} x x coordinate
         * @param {Number} y y coordinate
         * @param {Number} tolerance Tolerance
         */
        isTransparent: function(ctx, x, y2, tolerance) {
          if (tolerance > 0) {
            if (x > tolerance) {
              x -= tolerance;
            } else {
              x = 0;
            }
            if (y2 > tolerance) {
              y2 -= tolerance;
            } else {
              y2 = 0;
            }
          }
          var _isTransparent = true, i2, temp, imageData = ctx.getImageData(x, y2, tolerance * 2 || 1, tolerance * 2 || 1), l2 = imageData.data.length;
          for (i2 = 3; i2 < l2; i2 += 4) {
            temp = imageData.data[i2];
            _isTransparent = temp <= 0;
            if (_isTransparent === false) {
              break;
            }
          }
          imageData = null;
          return _isTransparent;
        },
        /**
         * Parse preserveAspectRatio attribute from element
         * @param {string} attribute to be parsed
         * @return {Object} an object containing align and meetOrSlice attribute
         */
        parsePreserveAspectRatioAttribute: function(attribute) {
          var meetOrSlice = "meet", alignX = "Mid", alignY = "Mid", aspectRatioAttrs = attribute.split(" "), align;
          if (aspectRatioAttrs && aspectRatioAttrs.length) {
            meetOrSlice = aspectRatioAttrs.pop();
            if (meetOrSlice !== "meet" && meetOrSlice !== "slice") {
              align = meetOrSlice;
              meetOrSlice = "meet";
            } else if (aspectRatioAttrs.length) {
              align = aspectRatioAttrs.pop();
            }
          }
          alignX = align !== "none" ? align.slice(1, 4) : "none";
          alignY = align !== "none" ? align.slice(5, 8) : "none";
          return {
            meetOrSlice,
            alignX,
            alignY
          };
        },
        /**
         * Clear char widths cache for the given font family or all the cache if no
         * fontFamily is specified.
         * Use it if you know you are loading fonts in a lazy way and you are not waiting
         * for custom fonts to load properly when adding text objects to the canvas.
         * If a text object is added when its own font is not loaded yet, you will get wrong
         * measurement and so wrong bounding boxes.
         * After the font cache is cleared, either change the textObject text content or call
         * initDimensions() to trigger a recalculation
         * @memberOf fabric.util
         * @param {String} [fontFamily] font family to clear
         */
        clearFabricFontCache: function(fontFamily) {
          fontFamily = (fontFamily || "").toLowerCase();
          if (!fontFamily) {
            fabric.charWidthsCache = {};
          } else if (fabric.charWidthsCache[fontFamily]) {
            delete fabric.charWidthsCache[fontFamily];
          }
        },
        /**
         * Given current aspect ratio, determines the max width and height that can
         * respect the total allowed area for the cache.
         * @memberOf fabric.util
         * @param {Number} ar aspect ratio
         * @param {Number} maximumArea Maximum area you want to achieve
         * @return {Object.x} Limited dimensions by X
         * @return {Object.y} Limited dimensions by Y
         */
        limitDimsByArea: function(ar, maximumArea) {
          var roughWidth = Math.sqrt(maximumArea * ar), perfLimitSizeY = Math.floor(maximumArea / roughWidth);
          return { x: Math.floor(roughWidth), y: perfLimitSizeY };
        },
        capValue: function(min, value, max) {
          return Math.max(min, Math.min(value, max));
        },
        /**
         * Finds the scale for the object source to fit inside the object destination,
         * keeping aspect ratio intact.
         * respect the total allowed area for the cache.
         * @memberOf fabric.util
         * @param {Object | fabric.Object} source
         * @param {Number} source.height natural unscaled height of the object
         * @param {Number} source.width natural unscaled width of the object
         * @param {Object | fabric.Object} destination
         * @param {Number} destination.height natural unscaled height of the object
         * @param {Number} destination.width natural unscaled width of the object
         * @return {Number} scale factor to apply to source to fit into destination
         */
        findScaleToFit: function(source, destination) {
          return Math.min(destination.width / source.width, destination.height / source.height);
        },
        /**
         * Finds the scale for the object source to cover entirely the object destination,
         * keeping aspect ratio intact.
         * respect the total allowed area for the cache.
         * @memberOf fabric.util
         * @param {Object | fabric.Object} source
         * @param {Number} source.height natural unscaled height of the object
         * @param {Number} source.width natural unscaled width of the object
         * @param {Object | fabric.Object} destination
         * @param {Number} destination.height natural unscaled height of the object
         * @param {Number} destination.width natural unscaled width of the object
         * @return {Number} scale factor to apply to source to cover destination
         */
        findScaleToCover: function(source, destination) {
          return Math.max(destination.width / source.width, destination.height / source.height);
        },
        /**
         * given an array of 6 number returns something like `"matrix(...numbers)"`
         * @memberOf fabric.util
         * @param {Array} transform an array with 6 numbers
         * @return {String} transform matrix for svg
         * @return {Object.y} Limited dimensions by Y
         */
        matrixToSVG: function(transform) {
          return "matrix(" + transform.map(function(value) {
            return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);
          }).join(" ") + ")";
        },
        /**
         * given an object and a transform, apply the inverse transform to the object,
         * this is equivalent to remove from that object that transformation, so that
         * added in a space with the removed transform, the object will be the same as before.
         * Removing from an object a transform that scale by 2 is like scaling it by 1/2.
         * Removing from an object a transfrom that rotate by 30deg is like rotating by 30deg
         * in the opposite direction.
         * This util is used to add objects inside transformed groups or nested groups.
         * @memberOf fabric.util
         * @param {fabric.Object} object the object you want to transform
         * @param {Array} transform the destination transform
         */
        removeTransformFromObject: function(object, transform) {
          var inverted = fabric.util.invertTransform(transform), finalTransform = fabric.util.multiplyTransformMatrices(inverted, object.calcOwnMatrix());
          fabric.util.applyTransformToObject(object, finalTransform);
        },
        /**
         * given an object and a transform, apply the transform to the object.
         * this is equivalent to change the space where the object is drawn.
         * Adding to an object a transform that scale by 2 is like scaling it by 2.
         * This is used when removing an object from an active selection for example.
         * @memberOf fabric.util
         * @param {fabric.Object} object the object you want to transform
         * @param {Array} transform the destination transform
         */
        addTransformToObject: function(object, transform) {
          fabric.util.applyTransformToObject(
            object,
            fabric.util.multiplyTransformMatrices(transform, object.calcOwnMatrix())
          );
        },
        /**
         * discard an object transform state and apply the one from the matrix.
         * @memberOf fabric.util
         * @param {fabric.Object} object the object you want to transform
         * @param {Array} transform the destination transform
         */
        applyTransformToObject: function(object, transform) {
          var options = fabric.util.qrDecompose(transform), center = new fabric.Point(options.translateX, options.translateY);
          object.flipX = false;
          object.flipY = false;
          object.set("scaleX", options.scaleX);
          object.set("scaleY", options.scaleY);
          object.skewX = options.skewX;
          object.skewY = options.skewY;
          object.angle = options.angle;
          object.setPositionByOrigin(center, "center", "center");
        },
        /**
         * given a width and height, return the size of the bounding box
         * that can contains the box with width/height with applied transform
         * described in options.
         * Use to calculate the boxes around objects for controls.
         * @memberOf fabric.util
         * @param {Number} width
         * @param {Number} height
         * @param {Object} options
         * @param {Number} options.scaleX
         * @param {Number} options.scaleY
         * @param {Number} options.skewX
         * @param {Number} options.skewY
         * @return {Object.x} width of containing
         * @return {Object.y} height of containing
         */
        sizeAfterTransform: function(width, height, options) {
          var dimX = width / 2, dimY = height / 2, points = [
            {
              x: -dimX,
              y: -dimY
            },
            {
              x: dimX,
              y: -dimY
            },
            {
              x: -dimX,
              y: dimY
            },
            {
              x: dimX,
              y: dimY
            }
          ], transformMatrix = fabric.util.calcDimensionsMatrix(options), bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);
          return {
            x: bbox.width,
            y: bbox.height
          };
        }
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      var _join = Array.prototype.join, commandLengths = {
        m: 2,
        l: 2,
        h: 1,
        v: 1,
        c: 6,
        s: 4,
        q: 4,
        t: 2,
        a: 7
      }, repeatedCommands = {
        m: "l",
        M: "L"
      };
      function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {
        var costh2 = fabric.util.cos(th2), sinth2 = fabric.util.sin(th2), costh3 = fabric.util.cos(th3), sinth3 = fabric.util.sin(th3), toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1, toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1, cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2), cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2), cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3), cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);
        return [
          "C",
          cp1X,
          cp1Y,
          cp2X,
          cp2Y,
          toX,
          toY
        ];
      }
      function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {
        var PI = Math.PI, th = rotateX * PI / 180, sinTh = fabric.util.sin(th), cosTh = fabric.util.cos(th), fromX = 0, fromY = 0;
        rx = Math.abs(rx);
        ry = Math.abs(ry);
        var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5, py = -cosTh * toY * 0.5 + sinTh * toX * 0.5, rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px, pl = rx2 * ry2 - rx2 * py2 - ry2 * px2, root = 0;
        if (pl < 0) {
          var s2 = Math.sqrt(1 - pl / (rx2 * ry2));
          rx *= s2;
          ry *= s2;
        } else {
          root = (large === sweep ? -1 : 1) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));
        }
        var cx = root * rx * py / ry, cy = -root * ry * px / rx, cx1 = cosTh * cx - sinTh * cy + toX * 0.5, cy1 = sinTh * cx + cosTh * cy + toY * 0.5, mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry), dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);
        if (sweep === 0 && dtheta > 0) {
          dtheta -= 2 * PI;
        } else if (sweep === 1 && dtheta < 0) {
          dtheta += 2 * PI;
        }
        var segments = Math.ceil(Math.abs(dtheta / PI * 2)), result = [], mDelta = dtheta / segments, mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2), th3 = mTheta + mDelta;
        for (var i2 = 0; i2 < segments; i2++) {
          result[i2] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
          fromX = result[i2][5];
          fromY = result[i2][6];
          mTheta = th3;
          th3 += mDelta;
        }
        return result;
      }
      function calcVectorAngle(ux, uy, vx, vy) {
        var ta = Math.atan2(uy, ux), tb = Math.atan2(vy, vx);
        if (tb >= ta) {
          return tb - ta;
        } else {
          return 2 * Math.PI - (ta - tb);
        }
      }
      function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {
        var argsString;
        if (fabric.cachesBoundsOfCurve) {
          argsString = _join.call(arguments);
          if (fabric.boundsOfCurveCache[argsString]) {
            return fabric.boundsOfCurveCache[argsString];
          }
        }
        var sqrt = Math.sqrt, min = Math.min, max = Math.max, abs = Math.abs, tvalues = [], bounds = [[], []], a2, b2, c2, t2, t1, t22, b2ac, sqrtb2ac;
        b2 = 6 * x0 - 12 * x1 + 6 * x2;
        a2 = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
        c2 = 3 * x1 - 3 * x0;
        for (var i2 = 0; i2 < 2; ++i2) {
          if (i2 > 0) {
            b2 = 6 * y0 - 12 * y1 + 6 * y2;
            a2 = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
            c2 = 3 * y1 - 3 * y0;
          }
          if (abs(a2) < 1e-12) {
            if (abs(b2) < 1e-12) {
              continue;
            }
            t2 = -c2 / b2;
            if (0 < t2 && t2 < 1) {
              tvalues.push(t2);
            }
            continue;
          }
          b2ac = b2 * b2 - 4 * c2 * a2;
          if (b2ac < 0) {
            continue;
          }
          sqrtb2ac = sqrt(b2ac);
          t1 = (-b2 + sqrtb2ac) / (2 * a2);
          if (0 < t1 && t1 < 1) {
            tvalues.push(t1);
          }
          t22 = (-b2 - sqrtb2ac) / (2 * a2);
          if (0 < t22 && t22 < 1) {
            tvalues.push(t22);
          }
        }
        var x, y4, j2 = tvalues.length, jlen = j2, mt;
        while (j2--) {
          t2 = tvalues[j2];
          mt = 1 - t2;
          x = mt * mt * mt * x0 + 3 * mt * mt * t2 * x1 + 3 * mt * t2 * t2 * x2 + t2 * t2 * t2 * x3;
          bounds[0][j2] = x;
          y4 = mt * mt * mt * y0 + 3 * mt * mt * t2 * y1 + 3 * mt * t2 * t2 * y2 + t2 * t2 * t2 * y3;
          bounds[1][j2] = y4;
        }
        bounds[0][jlen] = x0;
        bounds[1][jlen] = y0;
        bounds[0][jlen + 1] = x3;
        bounds[1][jlen + 1] = y3;
        var result = [
          {
            x: min.apply(null, bounds[0]),
            y: min.apply(null, bounds[1])
          },
          {
            x: max.apply(null, bounds[0]),
            y: max.apply(null, bounds[1])
          }
        ];
        if (fabric.cachesBoundsOfCurve) {
          fabric.boundsOfCurveCache[argsString] = result;
        }
        return result;
      }
      function fromArcToBeziers(fx, fy, coords) {
        var rx = coords[1], ry = coords[2], rot = coords[3], large = coords[4], sweep = coords[5], tx = coords[6], ty = coords[7], segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);
        for (var i2 = 0, len = segsNorm.length; i2 < len; i2++) {
          segsNorm[i2][1] += fx;
          segsNorm[i2][2] += fy;
          segsNorm[i2][3] += fx;
          segsNorm[i2][4] += fy;
          segsNorm[i2][5] += fx;
          segsNorm[i2][6] += fy;
        }
        return segsNorm;
      }
      ;
      function makePathSimpler(path) {
        var x = 0, y2 = 0, len = path.length, x1 = 0, y1 = 0, current, i2, converted, destinationPath = [], previous, controlX, controlY;
        for (i2 = 0; i2 < len; ++i2) {
          converted = false;
          current = path[i2].slice(0);
          switch (current[0]) {
            case "l":
              current[0] = "L";
              current[1] += x;
              current[2] += y2;
            case "L":
              x = current[1];
              y2 = current[2];
              break;
            case "h":
              current[1] += x;
            case "H":
              current[0] = "L";
              current[2] = y2;
              x = current[1];
              break;
            case "v":
              current[1] += y2;
            case "V":
              current[0] = "L";
              y2 = current[1];
              current[1] = x;
              current[2] = y2;
              break;
            case "m":
              current[0] = "M";
              current[1] += x;
              current[2] += y2;
            case "M":
              x = current[1];
              y2 = current[2];
              x1 = current[1];
              y1 = current[2];
              break;
            case "c":
              current[0] = "C";
              current[1] += x;
              current[2] += y2;
              current[3] += x;
              current[4] += y2;
              current[5] += x;
              current[6] += y2;
            case "C":
              controlX = current[3];
              controlY = current[4];
              x = current[5];
              y2 = current[6];
              break;
            case "s":
              current[0] = "S";
              current[1] += x;
              current[2] += y2;
              current[3] += x;
              current[4] += y2;
            case "S":
              if (previous === "C") {
                controlX = 2 * x - controlX;
                controlY = 2 * y2 - controlY;
              } else {
                controlX = x;
                controlY = y2;
              }
              x = current[3];
              y2 = current[4];
              current[0] = "C";
              current[5] = current[3];
              current[6] = current[4];
              current[3] = current[1];
              current[4] = current[2];
              current[1] = controlX;
              current[2] = controlY;
              controlX = current[3];
              controlY = current[4];
              break;
            case "q":
              current[0] = "Q";
              current[1] += x;
              current[2] += y2;
              current[3] += x;
              current[4] += y2;
            case "Q":
              controlX = current[1];
              controlY = current[2];
              x = current[3];
              y2 = current[4];
              break;
            case "t":
              current[0] = "T";
              current[1] += x;
              current[2] += y2;
            case "T":
              if (previous === "Q") {
                controlX = 2 * x - controlX;
                controlY = 2 * y2 - controlY;
              } else {
                controlX = x;
                controlY = y2;
              }
              current[0] = "Q";
              x = current[1];
              y2 = current[2];
              current[1] = controlX;
              current[2] = controlY;
              current[3] = x;
              current[4] = y2;
              break;
            case "a":
              current[0] = "A";
              current[6] += x;
              current[7] += y2;
            case "A":
              converted = true;
              destinationPath = destinationPath.concat(fromArcToBeziers(x, y2, current));
              x = current[6];
              y2 = current[7];
              break;
            case "z":
            case "Z":
              x = x1;
              y2 = y1;
              break;
            default:
          }
          if (!converted) {
            destinationPath.push(current);
          }
          previous = current[0];
        }
        return destinationPath;
      }
      ;
      function calcLineLength(x1, y1, x2, y2) {
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
      }
      function CB1(t2) {
        return t2 * t2 * t2;
      }
      function CB2(t2) {
        return 3 * t2 * t2 * (1 - t2);
      }
      function CB3(t2) {
        return 3 * t2 * (1 - t2) * (1 - t2);
      }
      function CB4(t2) {
        return (1 - t2) * (1 - t2) * (1 - t2);
      }
      function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
        return function(pct) {
          var c1 = CB1(pct), c2 = CB2(pct), c3 = CB3(pct), c4 = CB4(pct);
          return {
            x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,
            y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4
          };
        };
      }
      function getTangentCubicIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
        return function(pct) {
          var invT = 1 - pct, tangentX = 3 * invT * invT * (p2x - p1x) + 6 * invT * pct * (p3x - p2x) + 3 * pct * pct * (p4x - p3x), tangentY = 3 * invT * invT * (p2y - p1y) + 6 * invT * pct * (p3y - p2y) + 3 * pct * pct * (p4y - p3y);
          return Math.atan2(tangentY, tangentX);
        };
      }
      function QB1(t2) {
        return t2 * t2;
      }
      function QB2(t2) {
        return 2 * t2 * (1 - t2);
      }
      function QB3(t2) {
        return (1 - t2) * (1 - t2);
      }
      function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {
        return function(pct) {
          var c1 = QB1(pct), c2 = QB2(pct), c3 = QB3(pct);
          return {
            x: p3x * c1 + p2x * c2 + p1x * c3,
            y: p3y * c1 + p2y * c2 + p1y * c3
          };
        };
      }
      function getTangentQuadraticIterator(p1x, p1y, p2x, p2y, p3x, p3y) {
        return function(pct) {
          var invT = 1 - pct, tangentX = 2 * invT * (p2x - p1x) + 2 * pct * (p3x - p2x), tangentY = 2 * invT * (p2y - p1y) + 2 * pct * (p3y - p2y);
          return Math.atan2(tangentY, tangentX);
        };
      }
      function pathIterator(iterator, x1, y1) {
        var tempP = { x: x1, y: y1 }, p2, tmpLen = 0, perc;
        for (perc = 1; perc <= 100; perc += 1) {
          p2 = iterator(perc / 100);
          tmpLen += calcLineLength(tempP.x, tempP.y, p2.x, p2.y);
          tempP = p2;
        }
        return tmpLen;
      }
      function findPercentageForDistance(segInfo, distance) {
        var perc = 0, tmpLen = 0, iterator = segInfo.iterator, tempP = { x: segInfo.x, y: segInfo.y }, p2, nextLen, nextStep = 0.01, angleFinder = segInfo.angleFinder, lastPerc;
        while (tmpLen < distance && perc <= 1 && nextStep > 1e-4) {
          p2 = iterator(perc);
          lastPerc = perc;
          nextLen = calcLineLength(tempP.x, tempP.y, p2.x, p2.y);
          if (nextLen + tmpLen > distance) {
            nextStep /= 2;
            perc -= nextStep;
          } else {
            tempP = p2;
            perc += nextStep;
            tmpLen += nextLen;
          }
        }
        p2.angle = angleFinder(lastPerc);
        return p2;
      }
      function getPathSegmentsInfo(path) {
        var totalLength = 0, len = path.length, current, x1 = 0, y1 = 0, x2 = 0, y2 = 0, info = [], iterator, tempInfo, angleFinder;
        for (var i2 = 0; i2 < len; i2++) {
          current = path[i2];
          tempInfo = {
            x: x1,
            y: y1,
            command: current[0]
          };
          switch (current[0]) {
            case "M":
              tempInfo.length = 0;
              x2 = x1 = current[1];
              y2 = y1 = current[2];
              break;
            case "L":
              tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);
              x1 = current[1];
              y1 = current[2];
              break;
            case "C":
              iterator = getPointOnCubicBezierIterator(
                x1,
                y1,
                current[1],
                current[2],
                current[3],
                current[4],
                current[5],
                current[6]
              );
              angleFinder = getTangentCubicIterator(
                x1,
                y1,
                current[1],
                current[2],
                current[3],
                current[4],
                current[5],
                current[6]
              );
              tempInfo.iterator = iterator;
              tempInfo.angleFinder = angleFinder;
              tempInfo.length = pathIterator(iterator, x1, y1);
              x1 = current[5];
              y1 = current[6];
              break;
            case "Q":
              iterator = getPointOnQuadraticBezierIterator(
                x1,
                y1,
                current[1],
                current[2],
                current[3],
                current[4]
              );
              angleFinder = getTangentQuadraticIterator(
                x1,
                y1,
                current[1],
                current[2],
                current[3],
                current[4]
              );
              tempInfo.iterator = iterator;
              tempInfo.angleFinder = angleFinder;
              tempInfo.length = pathIterator(iterator, x1, y1);
              x1 = current[3];
              y1 = current[4];
              break;
            case "Z":
            case "z":
              tempInfo.destX = x2;
              tempInfo.destY = y2;
              tempInfo.length = calcLineLength(x1, y1, x2, y2);
              x1 = x2;
              y1 = y2;
              break;
          }
          totalLength += tempInfo.length;
          info.push(tempInfo);
        }
        info.push({ length: totalLength, x: x1, y: y1 });
        return info;
      }
      function getPointOnPath(path, distance, infos) {
        if (!infos) {
          infos = getPathSegmentsInfo(path);
        }
        var i2 = 0;
        while (distance - infos[i2].length > 0 && i2 < infos.length - 2) {
          distance -= infos[i2].length;
          i2++;
        }
        var segInfo = infos[i2], segPercent = distance / segInfo.length, command = segInfo.command, segment = path[i2], info;
        switch (command) {
          case "M":
            return { x: segInfo.x, y: segInfo.y, angle: 0 };
          case "Z":
          case "z":
            info = new fabric.Point(segInfo.x, segInfo.y).lerp(
              new fabric.Point(segInfo.destX, segInfo.destY),
              segPercent
            );
            info.angle = Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x);
            return info;
          case "L":
            info = new fabric.Point(segInfo.x, segInfo.y).lerp(
              new fabric.Point(segment[1], segment[2]),
              segPercent
            );
            info.angle = Math.atan2(segment[2] - segInfo.y, segment[1] - segInfo.x);
            return info;
          case "C":
            return findPercentageForDistance(segInfo, distance);
          case "Q":
            return findPercentageForDistance(segInfo, distance);
        }
      }
      function parsePath(pathString) {
        var result = [], coords = [], currentPath, parsed, re = fabric.rePathCommand, rNumber = "[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*", rNumberCommaWsp = "(" + rNumber + ")" + fabric.commaWsp, rFlagCommaWsp = "([01])" + fabric.commaWsp + "?", rArcSeq = rNumberCommaWsp + "?" + rNumberCommaWsp + "?" + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp + rNumberCommaWsp + "?(" + rNumber + ")", regArcArgumentSequence = new RegExp(rArcSeq, "g"), match, coordsStr, path;
        if (!pathString || !pathString.match) {
          return result;
        }
        path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);
        for (var i2 = 0, coordsParsed, len = path.length; i2 < len; i2++) {
          currentPath = path[i2];
          coordsStr = currentPath.slice(1).trim();
          coords.length = 0;
          var command = currentPath.charAt(0);
          coordsParsed = [command];
          if (command.toLowerCase() === "a") {
            for (var args; args = regArcArgumentSequence.exec(coordsStr); ) {
              for (var j2 = 1; j2 < args.length; j2++) {
                coords.push(args[j2]);
              }
            }
          } else {
            while (match = re.exec(coordsStr)) {
              coords.push(match[0]);
            }
          }
          for (var j2 = 0, jlen = coords.length; j2 < jlen; j2++) {
            parsed = parseFloat(coords[j2]);
            if (!isNaN(parsed)) {
              coordsParsed.push(parsed);
            }
          }
          var commandLength = commandLengths[command.toLowerCase()], repeatedCommand = repeatedCommands[command] || command;
          if (coordsParsed.length - 1 > commandLength) {
            for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {
              result.push([command].concat(coordsParsed.slice(k, k + commandLength)));
              command = repeatedCommand;
            }
          } else {
            result.push(coordsParsed);
          }
        }
        return result;
      }
      ;
      function getSmoothPathFromPoints(points, correction) {
        var path = [], i2, p1 = new fabric.Point(points[0].x, points[0].y), p2 = new fabric.Point(points[1].x, points[1].y), len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;
        correction = correction || 0;
        if (manyPoints) {
          multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;
          multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;
        }
        path.push(["M", p1.x - multSignX * correction, p1.y - multSignY * correction]);
        for (i2 = 1; i2 < len; i2++) {
          if (!p1.eq(p2)) {
            var midPoint = p1.midPointFrom(p2);
            path.push(["Q", p1.x, p1.y, midPoint.x, midPoint.y]);
          }
          p1 = points[i2];
          if (i2 + 1 < points.length) {
            p2 = points[i2 + 1];
          }
        }
        if (manyPoints) {
          multSignX = p1.x > points[i2 - 2].x ? 1 : p1.x === points[i2 - 2].x ? 0 : -1;
          multSignY = p1.y > points[i2 - 2].y ? 1 : p1.y === points[i2 - 2].y ? 0 : -1;
        }
        path.push(["L", p1.x + multSignX * correction, p1.y + multSignY * correction]);
        return path;
      }
      function transformPath(path, transform, pathOffset) {
        if (pathOffset) {
          transform = fabric.util.multiplyTransformMatrices(
            transform,
            [1, 0, 0, 1, -pathOffset.x, -pathOffset.y]
          );
        }
        return path.map(function(pathSegment) {
          var newSegment = pathSegment.slice(0), point = {};
          for (var i2 = 1; i2 < pathSegment.length - 1; i2 += 2) {
            point.x = pathSegment[i2];
            point.y = pathSegment[i2 + 1];
            point = fabric.util.transformPoint(point, transform);
            newSegment[i2] = point.x;
            newSegment[i2 + 1] = point.y;
          }
          return newSegment;
        });
      }
      function getBoundsOfArc(fx, fy, rx, ry, rot, large, sweep, tx, ty) {
        var fromX = 0, fromY = 0, bound, bounds = [], segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);
        for (var i2 = 0, len = segs.length; i2 < len; i2++) {
          bound = getBoundsOfCurve(fromX, fromY, segs[i2][1], segs[i2][2], segs[i2][3], segs[i2][4], segs[i2][5], segs[i2][6]);
          bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });
          bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });
          fromX = segs[i2][5];
          fromY = segs[i2][6];
        }
        return bounds;
      }
      ;
      function drawArc(ctx, fx, fy, coords) {
        coords = coords.slice(0).unshift("X");
        var beziers = fromArcToBeziers(fx, fy, coords);
        beziers.forEach(function(bezier) {
          ctx.bezierCurveTo.apply(ctx, bezier.slice(1));
        });
      }
      ;
      fabric.util.joinPath = function(pathData) {
        return pathData.map(function(segment) {
          return segment.join(" ");
        }).join(" ");
      };
      fabric.util.parsePath = parsePath;
      fabric.util.makePathSimpler = makePathSimpler;
      fabric.util.getSmoothPathFromPoints = getSmoothPathFromPoints;
      fabric.util.getPathSegmentsInfo = getPathSegmentsInfo;
      fabric.util.getBoundsOfCurve = getBoundsOfCurve;
      fabric.util.getPointOnPath = getPointOnPath;
      fabric.util.transformPath = transformPath;
      fabric.util.fromArcToBeizers = fromArcToBeziers;
      fabric.util.getBoundsOfArc = getBoundsOfArc;
      fabric.util.drawArc = drawArc;
    })();
    (function() {
      var slice = Array.prototype.slice;
      function invoke(array, method) {
        var args = slice.call(arguments, 2), result = [];
        for (var i2 = 0, len = array.length; i2 < len; i2++) {
          result[i2] = args.length ? array[i2][method].apply(array[i2], args) : array[i2][method].call(array[i2]);
        }
        return result;
      }
      function max(array, byProperty) {
        return find(array, byProperty, function(value1, value2) {
          return value1 >= value2;
        });
      }
      function min(array, byProperty) {
        return find(array, byProperty, function(value1, value2) {
          return value1 < value2;
        });
      }
      function fill(array, value) {
        var k = array.length;
        while (k--) {
          array[k] = value;
        }
        return array;
      }
      function find(array, byProperty, condition) {
        if (!array || array.length === 0) {
          return;
        }
        var i2 = array.length - 1, result = byProperty ? array[i2][byProperty] : array[i2];
        if (byProperty) {
          while (i2--) {
            if (condition(array[i2][byProperty], result)) {
              result = array[i2][byProperty];
            }
          }
        } else {
          while (i2--) {
            if (condition(array[i2], result)) {
              result = array[i2];
            }
          }
        }
        return result;
      }
      fabric.util.array = {
        fill,
        invoke,
        min,
        max
      };
    })();
    (function() {
      function extend(destination, source, deep) {
        if (deep) {
          if (!fabric.isLikelyNode && source instanceof Element) {
            destination = source;
          } else if (source instanceof Array) {
            destination = [];
            for (var i2 = 0, len = source.length; i2 < len; i2++) {
              destination[i2] = extend({}, source[i2], deep);
            }
          } else if (source && typeof source === "object") {
            for (var property in source) {
              if (property === "canvas" || property === "group") {
                destination[property] = null;
              } else if (source.hasOwnProperty(property)) {
                destination[property] = extend({}, source[property], deep);
              }
            }
          } else {
            destination = source;
          }
        } else {
          for (var property in source) {
            destination[property] = source[property];
          }
        }
        return destination;
      }
      function clone(object, deep) {
        return extend({}, object, deep);
      }
      fabric.util.object = {
        extend,
        clone
      };
      fabric.util.object.extend(fabric.util, fabric.Observable);
    })();
    (function() {
      function camelize(string) {
        return string.replace(/-+(.)?/g, function(match, character) {
          return character ? character.toUpperCase() : "";
        });
      }
      function capitalize(string, firstLetterOnly) {
        return string.charAt(0).toUpperCase() + (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());
      }
      function escapeXml(string) {
        return string.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
      }
      function graphemeSplit(textstring) {
        var i2 = 0, chr, graphemes = [];
        for (i2 = 0, chr; i2 < textstring.length; i2++) {
          if ((chr = getWholeChar(textstring, i2)) === false) {
            continue;
          }
          graphemes.push(chr);
        }
        return graphemes;
      }
      function getWholeChar(str, i2) {
        var code = str.charCodeAt(i2);
        if (isNaN(code)) {
          return "";
        }
        if (code < 55296 || code > 57343) {
          return str.charAt(i2);
        }
        if (55296 <= code && code <= 56319) {
          if (str.length <= i2 + 1) {
            throw "High surrogate without following low surrogate";
          }
          var next = str.charCodeAt(i2 + 1);
          if (56320 > next || next > 57343) {
            throw "High surrogate without following low surrogate";
          }
          return str.charAt(i2) + str.charAt(i2 + 1);
        }
        if (i2 === 0) {
          throw "Low surrogate without preceding high surrogate";
        }
        var prev = str.charCodeAt(i2 - 1);
        if (55296 > prev || prev > 56319) {
          throw "Low surrogate without preceding high surrogate";
        }
        return false;
      }
      fabric.util.string = {
        camelize,
        capitalize,
        escapeXml,
        graphemeSplit
      };
    })();
    (function() {
      var slice = Array.prototype.slice, emptyFunction = function() {
      }, IS_DONTENUM_BUGGY = function() {
        for (var p2 in { toString: 1 }) {
          if (p2 === "toString") {
            return false;
          }
        }
        return true;
      }(), addMethods = function(klass, source, parent) {
        for (var property in source) {
          if (property in klass.prototype && typeof klass.prototype[property] === "function" && (source[property] + "").indexOf("callSuper") > -1) {
            klass.prototype[property] = function(property2) {
              return function() {
                var superclass = this.constructor.superclass;
                this.constructor.superclass = parent;
                var returnValue = source[property2].apply(this, arguments);
                this.constructor.superclass = superclass;
                if (property2 !== "initialize") {
                  return returnValue;
                }
              };
            }(property);
          } else {
            klass.prototype[property] = source[property];
          }
          if (IS_DONTENUM_BUGGY) {
            if (source.toString !== Object.prototype.toString) {
              klass.prototype.toString = source.toString;
            }
            if (source.valueOf !== Object.prototype.valueOf) {
              klass.prototype.valueOf = source.valueOf;
            }
          }
        }
      };
      function Subclass() {
      }
      function callSuper(methodName) {
        var parentMethod = null, _this = this;
        while (_this.constructor.superclass) {
          var superClassMethod = _this.constructor.superclass.prototype[methodName];
          if (_this[methodName] !== superClassMethod) {
            parentMethod = superClassMethod;
            break;
          }
          _this = _this.constructor.superclass.prototype;
        }
        if (!parentMethod) {
          return console.log("tried to callSuper " + methodName + ", method not found in prototype chain", this);
        }
        return arguments.length > 1 ? parentMethod.apply(this, slice.call(arguments, 1)) : parentMethod.call(this);
      }
      function createClass() {
        var parent = null, properties = slice.call(arguments, 0);
        if (typeof properties[0] === "function") {
          parent = properties.shift();
        }
        function klass() {
          this.initialize.apply(this, arguments);
        }
        klass.superclass = parent;
        klass.subclasses = [];
        if (parent) {
          Subclass.prototype = parent.prototype;
          klass.prototype = new Subclass();
          parent.subclasses.push(klass);
        }
        for (var i2 = 0, length = properties.length; i2 < length; i2++) {
          addMethods(klass, properties[i2], parent);
        }
        if (!klass.prototype.initialize) {
          klass.prototype.initialize = emptyFunction;
        }
        klass.prototype.constructor = klass;
        klass.prototype.callSuper = callSuper;
        return klass;
      }
      fabric.util.createClass = createClass;
    })();
    (function() {
      var couldUseAttachEvent = !!fabric.document.createElement("div").attachEvent, touchEvents = ["touchstart", "touchmove", "touchend"];
      fabric.util.addListener = function(element, eventName, handler, options) {
        element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);
      };
      fabric.util.removeListener = function(element, eventName, handler, options) {
        element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);
      };
      function getTouchInfo(event) {
        var touchProp = event.changedTouches;
        if (touchProp && touchProp[0]) {
          return touchProp[0];
        }
        return event;
      }
      fabric.util.getPointer = function(event) {
        var element = event.target, scroll = fabric.util.getScrollLeftTop(element), _evt = getTouchInfo(event);
        return {
          x: _evt.clientX + scroll.left,
          y: _evt.clientY + scroll.top
        };
      };
      fabric.util.isTouchEvent = function(event) {
        return touchEvents.indexOf(event.type) > -1 || event.pointerType === "touch";
      };
    })();
    (function() {
      function setStyle(element, styles) {
        var elementStyle = element.style;
        if (!elementStyle) {
          return element;
        }
        if (typeof styles === "string") {
          element.style.cssText += ";" + styles;
          return styles.indexOf("opacity") > -1 ? setOpacity(element, styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
        }
        for (var property in styles) {
          if (property === "opacity") {
            setOpacity(element, styles[property]);
          } else {
            var normalizedProperty = property === "float" || property === "cssFloat" ? typeof elementStyle.styleFloat === "undefined" ? "cssFloat" : "styleFloat" : property;
            elementStyle[normalizedProperty] = styles[property];
          }
        }
        return element;
      }
      var parseEl = fabric.document.createElement("div"), supportsOpacity = typeof parseEl.style.opacity === "string", supportsFilters = typeof parseEl.style.filter === "string", reOpacity = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/, setOpacity = function(element) {
        return element;
      };
      if (supportsOpacity) {
        setOpacity = function(element, value) {
          element.style.opacity = value;
          return element;
        };
      } else if (supportsFilters) {
        setOpacity = function(element, value) {
          var es = element.style;
          if (element.currentStyle && !element.currentStyle.hasLayout) {
            es.zoom = 1;
          }
          if (reOpacity.test(es.filter)) {
            value = value >= 0.9999 ? "" : "alpha(opacity=" + value * 100 + ")";
            es.filter = es.filter.replace(reOpacity, value);
          } else {
            es.filter += " alpha(opacity=" + value * 100 + ")";
          }
          return element;
        };
      }
      fabric.util.setStyle = setStyle;
    })();
    (function() {
      var _slice = Array.prototype.slice;
      function getById(id) {
        return typeof id === "string" ? fabric.document.getElementById(id) : id;
      }
      var sliceCanConvertNodelists, toArray = function(arrayLike) {
        return _slice.call(arrayLike, 0);
      };
      try {
        sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;
      } catch (err) {
      }
      if (!sliceCanConvertNodelists) {
        toArray = function(arrayLike) {
          var arr = new Array(arrayLike.length), i2 = arrayLike.length;
          while (i2--) {
            arr[i2] = arrayLike[i2];
          }
          return arr;
        };
      }
      function makeElement(tagName, attributes) {
        var el = fabric.document.createElement(tagName);
        for (var prop in attributes) {
          if (prop === "class") {
            el.className = attributes[prop];
          } else if (prop === "for") {
            el.htmlFor = attributes[prop];
          } else {
            el.setAttribute(prop, attributes[prop]);
          }
        }
        return el;
      }
      function addClass(element, className) {
        if (element && (" " + element.className + " ").indexOf(" " + className + " ") === -1) {
          element.className += (element.className ? " " : "") + className;
        }
      }
      function wrapElement(element, wrapper, attributes) {
        if (typeof wrapper === "string") {
          wrapper = makeElement(wrapper, attributes);
        }
        if (element.parentNode) {
          element.parentNode.replaceChild(wrapper, element);
        }
        wrapper.appendChild(element);
        return wrapper;
      }
      function getScrollLeftTop(element) {
        var left = 0, top = 0, docElement = fabric.document.documentElement, body = fabric.document.body || {
          scrollLeft: 0,
          scrollTop: 0
        };
        while (element && (element.parentNode || element.host)) {
          element = element.parentNode || element.host;
          if (element === fabric.document) {
            left = body.scrollLeft || docElement.scrollLeft || 0;
            top = body.scrollTop || docElement.scrollTop || 0;
          } else {
            left += element.scrollLeft || 0;
            top += element.scrollTop || 0;
          }
          if (element.nodeType === 1 && element.style.position === "fixed") {
            break;
          }
        }
        return { left, top };
      }
      function getElementOffset(element) {
        var docElem, doc = element && element.ownerDocument, box = { left: 0, top: 0 }, offset = { left: 0, top: 0 }, scrollLeftTop, offsetAttributes = {
          borderLeftWidth: "left",
          borderTopWidth: "top",
          paddingLeft: "left",
          paddingTop: "top"
        };
        if (!doc) {
          return offset;
        }
        for (var attr in offsetAttributes) {
          offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;
        }
        docElem = doc.documentElement;
        if (typeof element.getBoundingClientRect !== "undefined") {
          box = element.getBoundingClientRect();
        }
        scrollLeftTop = getScrollLeftTop(element);
        return {
          left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,
          top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top
        };
      }
      var getElementStyle;
      if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {
        getElementStyle = function(element, attr) {
          var style = fabric.document.defaultView.getComputedStyle(element, null);
          return style ? style[attr] : void 0;
        };
      } else {
        getElementStyle = function(element, attr) {
          var value = element.style[attr];
          if (!value && element.currentStyle) {
            value = element.currentStyle[attr];
          }
          return value;
        };
      }
      (function() {
        var style = fabric.document.documentElement.style, selectProp = "userSelect" in style ? "userSelect" : "MozUserSelect" in style ? "MozUserSelect" : "WebkitUserSelect" in style ? "WebkitUserSelect" : "KhtmlUserSelect" in style ? "KhtmlUserSelect" : "";
        function makeElementUnselectable(element) {
          if (typeof element.onselectstart !== "undefined") {
            element.onselectstart = fabric.util.falseFunction;
          }
          if (selectProp) {
            element.style[selectProp] = "none";
          } else if (typeof element.unselectable === "string") {
            element.unselectable = "on";
          }
          return element;
        }
        function makeElementSelectable(element) {
          if (typeof element.onselectstart !== "undefined") {
            element.onselectstart = null;
          }
          if (selectProp) {
            element.style[selectProp] = "";
          } else if (typeof element.unselectable === "string") {
            element.unselectable = "";
          }
          return element;
        }
        fabric.util.makeElementUnselectable = makeElementUnselectable;
        fabric.util.makeElementSelectable = makeElementSelectable;
      })();
      function getNodeCanvas(element) {
        var impl = fabric.jsdomImplForWrapper(element);
        return impl._canvas || impl._image;
      }
      ;
      function cleanUpJsdomNode(element) {
        if (!fabric.isLikelyNode) {
          return;
        }
        var impl = fabric.jsdomImplForWrapper(element);
        if (impl) {
          impl._image = null;
          impl._canvas = null;
          impl._currentSrc = null;
          impl._attributes = null;
          impl._classList = null;
        }
      }
      function setImageSmoothing(ctx, value) {
        ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;
        ctx.imageSmoothingEnabled = value;
      }
      fabric.util.setImageSmoothing = setImageSmoothing;
      fabric.util.getById = getById;
      fabric.util.toArray = toArray;
      fabric.util.addClass = addClass;
      fabric.util.makeElement = makeElement;
      fabric.util.wrapElement = wrapElement;
      fabric.util.getScrollLeftTop = getScrollLeftTop;
      fabric.util.getElementOffset = getElementOffset;
      fabric.util.getNodeCanvas = getNodeCanvas;
      fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;
    })();
    (function() {
      function addParamToUrl(url, param) {
        return url + (/\?/.test(url) ? "&" : "?") + param;
      }
      function emptyFn() {
      }
      function request(url, options) {
        options || (options = {});
        var method = options.method ? options.method.toUpperCase() : "GET", onComplete = options.onComplete || function() {
        }, xhr = new fabric.window.XMLHttpRequest(), body = options.body || options.parameters;
        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            onComplete(xhr);
            xhr.onreadystatechange = emptyFn;
          }
        };
        if (method === "GET") {
          body = null;
          if (typeof options.parameters === "string") {
            url = addParamToUrl(url, options.parameters);
          }
        }
        xhr.open(method, url, true);
        if (method === "POST" || method === "PUT") {
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        }
        xhr.send(body);
        return xhr;
      }
      fabric.util.request = request;
    })();
    fabric.log = console.log;
    fabric.warn = console.warn;
    (function() {
      function noop() {
        return false;
      }
      function defaultEasing(t2, b2, c2, d2) {
        return -c2 * Math.cos(t2 / d2 * (Math.PI / 2)) + c2 + b2;
      }
      function animate(options) {
        var cancel = false;
        requestAnimFrame(function(timestamp) {
          options || (options = {});
          var start = timestamp || +/* @__PURE__ */ new Date(), duration = options.duration || 500, finish = start + duration, time, onChange = options.onChange || noop, abort = options.abort || noop, onComplete = options.onComplete || noop, easing = options.easing || defaultEasing, startValue = "startValue" in options ? options.startValue : 0, endValue = "endValue" in options ? options.endValue : 100, byValue = options.byValue || endValue - startValue;
          options.onStart && options.onStart();
          (function tick(ticktime) {
            time = ticktime || +/* @__PURE__ */ new Date();
            var currentTime = time > finish ? duration : time - start, timePerc = currentTime / duration, current = easing(currentTime, startValue, byValue, duration), valuePerc = Math.abs((current - startValue) / byValue);
            if (cancel) {
              return;
            }
            if (abort(current, valuePerc, timePerc)) {
              onComplete(endValue, 1, 1);
              return;
            }
            if (time > finish) {
              onChange(endValue, 1, 1);
              onComplete(endValue, 1, 1);
              return;
            } else {
              onChange(current, valuePerc, timePerc);
              requestAnimFrame(tick);
            }
          })(start);
        });
        return function() {
          cancel = true;
        };
      }
      var _requestAnimFrame = fabric.window.requestAnimationFrame || fabric.window.webkitRequestAnimationFrame || fabric.window.mozRequestAnimationFrame || fabric.window.oRequestAnimationFrame || fabric.window.msRequestAnimationFrame || function(callback) {
        return fabric.window.setTimeout(callback, 1e3 / 60);
      };
      var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;
      function requestAnimFrame() {
        return _requestAnimFrame.apply(fabric.window, arguments);
      }
      function cancelAnimFrame() {
        return _cancelAnimFrame.apply(fabric.window, arguments);
      }
      fabric.util.animate = animate;
      fabric.util.requestAnimFrame = requestAnimFrame;
      fabric.util.cancelAnimFrame = cancelAnimFrame;
    })();
    (function() {
      function calculateColor(begin, end, pos) {
        var color = "rgba(" + parseInt(begin[0] + pos * (end[0] - begin[0]), 10) + "," + parseInt(begin[1] + pos * (end[1] - begin[1]), 10) + "," + parseInt(begin[2] + pos * (end[2] - begin[2]), 10);
        color += "," + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);
        color += ")";
        return color;
      }
      function animateColor(fromColor, toColor, duration, options) {
        var startColor = new fabric.Color(fromColor).getSource(), endColor = new fabric.Color(toColor).getSource(), originalOnComplete = options.onComplete, originalOnChange = options.onChange;
        options = options || {};
        return fabric.util.animate(fabric.util.object.extend(options, {
          duration: duration || 500,
          startValue: startColor,
          endValue: endColor,
          byValue: endColor,
          easing: function(currentTime, startValue, byValue, duration2) {
            var posValue = options.colorEasing ? options.colorEasing(currentTime, duration2) : 1 - Math.cos(currentTime / duration2 * (Math.PI / 2));
            return calculateColor(startValue, byValue, posValue);
          },
          // has to take in account for color restoring;
          onComplete: function(current, valuePerc, timePerc) {
            if (originalOnComplete) {
              return originalOnComplete(
                calculateColor(endColor, endColor, 0),
                valuePerc,
                timePerc
              );
            }
          },
          onChange: function(current, valuePerc, timePerc) {
            if (originalOnChange) {
              if (Array.isArray(current)) {
                return originalOnChange(
                  calculateColor(current, current, 0),
                  valuePerc,
                  timePerc
                );
              }
              originalOnChange(current, valuePerc, timePerc);
            }
          }
        }));
      }
      fabric.util.animateColor = animateColor;
    })();
    (function() {
      function normalize(a2, c2, p2, s2) {
        if (a2 < Math.abs(c2)) {
          a2 = c2;
          s2 = p2 / 4;
        } else {
          if (c2 === 0 && a2 === 0) {
            s2 = p2 / (2 * Math.PI) * Math.asin(1);
          } else {
            s2 = p2 / (2 * Math.PI) * Math.asin(c2 / a2);
          }
        }
        return { a: a2, c: c2, p: p2, s: s2 };
      }
      function elastic(opts, t2, d2) {
        return opts.a * Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 * d2 - opts.s) * (2 * Math.PI) / opts.p);
      }
      function easeOutCubic(t2, b2, c2, d2) {
        return c2 * ((t2 = t2 / d2 - 1) * t2 * t2 + 1) + b2;
      }
      function easeInOutCubic(t2, b2, c2, d2) {
        t2 /= d2 / 2;
        if (t2 < 1) {
          return c2 / 2 * t2 * t2 * t2 + b2;
        }
        return c2 / 2 * ((t2 -= 2) * t2 * t2 + 2) + b2;
      }
      function easeInQuart(t2, b2, c2, d2) {
        return c2 * (t2 /= d2) * t2 * t2 * t2 + b2;
      }
      function easeOutQuart(t2, b2, c2, d2) {
        return -c2 * ((t2 = t2 / d2 - 1) * t2 * t2 * t2 - 1) + b2;
      }
      function easeInOutQuart(t2, b2, c2, d2) {
        t2 /= d2 / 2;
        if (t2 < 1) {
          return c2 / 2 * t2 * t2 * t2 * t2 + b2;
        }
        return -c2 / 2 * ((t2 -= 2) * t2 * t2 * t2 - 2) + b2;
      }
      function easeInQuint(t2, b2, c2, d2) {
        return c2 * (t2 /= d2) * t2 * t2 * t2 * t2 + b2;
      }
      function easeOutQuint(t2, b2, c2, d2) {
        return c2 * ((t2 = t2 / d2 - 1) * t2 * t2 * t2 * t2 + 1) + b2;
      }
      function easeInOutQuint(t2, b2, c2, d2) {
        t2 /= d2 / 2;
        if (t2 < 1) {
          return c2 / 2 * t2 * t2 * t2 * t2 * t2 + b2;
        }
        return c2 / 2 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2) + b2;
      }
      function easeInSine(t2, b2, c2, d2) {
        return -c2 * Math.cos(t2 / d2 * (Math.PI / 2)) + c2 + b2;
      }
      function easeOutSine(t2, b2, c2, d2) {
        return c2 * Math.sin(t2 / d2 * (Math.PI / 2)) + b2;
      }
      function easeInOutSine(t2, b2, c2, d2) {
        return -c2 / 2 * (Math.cos(Math.PI * t2 / d2) - 1) + b2;
      }
      function easeInExpo(t2, b2, c2, d2) {
        return t2 === 0 ? b2 : c2 * Math.pow(2, 10 * (t2 / d2 - 1)) + b2;
      }
      function easeOutExpo(t2, b2, c2, d2) {
        return t2 === d2 ? b2 + c2 : c2 * (-Math.pow(2, -10 * t2 / d2) + 1) + b2;
      }
      function easeInOutExpo(t2, b2, c2, d2) {
        if (t2 === 0) {
          return b2;
        }
        if (t2 === d2) {
          return b2 + c2;
        }
        t2 /= d2 / 2;
        if (t2 < 1) {
          return c2 / 2 * Math.pow(2, 10 * (t2 - 1)) + b2;
        }
        return c2 / 2 * (-Math.pow(2, -10 * --t2) + 2) + b2;
      }
      function easeInCirc(t2, b2, c2, d2) {
        return -c2 * (Math.sqrt(1 - (t2 /= d2) * t2) - 1) + b2;
      }
      function easeOutCirc(t2, b2, c2, d2) {
        return c2 * Math.sqrt(1 - (t2 = t2 / d2 - 1) * t2) + b2;
      }
      function easeInOutCirc(t2, b2, c2, d2) {
        t2 /= d2 / 2;
        if (t2 < 1) {
          return -c2 / 2 * (Math.sqrt(1 - t2 * t2) - 1) + b2;
        }
        return c2 / 2 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1) + b2;
      }
      function easeInElastic(t2, b2, c2, d2) {
        var s2 = 1.70158, p2 = 0, a2 = c2;
        if (t2 === 0) {
          return b2;
        }
        t2 /= d2;
        if (t2 === 1) {
          return b2 + c2;
        }
        if (!p2) {
          p2 = d2 * 0.3;
        }
        var opts = normalize(a2, c2, p2, s2);
        return -elastic(opts, t2, d2) + b2;
      }
      function easeOutElastic(t2, b2, c2, d2) {
        var s2 = 1.70158, p2 = 0, a2 = c2;
        if (t2 === 0) {
          return b2;
        }
        t2 /= d2;
        if (t2 === 1) {
          return b2 + c2;
        }
        if (!p2) {
          p2 = d2 * 0.3;
        }
        var opts = normalize(a2, c2, p2, s2);
        return opts.a * Math.pow(2, -10 * t2) * Math.sin((t2 * d2 - opts.s) * (2 * Math.PI) / opts.p) + opts.c + b2;
      }
      function easeInOutElastic(t2, b2, c2, d2) {
        var s2 = 1.70158, p2 = 0, a2 = c2;
        if (t2 === 0) {
          return b2;
        }
        t2 /= d2 / 2;
        if (t2 === 2) {
          return b2 + c2;
        }
        if (!p2) {
          p2 = d2 * (0.3 * 1.5);
        }
        var opts = normalize(a2, c2, p2, s2);
        if (t2 < 1) {
          return -0.5 * elastic(opts, t2, d2) + b2;
        }
        return opts.a * Math.pow(2, -10 * (t2 -= 1)) * Math.sin((t2 * d2 - opts.s) * (2 * Math.PI) / opts.p) * 0.5 + opts.c + b2;
      }
      function easeInBack(t2, b2, c2, d2, s2) {
        if (s2 === void 0) {
          s2 = 1.70158;
        }
        return c2 * (t2 /= d2) * t2 * ((s2 + 1) * t2 - s2) + b2;
      }
      function easeOutBack(t2, b2, c2, d2, s2) {
        if (s2 === void 0) {
          s2 = 1.70158;
        }
        return c2 * ((t2 = t2 / d2 - 1) * t2 * ((s2 + 1) * t2 + s2) + 1) + b2;
      }
      function easeInOutBack(t2, b2, c2, d2, s2) {
        if (s2 === void 0) {
          s2 = 1.70158;
        }
        t2 /= d2 / 2;
        if (t2 < 1) {
          return c2 / 2 * (t2 * t2 * (((s2 *= 1.525) + 1) * t2 - s2)) + b2;
        }
        return c2 / 2 * ((t2 -= 2) * t2 * (((s2 *= 1.525) + 1) * t2 + s2) + 2) + b2;
      }
      function easeInBounce(t2, b2, c2, d2) {
        return c2 - easeOutBounce(d2 - t2, 0, c2, d2) + b2;
      }
      function easeOutBounce(t2, b2, c2, d2) {
        if ((t2 /= d2) < 1 / 2.75) {
          return c2 * (7.5625 * t2 * t2) + b2;
        } else if (t2 < 2 / 2.75) {
          return c2 * (7.5625 * (t2 -= 1.5 / 2.75) * t2 + 0.75) + b2;
        } else if (t2 < 2.5 / 2.75) {
          return c2 * (7.5625 * (t2 -= 2.25 / 2.75) * t2 + 0.9375) + b2;
        } else {
          return c2 * (7.5625 * (t2 -= 2.625 / 2.75) * t2 + 0.984375) + b2;
        }
      }
      function easeInOutBounce(t2, b2, c2, d2) {
        if (t2 < d2 / 2) {
          return easeInBounce(t2 * 2, 0, c2, d2) * 0.5 + b2;
        }
        return easeOutBounce(t2 * 2 - d2, 0, c2, d2) * 0.5 + c2 * 0.5 + b2;
      }
      fabric.util.ease = {
        /**
         * Quadratic easing in
         * @memberOf fabric.util.ease
         */
        easeInQuad: function(t2, b2, c2, d2) {
          return c2 * (t2 /= d2) * t2 + b2;
        },
        /**
         * Quadratic easing out
         * @memberOf fabric.util.ease
         */
        easeOutQuad: function(t2, b2, c2, d2) {
          return -c2 * (t2 /= d2) * (t2 - 2) + b2;
        },
        /**
         * Quadratic easing in and out
         * @memberOf fabric.util.ease
         */
        easeInOutQuad: function(t2, b2, c2, d2) {
          t2 /= d2 / 2;
          if (t2 < 1) {
            return c2 / 2 * t2 * t2 + b2;
          }
          return -c2 / 2 * (--t2 * (t2 - 2) - 1) + b2;
        },
        /**
         * Cubic easing in
         * @memberOf fabric.util.ease
         */
        easeInCubic: function(t2, b2, c2, d2) {
          return c2 * (t2 /= d2) * t2 * t2 + b2;
        },
        easeOutCubic,
        easeInOutCubic,
        easeInQuart,
        easeOutQuart,
        easeInOutQuart,
        easeInQuint,
        easeOutQuint,
        easeInOutQuint,
        easeInSine,
        easeOutSine,
        easeInOutSine,
        easeInExpo,
        easeOutExpo,
        easeInOutExpo,
        easeInCirc,
        easeOutCirc,
        easeInOutCirc,
        easeInElastic,
        easeOutElastic,
        easeInOutElastic,
        easeInBack,
        easeOutBack,
        easeInOutBack,
        easeInBounce,
        easeOutBounce,
        easeInOutBounce
      };
    })();
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend, clone = fabric2.util.object.clone, toFixed = fabric2.util.toFixed, parseUnit = fabric2.util.parseUnit, multiplyTransformMatrices = fabric2.util.multiplyTransformMatrices, svgValidTagNames = [
        "path",
        "circle",
        "polygon",
        "polyline",
        "ellipse",
        "rect",
        "line",
        "image",
        "text"
      ], svgViewBoxElements = ["symbol", "image", "marker", "pattern", "view", "svg"], svgInvalidAncestors = ["pattern", "defs", "symbol", "metadata", "clipPath", "mask", "desc"], svgValidParents = ["symbol", "g", "a", "svg", "clipPath", "defs"], attributesMap = {
        cx: "left",
        x: "left",
        r: "radius",
        cy: "top",
        y: "top",
        display: "visible",
        visibility: "visible",
        transform: "transformMatrix",
        "fill-opacity": "fillOpacity",
        "fill-rule": "fillRule",
        "font-family": "fontFamily",
        "font-size": "fontSize",
        "font-style": "fontStyle",
        "font-weight": "fontWeight",
        "letter-spacing": "charSpacing",
        "paint-order": "paintFirst",
        "stroke-dasharray": "strokeDashArray",
        "stroke-dashoffset": "strokeDashOffset",
        "stroke-linecap": "strokeLineCap",
        "stroke-linejoin": "strokeLineJoin",
        "stroke-miterlimit": "strokeMiterLimit",
        "stroke-opacity": "strokeOpacity",
        "stroke-width": "strokeWidth",
        "text-decoration": "textDecoration",
        "text-anchor": "textAnchor",
        opacity: "opacity",
        "clip-path": "clipPath",
        "clip-rule": "clipRule",
        "vector-effect": "strokeUniform",
        "image-rendering": "imageSmoothing"
      }, colorAttributes = {
        stroke: "strokeOpacity",
        fill: "fillOpacity"
      }, fSize = "font-size", cPath = "clip-path";
      fabric2.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);
      fabric2.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);
      fabric2.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);
      fabric2.svgValidParentsRegEx = getSvgRegex(svgValidParents);
      fabric2.cssRules = {};
      fabric2.gradientDefs = {};
      fabric2.clipPaths = {};
      function normalizeAttr(attr) {
        if (attr in attributesMap) {
          return attributesMap[attr];
        }
        return attr;
      }
      function normalizeValue(attr, value, parentAttributes, fontSize) {
        var isArray = Object.prototype.toString.call(value) === "[object Array]", parsed;
        if ((attr === "fill" || attr === "stroke") && value === "none") {
          value = "";
        } else if (attr === "strokeUniform") {
          return value === "non-scaling-stroke";
        } else if (attr === "strokeDashArray") {
          if (value === "none") {
            value = null;
          } else {
            value = value.replace(/,/g, " ").split(/\s+/).map(parseFloat);
          }
        } else if (attr === "transformMatrix") {
          if (parentAttributes && parentAttributes.transformMatrix) {
            value = multiplyTransformMatrices(
              parentAttributes.transformMatrix,
              fabric2.parseTransformAttribute(value)
            );
          } else {
            value = fabric2.parseTransformAttribute(value);
          }
        } else if (attr === "visible") {
          value = value !== "none" && value !== "hidden";
          if (parentAttributes && parentAttributes.visible === false) {
            value = false;
          }
        } else if (attr === "opacity") {
          value = parseFloat(value);
          if (parentAttributes && typeof parentAttributes.opacity !== "undefined") {
            value *= parentAttributes.opacity;
          }
        } else if (attr === "textAnchor") {
          value = value === "start" ? "left" : value === "end" ? "right" : "center";
        } else if (attr === "charSpacing") {
          parsed = parseUnit(value, fontSize) / fontSize * 1e3;
        } else if (attr === "paintFirst") {
          var fillIndex = value.indexOf("fill");
          var strokeIndex = value.indexOf("stroke");
          var value = "fill";
          if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {
            value = "stroke";
          } else if (fillIndex === -1 && strokeIndex > -1) {
            value = "stroke";
          }
        } else if (attr === "href" || attr === "xlink:href" || attr === "font") {
          return value;
        } else if (attr === "imageSmoothing") {
          return value === "optimizeQuality";
        } else {
          parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);
        }
        return !isArray && isNaN(parsed) ? value : parsed;
      }
      function getSvgRegex(arr) {
        return new RegExp("^(" + arr.join("|") + ")\\b", "i");
      }
      function _setStrokeFillOpacity(attributes) {
        for (var attr in colorAttributes) {
          if (typeof attributes[colorAttributes[attr]] === "undefined" || attributes[attr] === "") {
            continue;
          }
          if (typeof attributes[attr] === "undefined") {
            if (!fabric2.Object.prototype[attr]) {
              continue;
            }
            attributes[attr] = fabric2.Object.prototype[attr];
          }
          if (attributes[attr].indexOf("url(") === 0) {
            continue;
          }
          var color = new fabric2.Color(attributes[attr]);
          attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();
        }
        return attributes;
      }
      function _getMultipleNodes(doc, nodeNames) {
        var nodeName, nodeArray = [], nodeList, i2, len;
        for (i2 = 0, len = nodeNames.length; i2 < len; i2++) {
          nodeName = nodeNames[i2];
          nodeList = doc.getElementsByTagName(nodeName);
          nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));
        }
        return nodeArray;
      }
      fabric2.parseTransformAttribute = function() {
        function rotateMatrix(matrix2, args) {
          var cos = fabric2.util.cos(args[0]), sin = fabric2.util.sin(args[0]), x = 0, y2 = 0;
          if (args.length === 3) {
            x = args[1];
            y2 = args[2];
          }
          matrix2[0] = cos;
          matrix2[1] = sin;
          matrix2[2] = -sin;
          matrix2[3] = cos;
          matrix2[4] = x - (cos * x - sin * y2);
          matrix2[5] = y2 - (sin * x + cos * y2);
        }
        function scaleMatrix(matrix2, args) {
          var multiplierX = args[0], multiplierY = args.length === 2 ? args[1] : args[0];
          matrix2[0] = multiplierX;
          matrix2[3] = multiplierY;
        }
        function skewMatrix(matrix2, args, pos) {
          matrix2[pos] = Math.tan(fabric2.util.degreesToRadians(args[0]));
        }
        function translateMatrix(matrix2, args) {
          matrix2[4] = args[0];
          if (args.length === 2) {
            matrix2[5] = args[1];
          }
        }
        var iMatrix = fabric2.iMatrix, number = fabric2.reNum, commaWsp = fabric2.commaWsp, skewX = "(?:(skewX)\\s*\\(\\s*(" + number + ")\\s*\\))", skewY = "(?:(skewY)\\s*\\(\\s*(" + number + ")\\s*\\))", rotate = "(?:(rotate)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + "))?\\s*\\))", scale = "(?:(scale)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + "))?\\s*\\))", translate = "(?:(translate)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + "))?\\s*\\))", matrix = "(?:(matrix)\\s*\\(\\s*(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")\\s*\\))", transform = "(?:" + matrix + "|" + translate + "|" + scale + "|" + rotate + "|" + skewX + "|" + skewY + ")", transforms = "(?:" + transform + "(?:" + commaWsp + "*" + transform + ")*)", transformList = "^\\s*(?:" + transforms + "?)\\s*$", reTransformList = new RegExp(transformList), reTransform = new RegExp(transform, "g");
        return function(attributeValue) {
          var matrix2 = iMatrix.concat(), matrices = [];
          if (!attributeValue || attributeValue && !reTransformList.test(attributeValue)) {
            return matrix2;
          }
          attributeValue.replace(reTransform, function(match) {
            var m2 = new RegExp(transform).exec(match).filter(function(match2) {
              return !!match2;
            }), operation = m2[1], args = m2.slice(2).map(parseFloat);
            switch (operation) {
              case "translate":
                translateMatrix(matrix2, args);
                break;
              case "rotate":
                args[0] = fabric2.util.degreesToRadians(args[0]);
                rotateMatrix(matrix2, args);
                break;
              case "scale":
                scaleMatrix(matrix2, args);
                break;
              case "skewX":
                skewMatrix(matrix2, args, 2);
                break;
              case "skewY":
                skewMatrix(matrix2, args, 1);
                break;
              case "matrix":
                matrix2 = args;
                break;
            }
            matrices.push(matrix2.concat());
            matrix2 = iMatrix.concat();
          });
          var combinedMatrix = matrices[0];
          while (matrices.length > 1) {
            matrices.shift();
            combinedMatrix = fabric2.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);
          }
          return combinedMatrix;
        };
      }();
      function parseStyleString(style, oStyle) {
        var attr, value;
        style.replace(/;\s*$/, "").split(";").forEach(function(chunk) {
          var pair = chunk.split(":");
          attr = pair[0].trim().toLowerCase();
          value = pair[1].trim();
          oStyle[attr] = value;
        });
      }
      function parseStyleObject(style, oStyle) {
        var attr, value;
        for (var prop in style) {
          if (typeof style[prop] === "undefined") {
            continue;
          }
          attr = prop.toLowerCase();
          value = style[prop];
          oStyle[attr] = value;
        }
      }
      function getGlobalStylesForElement(element, svgUid) {
        var styles = {};
        for (var rule in fabric2.cssRules[svgUid]) {
          if (elementMatchesRule(element, rule.split(" "))) {
            for (var property in fabric2.cssRules[svgUid][rule]) {
              styles[property] = fabric2.cssRules[svgUid][rule][property];
            }
          }
        }
        return styles;
      }
      function elementMatchesRule(element, selectors) {
        var firstMatching, parentMatching = true;
        firstMatching = selectorMatches(element, selectors.pop());
        if (firstMatching && selectors.length) {
          parentMatching = doesSomeParentMatch(element, selectors);
        }
        return firstMatching && parentMatching && selectors.length === 0;
      }
      function doesSomeParentMatch(element, selectors) {
        var selector, parentMatching = true;
        while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {
          if (parentMatching) {
            selector = selectors.pop();
          }
          element = element.parentNode;
          parentMatching = selectorMatches(element, selector);
        }
        return selectors.length === 0;
      }
      function selectorMatches(element, selector) {
        var nodeName = element.nodeName, classNames = element.getAttribute("class"), id = element.getAttribute("id"), matcher, i2;
        matcher = new RegExp("^" + nodeName, "i");
        selector = selector.replace(matcher, "");
        if (id && selector.length) {
          matcher = new RegExp("#" + id + "(?![a-zA-Z\\-]+)", "i");
          selector = selector.replace(matcher, "");
        }
        if (classNames && selector.length) {
          classNames = classNames.split(" ");
          for (i2 = classNames.length; i2--; ) {
            matcher = new RegExp("\\." + classNames[i2] + "(?![a-zA-Z\\-]+)", "i");
            selector = selector.replace(matcher, "");
          }
        }
        return selector.length === 0;
      }
      function elementById(doc, id) {
        var el;
        doc.getElementById && (el = doc.getElementById(id));
        if (el) {
          return el;
        }
        var node, i2, len, nodelist = doc.getElementsByTagName("*");
        for (i2 = 0, len = nodelist.length; i2 < len; i2++) {
          node = nodelist[i2];
          if (id === node.getAttribute("id")) {
            return node;
          }
        }
      }
      function parseUseDirectives(doc) {
        var nodelist = _getMultipleNodes(doc, ["use", "svg:use"]), i2 = 0;
        while (nodelist.length && i2 < nodelist.length) {
          var el = nodelist[i2], xlinkAttribute = el.getAttribute("xlink:href") || el.getAttribute("href");
          if (xlinkAttribute === null) {
            return;
          }
          var xlink = xlinkAttribute.substr(1), x = el.getAttribute("x") || 0, y2 = el.getAttribute("y") || 0, el2 = elementById(doc, xlink).cloneNode(true), currentTrans = (el2.getAttribute("transform") || "") + " translate(" + x + ", " + y2 + ")", parentNode, oldLength = nodelist.length, attr, j2, attrs, len, namespace = fabric2.svgNS;
          applyViewboxTransform(el2);
          if (/^svg$/i.test(el2.nodeName)) {
            var el3 = el2.ownerDocument.createElementNS(namespace, "g");
            for (j2 = 0, attrs = el2.attributes, len = attrs.length; j2 < len; j2++) {
              attr = attrs.item(j2);
              el3.setAttributeNS(namespace, attr.nodeName, attr.nodeValue);
            }
            while (el2.firstChild) {
              el3.appendChild(el2.firstChild);
            }
            el2 = el3;
          }
          for (j2 = 0, attrs = el.attributes, len = attrs.length; j2 < len; j2++) {
            attr = attrs.item(j2);
            if (attr.nodeName === "x" || attr.nodeName === "y" || attr.nodeName === "xlink:href" || attr.nodeName === "href") {
              continue;
            }
            if (attr.nodeName === "transform") {
              currentTrans = attr.nodeValue + " " + currentTrans;
            } else {
              el2.setAttribute(attr.nodeName, attr.nodeValue);
            }
          }
          el2.setAttribute("transform", currentTrans);
          el2.setAttribute("instantiated_by_use", "1");
          el2.removeAttribute("id");
          parentNode = el.parentNode;
          parentNode.replaceChild(el2, el);
          if (nodelist.length === oldLength) {
            i2++;
          }
        }
      }
      var reViewBoxAttrValue = new RegExp(
        "^\\s*(" + fabric2.reNum + "+)\\s*,?\\s*(" + fabric2.reNum + "+)\\s*,?\\s*(" + fabric2.reNum + "+)\\s*,?\\s*(" + fabric2.reNum + "+)\\s*$"
      );
      function applyViewboxTransform(element) {
        if (!fabric2.svgViewBoxElementsRegEx.test(element.nodeName)) {
          return {};
        }
        var viewBoxAttr = element.getAttribute("viewBox"), scaleX = 1, scaleY = 1, minX = 0, minY = 0, viewBoxWidth, viewBoxHeight, matrix, el, widthAttr = element.getAttribute("width"), heightAttr = element.getAttribute("height"), x = element.getAttribute("x") || 0, y2 = element.getAttribute("y") || 0, preserveAspectRatio = element.getAttribute("preserveAspectRatio") || "", missingViewBox = !viewBoxAttr || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue)), missingDimAttr = !widthAttr || !heightAttr || widthAttr === "100%" || heightAttr === "100%", toBeParsed = missingViewBox && missingDimAttr, parsedDim = {}, translateMatrix = "", widthDiff = 0, heightDiff = 0;
        parsedDim.width = 0;
        parsedDim.height = 0;
        parsedDim.toBeParsed = toBeParsed;
        if (missingViewBox) {
          if ((x || y2) && element.parentNode && element.parentNode.nodeName !== "#document") {
            translateMatrix = " translate(" + parseUnit(x) + " " + parseUnit(y2) + ") ";
            matrix = (element.getAttribute("transform") || "") + translateMatrix;
            element.setAttribute("transform", matrix);
            element.removeAttribute("x");
            element.removeAttribute("y");
          }
        }
        if (toBeParsed) {
          return parsedDim;
        }
        if (missingViewBox) {
          parsedDim.width = parseUnit(widthAttr);
          parsedDim.height = parseUnit(heightAttr);
          return parsedDim;
        }
        minX = -parseFloat(viewBoxAttr[1]);
        minY = -parseFloat(viewBoxAttr[2]);
        viewBoxWidth = parseFloat(viewBoxAttr[3]);
        viewBoxHeight = parseFloat(viewBoxAttr[4]);
        parsedDim.minX = minX;
        parsedDim.minY = minY;
        parsedDim.viewBoxWidth = viewBoxWidth;
        parsedDim.viewBoxHeight = viewBoxHeight;
        if (!missingDimAttr) {
          parsedDim.width = parseUnit(widthAttr);
          parsedDim.height = parseUnit(heightAttr);
          scaleX = parsedDim.width / viewBoxWidth;
          scaleY = parsedDim.height / viewBoxHeight;
        } else {
          parsedDim.width = viewBoxWidth;
          parsedDim.height = viewBoxHeight;
        }
        preserveAspectRatio = fabric2.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);
        if (preserveAspectRatio.alignX !== "none") {
          if (preserveAspectRatio.meetOrSlice === "meet") {
            scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;
          }
          if (preserveAspectRatio.meetOrSlice === "slice") {
            scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;
          }
          widthDiff = parsedDim.width - viewBoxWidth * scaleX;
          heightDiff = parsedDim.height - viewBoxHeight * scaleX;
          if (preserveAspectRatio.alignX === "Mid") {
            widthDiff /= 2;
          }
          if (preserveAspectRatio.alignY === "Mid") {
            heightDiff /= 2;
          }
          if (preserveAspectRatio.alignX === "Min") {
            widthDiff = 0;
          }
          if (preserveAspectRatio.alignY === "Min") {
            heightDiff = 0;
          }
        }
        if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y2 === 0) {
          return parsedDim;
        }
        if ((x || y2) && element.parentNode.nodeName !== "#document") {
          translateMatrix = " translate(" + parseUnit(x) + " " + parseUnit(y2) + ") ";
        }
        matrix = translateMatrix + " matrix(" + scaleX + " 0 0 " + scaleY + " " + (minX * scaleX + widthDiff) + " " + (minY * scaleY + heightDiff) + ") ";
        if (element.nodeName === "svg") {
          el = element.ownerDocument.createElementNS(fabric2.svgNS, "g");
          while (element.firstChild) {
            el.appendChild(element.firstChild);
          }
          element.appendChild(el);
        } else {
          el = element;
          el.removeAttribute("x");
          el.removeAttribute("y");
          matrix = el.getAttribute("transform") + matrix;
        }
        el.setAttribute("transform", matrix);
        return parsedDim;
      }
      function hasAncestorWithNodeName(element, nodeName) {
        while (element && (element = element.parentNode)) {
          if (element.nodeName && nodeName.test(element.nodeName.replace("svg:", "")) && !element.getAttribute("instantiated_by_use")) {
            return true;
          }
        }
        return false;
      }
      fabric2.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {
        if (!doc) {
          return;
        }
        parseUseDirectives(doc);
        var svgUid = fabric2.Object.__uid++, i2, len, options = applyViewboxTransform(doc), descendants = fabric2.util.toArray(doc.getElementsByTagName("*"));
        options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;
        options.svgUid = svgUid;
        if (descendants.length === 0 && fabric2.isLikelyNode) {
          descendants = doc.selectNodes('//*[name(.)!="svg"]');
          var arr = [];
          for (i2 = 0, len = descendants.length; i2 < len; i2++) {
            arr[i2] = descendants[i2];
          }
          descendants = arr;
        }
        var elements = descendants.filter(function(el) {
          applyViewboxTransform(el);
          return fabric2.svgValidTagNamesRegEx.test(el.nodeName.replace("svg:", "")) && !hasAncestorWithNodeName(el, fabric2.svgInvalidAncestorsRegEx);
        });
        if (!elements || elements && !elements.length) {
          callback && callback([], {});
          return;
        }
        var clipPaths = {};
        descendants.filter(function(el) {
          return el.nodeName.replace("svg:", "") === "clipPath";
        }).forEach(function(el) {
          var id = el.getAttribute("id");
          clipPaths[id] = fabric2.util.toArray(el.getElementsByTagName("*")).filter(function(el2) {
            return fabric2.svgValidTagNamesRegEx.test(el2.nodeName.replace("svg:", ""));
          });
        });
        fabric2.gradientDefs[svgUid] = fabric2.getGradientDefs(doc);
        fabric2.cssRules[svgUid] = fabric2.getCSSRules(doc);
        fabric2.clipPaths[svgUid] = clipPaths;
        fabric2.parseElements(elements, function(instances, elements2) {
          if (callback) {
            callback(instances, options, elements2, descendants);
            delete fabric2.gradientDefs[svgUid];
            delete fabric2.cssRules[svgUid];
            delete fabric2.clipPaths[svgUid];
          }
        }, clone(options), reviver, parsingOptions);
      };
      function recursivelyParseGradientsXlink(doc, gradient) {
        var gradientsAttrs = ["gradientTransform", "x1", "x2", "y1", "y2", "gradientUnits", "cx", "cy", "r", "fx", "fy"], xlinkAttr = "xlink:href", xLink = gradient.getAttribute(xlinkAttr).substr(1), referencedGradient = elementById(doc, xLink);
        if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {
          recursivelyParseGradientsXlink(doc, referencedGradient);
        }
        gradientsAttrs.forEach(function(attr) {
          if (referencedGradient && !gradient.hasAttribute(attr) && referencedGradient.hasAttribute(attr)) {
            gradient.setAttribute(attr, referencedGradient.getAttribute(attr));
          }
        });
        if (!gradient.children.length) {
          var referenceClone = referencedGradient.cloneNode(true);
          while (referenceClone.firstChild) {
            gradient.appendChild(referenceClone.firstChild);
          }
        }
        gradient.removeAttribute(xlinkAttr);
      }
      var reFontDeclaration = new RegExp(
        "(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*(" + fabric2.reNum + "(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|" + fabric2.reNum + "))?\\s+(.*)"
      );
      extend(fabric2, {
        /**
         * Parses a short font declaration, building adding its properties to a style object
         * @static
         * @function
         * @memberOf fabric
         * @param {String} value font declaration
         * @param {Object} oStyle definition
         */
        parseFontDeclaration: function(value, oStyle) {
          var match = value.match(reFontDeclaration);
          if (!match) {
            return;
          }
          var fontStyle = match[1], fontWeight = match[3], fontSize = match[4], lineHeight = match[5], fontFamily = match[6];
          if (fontStyle) {
            oStyle.fontStyle = fontStyle;
          }
          if (fontWeight) {
            oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);
          }
          if (fontSize) {
            oStyle.fontSize = parseUnit(fontSize);
          }
          if (fontFamily) {
            oStyle.fontFamily = fontFamily;
          }
          if (lineHeight) {
            oStyle.lineHeight = lineHeight === "normal" ? 1 : lineHeight;
          }
        },
        /**
         * Parses an SVG document, returning all of the gradient declarations found in it
         * @static
         * @function
         * @memberOf fabric
         * @param {SVGDocument} doc SVG document to parse
         * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
         */
        getGradientDefs: function(doc) {
          var tagArray = [
            "linearGradient",
            "radialGradient",
            "svg:linearGradient",
            "svg:radialGradient"
          ], elList = _getMultipleNodes(doc, tagArray), el, j2 = 0, gradientDefs = {};
          j2 = elList.length;
          while (j2--) {
            el = elList[j2];
            if (el.getAttribute("xlink:href")) {
              recursivelyParseGradientsXlink(doc, el);
            }
            gradientDefs[el.getAttribute("id")] = el;
          }
          return gradientDefs;
        },
        /**
         * Returns an object of attributes' name/value, given element and an array of attribute names;
         * Parses parent "g" nodes recursively upwards.
         * @static
         * @memberOf fabric
         * @param {DOMElement} element Element to parse
         * @param {Array} attributes Array of attributes to parse
         * @return {Object} object containing parsed attributes' names/values
         */
        parseAttributes: function(element, attributes, svgUid) {
          if (!element) {
            return;
          }
          var value, parentAttributes = {}, fontSize, parentFontSize;
          if (typeof svgUid === "undefined") {
            svgUid = element.getAttribute("svgUid");
          }
          if (element.parentNode && fabric2.svgValidParentsRegEx.test(element.parentNode.nodeName)) {
            parentAttributes = fabric2.parseAttributes(element.parentNode, attributes, svgUid);
          }
          var ownAttributes = attributes.reduce(function(memo, attr2) {
            value = element.getAttribute(attr2);
            if (value) {
              memo[attr2] = value;
            }
            return memo;
          }, {});
          var cssAttrs = extend(
            getGlobalStylesForElement(element, svgUid),
            fabric2.parseStyleAttribute(element)
          );
          ownAttributes = extend(
            ownAttributes,
            cssAttrs
          );
          if (cssAttrs[cPath]) {
            element.setAttribute(cPath, cssAttrs[cPath]);
          }
          fontSize = parentFontSize = parentAttributes.fontSize || fabric2.Text.DEFAULT_SVG_FONT_SIZE;
          if (ownAttributes[fSize]) {
            ownAttributes[fSize] = fontSize = parseUnit(ownAttributes[fSize], parentFontSize);
          }
          var normalizedAttr, normalizedValue, normalizedStyle = {};
          for (var attr in ownAttributes) {
            normalizedAttr = normalizeAttr(attr);
            normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);
            normalizedStyle[normalizedAttr] = normalizedValue;
          }
          if (normalizedStyle && normalizedStyle.font) {
            fabric2.parseFontDeclaration(normalizedStyle.font, normalizedStyle);
          }
          var mergedAttrs = extend(parentAttributes, normalizedStyle);
          return fabric2.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);
        },
        /**
         * Transforms an array of svg elements to corresponding fabric.* instances
         * @static
         * @memberOf fabric
         * @param {Array} elements Array of elements to parse
         * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
         * @param {Object} [options] Options object
         * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
         */
        parseElements: function(elements, callback, options, reviver, parsingOptions) {
          new fabric2.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();
        },
        /**
         * Parses "style" attribute, retuning an object with values
         * @static
         * @memberOf fabric
         * @param {SVGElement} element Element to parse
         * @return {Object} Objects with values parsed from style attribute of an element
         */
        parseStyleAttribute: function(element) {
          var oStyle = {}, style = element.getAttribute("style");
          if (!style) {
            return oStyle;
          }
          if (typeof style === "string") {
            parseStyleString(style, oStyle);
          } else {
            parseStyleObject(style, oStyle);
          }
          return oStyle;
        },
        /**
         * Parses "points" attribute, returning an array of values
         * @static
         * @memberOf fabric
         * @param {String} points points attribute string
         * @return {Array} array of points
         */
        parsePointsAttribute: function(points) {
          if (!points) {
            return null;
          }
          points = points.replace(/,/g, " ").trim();
          points = points.split(/\s+/);
          var parsedPoints = [], i2, len;
          for (i2 = 0, len = points.length; i2 < len; i2 += 2) {
            parsedPoints.push({
              x: parseFloat(points[i2]),
              y: parseFloat(points[i2 + 1])
            });
          }
          return parsedPoints;
        },
        /**
         * Returns CSS rules for a given SVG document
         * @static
         * @function
         * @memberOf fabric
         * @param {SVGDocument} doc SVG document to parse
         * @return {Object} CSS rules of this document
         */
        getCSSRules: function(doc) {
          var styles = doc.getElementsByTagName("style"), i2, len, allRules = {}, rules;
          for (i2 = 0, len = styles.length; i2 < len; i2++) {
            var styleContents = styles[i2].textContent;
            styleContents = styleContents.replace(/\/\*[\s\S]*?\*\//g, "");
            if (styleContents.trim() === "") {
              continue;
            }
            rules = styleContents.match(/[^{]*\{[\s\S]*?\}/g);
            rules = rules.map(function(rule) {
              return rule.trim();
            });
            rules.forEach(function(rule) {
              var match = rule.match(/([\s\S]*?)\s*\{([^}]*)\}/), ruleObj = {}, declaration = match[2].trim(), propertyValuePairs = declaration.replace(/;$/, "").split(/\s*;\s*/);
              for (i2 = 0, len = propertyValuePairs.length; i2 < len; i2++) {
                var pair = propertyValuePairs[i2].split(/\s*:\s*/), property = pair[0], value = pair[1];
                ruleObj[property] = value;
              }
              rule = match[1];
              rule.split(",").forEach(function(_rule) {
                _rule = _rule.replace(/^svg/i, "").trim();
                if (_rule === "") {
                  return;
                }
                if (allRules[_rule]) {
                  fabric2.util.object.extend(allRules[_rule], ruleObj);
                } else {
                  allRules[_rule] = fabric2.util.object.clone(ruleObj);
                }
              });
            });
          }
          return allRules;
        },
        /**
         * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.
         * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)
         * @memberOf fabric
         * @param {String} url
         * @param {Function} callback
         * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
         * @param {Object} [options] Object containing options for parsing
         * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
         */
        loadSVGFromURL: function(url, callback, reviver, options) {
          url = url.replace(/^\n\s*/, "").trim();
          new fabric2.util.request(url, {
            method: "get",
            onComplete
          });
          function onComplete(r2) {
            var xml = r2.responseXML;
            if (!xml || !xml.documentElement) {
              callback && callback(null);
              return false;
            }
            fabric2.parseSVGDocument(xml.documentElement, function(results, _options, elements, allElements) {
              callback && callback(results, _options, elements, allElements);
            }, reviver, options);
          }
        },
        /**
         * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
         * @memberOf fabric
         * @param {String} string
         * @param {Function} callback
         * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
         * @param {Object} [options] Object containing options for parsing
         * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
         */
        loadSVGFromString: function(string, callback, reviver, options) {
          var parser = new fabric2.window.DOMParser(), doc = parser.parseFromString(string.trim(), "text/xml");
          fabric2.parseSVGDocument(doc.documentElement, function(results, _options, elements, allElements) {
            callback(results, _options, elements, allElements);
          }, reviver, options);
        }
      });
    })(typeof exports !== "undefined" ? exports : exports);
    fabric.ElementsParser = function(elements, callback, options, reviver, parsingOptions, doc) {
      this.elements = elements;
      this.callback = callback;
      this.options = options;
      this.reviver = reviver;
      this.svgUid = options && options.svgUid || 0;
      this.parsingOptions = parsingOptions;
      this.regexUrl = /^url\(['"]?#([^'"]+)['"]?\)/g;
      this.doc = doc;
    };
    (function(proto) {
      proto.parse = function() {
        this.instances = new Array(this.elements.length);
        this.numElements = this.elements.length;
        this.createObjects();
      };
      proto.createObjects = function() {
        var _this = this;
        this.elements.forEach(function(element, i2) {
          element.setAttribute("svgUid", _this.svgUid);
          _this.createObject(element, i2);
        });
      };
      proto.findTag = function(el) {
        return fabric[fabric.util.string.capitalize(el.tagName.replace("svg:", ""))];
      };
      proto.createObject = function(el, index) {
        var klass = this.findTag(el);
        if (klass && klass.fromElement) {
          try {
            klass.fromElement(el, this.createCallback(index, el), this.options);
          } catch (err) {
            fabric.log(err);
          }
        } else {
          this.checkIfDone();
        }
      };
      proto.createCallback = function(index, el) {
        var _this = this;
        return function(obj) {
          var _options;
          _this.resolveGradient(obj, el, "fill");
          _this.resolveGradient(obj, el, "stroke");
          if (obj instanceof fabric.Image && obj._originalElement) {
            _options = obj.parsePreserveAspectRatioAttribute(el);
          }
          obj._removeTransformMatrix(_options);
          _this.resolveClipPath(obj, el);
          _this.reviver && _this.reviver(el, obj);
          _this.instances[index] = obj;
          _this.checkIfDone();
        };
      };
      proto.extractPropertyDefinition = function(obj, property, storage) {
        var value = obj[property], regex = this.regexUrl;
        if (!regex.test(value)) {
          return;
        }
        regex.lastIndex = 0;
        var id = regex.exec(value)[1];
        regex.lastIndex = 0;
        return fabric[storage][this.svgUid][id];
      };
      proto.resolveGradient = function(obj, el, property) {
        var gradientDef = this.extractPropertyDefinition(obj, property, "gradientDefs");
        if (gradientDef) {
          var opacityAttr = el.getAttribute(property + "-opacity");
          var gradient = fabric.Gradient.fromElement(gradientDef, obj, opacityAttr, this.options);
          obj.set(property, gradient);
        }
      };
      proto.createClipPathCallback = function(obj, container) {
        return function(_newObj) {
          _newObj._removeTransformMatrix();
          _newObj.fillRule = _newObj.clipRule;
          container.push(_newObj);
        };
      };
      proto.resolveClipPath = function(obj, usingElement) {
        var clipPath = this.extractPropertyDefinition(obj, "clipPath", "clipPaths"), element, klass, objTransformInv, container, gTransform, options;
        if (clipPath) {
          container = [];
          objTransformInv = fabric.util.invertTransform(obj.calcTransformMatrix());
          var clipPathTag = clipPath[0].parentNode;
          var clipPathOwner = usingElement;
          while (clipPathOwner.parentNode && clipPathOwner.getAttribute("clip-path") !== obj.clipPath) {
            clipPathOwner = clipPathOwner.parentNode;
          }
          clipPathOwner.parentNode.appendChild(clipPathTag);
          for (var i2 = 0; i2 < clipPath.length; i2++) {
            element = clipPath[i2];
            klass = this.findTag(element);
            klass.fromElement(
              element,
              this.createClipPathCallback(obj, container),
              this.options
            );
          }
          if (container.length === 1) {
            clipPath = container[0];
          } else {
            clipPath = new fabric.Group(container);
          }
          gTransform = fabric.util.multiplyTransformMatrices(
            objTransformInv,
            clipPath.calcTransformMatrix()
          );
          if (clipPath.clipPath) {
            this.resolveClipPath(clipPath, clipPathOwner);
          }
          var options = fabric.util.qrDecompose(gTransform);
          clipPath.flipX = false;
          clipPath.flipY = false;
          clipPath.set("scaleX", options.scaleX);
          clipPath.set("scaleY", options.scaleY);
          clipPath.angle = options.angle;
          clipPath.skewX = options.skewX;
          clipPath.skewY = 0;
          clipPath.setPositionByOrigin({ x: options.translateX, y: options.translateY }, "center", "center");
          obj.clipPath = clipPath;
        } else {
          delete obj.clipPath;
        }
      };
      proto.checkIfDone = function() {
        if (--this.numElements === 0) {
          this.instances = this.instances.filter(function(el) {
            return el != null;
          });
          this.callback(this.instances, this.elements);
        }
      };
    })(fabric.ElementsParser.prototype);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      if (fabric2.Point) {
        fabric2.warn("fabric.Point is already defined");
        return;
      }
      fabric2.Point = Point;
      function Point(x, y2) {
        this.x = x;
        this.y = y2;
      }
      Point.prototype = /** @lends fabric.Point.prototype */
      {
        type: "point",
        constructor: Point,
        /**
         * Adds another point to this one and returns another one
         * @param {fabric.Point} that
         * @return {fabric.Point} new Point instance with added values
         */
        add: function(that) {
          return new Point(this.x + that.x, this.y + that.y);
        },
        /**
         * Adds another point to this one
         * @param {fabric.Point} that
         * @return {fabric.Point} thisArg
         * @chainable
         */
        addEquals: function(that) {
          this.x += that.x;
          this.y += that.y;
          return this;
        },
        /**
         * Adds value to this point and returns a new one
         * @param {Number} scalar
         * @return {fabric.Point} new Point with added value
         */
        scalarAdd: function(scalar) {
          return new Point(this.x + scalar, this.y + scalar);
        },
        /**
         * Adds value to this point
         * @param {Number} scalar
         * @return {fabric.Point} thisArg
         * @chainable
         */
        scalarAddEquals: function(scalar) {
          this.x += scalar;
          this.y += scalar;
          return this;
        },
        /**
         * Subtracts another point from this point and returns a new one
         * @param {fabric.Point} that
         * @return {fabric.Point} new Point object with subtracted values
         */
        subtract: function(that) {
          return new Point(this.x - that.x, this.y - that.y);
        },
        /**
         * Subtracts another point from this point
         * @param {fabric.Point} that
         * @return {fabric.Point} thisArg
         * @chainable
         */
        subtractEquals: function(that) {
          this.x -= that.x;
          this.y -= that.y;
          return this;
        },
        /**
         * Subtracts value from this point and returns a new one
         * @param {Number} scalar
         * @return {fabric.Point}
         */
        scalarSubtract: function(scalar) {
          return new Point(this.x - scalar, this.y - scalar);
        },
        /**
         * Subtracts value from this point
         * @param {Number} scalar
         * @return {fabric.Point} thisArg
         * @chainable
         */
        scalarSubtractEquals: function(scalar) {
          this.x -= scalar;
          this.y -= scalar;
          return this;
        },
        /**
         * Multiplies this point by a value and returns a new one
         * TODO: rename in scalarMultiply in 2.0
         * @param {Number} scalar
         * @return {fabric.Point}
         */
        multiply: function(scalar) {
          return new Point(this.x * scalar, this.y * scalar);
        },
        /**
         * Multiplies this point by a value
         * TODO: rename in scalarMultiplyEquals in 2.0
         * @param {Number} scalar
         * @return {fabric.Point} thisArg
         * @chainable
         */
        multiplyEquals: function(scalar) {
          this.x *= scalar;
          this.y *= scalar;
          return this;
        },
        /**
         * Divides this point by a value and returns a new one
         * TODO: rename in scalarDivide in 2.0
         * @param {Number} scalar
         * @return {fabric.Point}
         */
        divide: function(scalar) {
          return new Point(this.x / scalar, this.y / scalar);
        },
        /**
         * Divides this point by a value
         * TODO: rename in scalarDivideEquals in 2.0
         * @param {Number} scalar
         * @return {fabric.Point} thisArg
         * @chainable
         */
        divideEquals: function(scalar) {
          this.x /= scalar;
          this.y /= scalar;
          return this;
        },
        /**
         * Returns true if this point is equal to another one
         * @param {fabric.Point} that
         * @return {Boolean}
         */
        eq: function(that) {
          return this.x === that.x && this.y === that.y;
        },
        /**
         * Returns true if this point is less than another one
         * @param {fabric.Point} that
         * @return {Boolean}
         */
        lt: function(that) {
          return this.x < that.x && this.y < that.y;
        },
        /**
         * Returns true if this point is less than or equal to another one
         * @param {fabric.Point} that
         * @return {Boolean}
         */
        lte: function(that) {
          return this.x <= that.x && this.y <= that.y;
        },
        /**
        
             * Returns true if this point is greater another one
             * @param {fabric.Point} that
             * @return {Boolean}
             */
        gt: function(that) {
          return this.x > that.x && this.y > that.y;
        },
        /**
         * Returns true if this point is greater than or equal to another one
         * @param {fabric.Point} that
         * @return {Boolean}
         */
        gte: function(that) {
          return this.x >= that.x && this.y >= that.y;
        },
        /**
         * Returns new point which is the result of linear interpolation with this one and another one
         * @param {fabric.Point} that
         * @param {Number} t , position of interpolation, between 0 and 1 default 0.5
         * @return {fabric.Point}
         */
        lerp: function(that, t2) {
          if (typeof t2 === "undefined") {
            t2 = 0.5;
          }
          t2 = Math.max(Math.min(1, t2), 0);
          return new Point(this.x + (that.x - this.x) * t2, this.y + (that.y - this.y) * t2);
        },
        /**
         * Returns distance from this point and another one
         * @param {fabric.Point} that
         * @return {Number}
         */
        distanceFrom: function(that) {
          var dx = this.x - that.x, dy = this.y - that.y;
          return Math.sqrt(dx * dx + dy * dy);
        },
        /**
         * Returns the point between this point and another one
         * @param {fabric.Point} that
         * @return {fabric.Point}
         */
        midPointFrom: function(that) {
          return this.lerp(that);
        },
        /**
         * Returns a new point which is the min of this and another one
         * @param {fabric.Point} that
         * @return {fabric.Point}
         */
        min: function(that) {
          return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));
        },
        /**
         * Returns a new point which is the max of this and another one
         * @param {fabric.Point} that
         * @return {fabric.Point}
         */
        max: function(that) {
          return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));
        },
        /**
         * Returns string representation of this point
         * @return {String}
         */
        toString: function() {
          return this.x + "," + this.y;
        },
        /**
         * Sets x/y of this point
         * @param {Number} x
         * @param {Number} y
         * @chainable
         */
        setXY: function(x, y2) {
          this.x = x;
          this.y = y2;
          return this;
        },
        /**
         * Sets x of this point
         * @param {Number} x
         * @chainable
         */
        setX: function(x) {
          this.x = x;
          return this;
        },
        /**
         * Sets y of this point
         * @param {Number} y
         * @chainable
         */
        setY: function(y2) {
          this.y = y2;
          return this;
        },
        /**
         * Sets x/y of this point from another point
         * @param {fabric.Point} that
         * @chainable
         */
        setFromPoint: function(that) {
          this.x = that.x;
          this.y = that.y;
          return this;
        },
        /**
         * Swaps x/y of this point and another point
         * @param {fabric.Point} that
         */
        swap: function(that) {
          var x = this.x, y2 = this.y;
          this.x = that.x;
          this.y = that.y;
          that.x = x;
          that.y = y2;
        },
        /**
         * return a cloned instance of the point
         * @return {fabric.Point}
         */
        clone: function() {
          return new Point(this.x, this.y);
        }
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      if (fabric2.Intersection) {
        fabric2.warn("fabric.Intersection is already defined");
        return;
      }
      function Intersection(status) {
        this.status = status;
        this.points = [];
      }
      fabric2.Intersection = Intersection;
      fabric2.Intersection.prototype = /** @lends fabric.Intersection.prototype */
      {
        constructor: Intersection,
        /**
         * Appends a point to intersection
         * @param {fabric.Point} point
         * @return {fabric.Intersection} thisArg
         * @chainable
         */
        appendPoint: function(point) {
          this.points.push(point);
          return this;
        },
        /**
         * Appends points to intersection
         * @param {Array} points
         * @return {fabric.Intersection} thisArg
         * @chainable
         */
        appendPoints: function(points) {
          this.points = this.points.concat(points);
          return this;
        }
      };
      fabric2.Intersection.intersectLineLine = function(a1, a2, b1, b2) {
        var result, uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x), ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x), uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
        if (uB !== 0) {
          var ua = uaT / uB, ub = ubT / uB;
          if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
            result = new Intersection("Intersection");
            result.appendPoint(new fabric2.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));
          } else {
            result = new Intersection();
          }
        } else {
          if (uaT === 0 || ubT === 0) {
            result = new Intersection("Coincident");
          } else {
            result = new Intersection("Parallel");
          }
        }
        return result;
      };
      fabric2.Intersection.intersectLinePolygon = function(a1, a2, points) {
        var result = new Intersection(), length = points.length, b1, b2, inter, i2;
        for (i2 = 0; i2 < length; i2++) {
          b1 = points[i2];
          b2 = points[(i2 + 1) % length];
          inter = Intersection.intersectLineLine(a1, a2, b1, b2);
          result.appendPoints(inter.points);
        }
        if (result.points.length > 0) {
          result.status = "Intersection";
        }
        return result;
      };
      fabric2.Intersection.intersectPolygonPolygon = function(points1, points2) {
        var result = new Intersection(), length = points1.length, i2;
        for (i2 = 0; i2 < length; i2++) {
          var a1 = points1[i2], a2 = points1[(i2 + 1) % length], inter = Intersection.intersectLinePolygon(a1, a2, points2);
          result.appendPoints(inter.points);
        }
        if (result.points.length > 0) {
          result.status = "Intersection";
        }
        return result;
      };
      fabric2.Intersection.intersectPolygonRectangle = function(points, r1, r2) {
        var min = r1.min(r2), max = r1.max(r2), topRight = new fabric2.Point(max.x, min.y), bottomLeft = new fabric2.Point(min.x, max.y), inter1 = Intersection.intersectLinePolygon(min, topRight, points), inter2 = Intersection.intersectLinePolygon(topRight, max, points), inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points), inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points), result = new Intersection();
        result.appendPoints(inter1.points);
        result.appendPoints(inter2.points);
        result.appendPoints(inter3.points);
        result.appendPoints(inter4.points);
        if (result.points.length > 0) {
          result.status = "Intersection";
        }
        return result;
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      if (fabric2.Color) {
        fabric2.warn("fabric.Color is already defined.");
        return;
      }
      function Color(color) {
        if (!color) {
          this.setSource([0, 0, 0, 1]);
        } else {
          this._tryParsingColor(color);
        }
      }
      fabric2.Color = Color;
      fabric2.Color.prototype = /** @lends fabric.Color.prototype */
      {
        /**
         * @private
         * @param {String|Array} color Color value to parse
         */
        _tryParsingColor: function(color) {
          var source;
          if (color in Color.colorNameMap) {
            color = Color.colorNameMap[color];
          }
          if (color === "transparent") {
            source = [255, 255, 255, 0];
          }
          if (!source) {
            source = Color.sourceFromHex(color);
          }
          if (!source) {
            source = Color.sourceFromRgb(color);
          }
          if (!source) {
            source = Color.sourceFromHsl(color);
          }
          if (!source) {
            source = [0, 0, 0, 1];
          }
          if (source) {
            this.setSource(source);
          }
        },
        /**
         * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
         * @private
         * @param {Number} r Red color value
         * @param {Number} g Green color value
         * @param {Number} b Blue color value
         * @return {Array} Hsl color
         */
        _rgbToHsl: function(r2, g2, b2) {
          r2 /= 255;
          g2 /= 255;
          b2 /= 255;
          var h2, s2, l2, max = fabric2.util.array.max([r2, g2, b2]), min = fabric2.util.array.min([r2, g2, b2]);
          l2 = (max + min) / 2;
          if (max === min) {
            h2 = s2 = 0;
          } else {
            var d2 = max - min;
            s2 = l2 > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
            switch (max) {
              case r2:
                h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
                break;
              case g2:
                h2 = (b2 - r2) / d2 + 2;
                break;
              case b2:
                h2 = (r2 - g2) / d2 + 4;
                break;
            }
            h2 /= 6;
          }
          return [
            Math.round(h2 * 360),
            Math.round(s2 * 100),
            Math.round(l2 * 100)
          ];
        },
        /**
         * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
         * @return {Array}
         */
        getSource: function() {
          return this._source;
        },
        /**
         * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
         * @param {Array} source
         */
        setSource: function(source) {
          this._source = source;
        },
        /**
         * Returns color representation in RGB format
         * @return {String} ex: rgb(0-255,0-255,0-255)
         */
        toRgb: function() {
          var source = this.getSource();
          return "rgb(" + source[0] + "," + source[1] + "," + source[2] + ")";
        },
        /**
         * Returns color representation in RGBA format
         * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
         */
        toRgba: function() {
          var source = this.getSource();
          return "rgba(" + source[0] + "," + source[1] + "," + source[2] + "," + source[3] + ")";
        },
        /**
         * Returns color representation in HSL format
         * @return {String} ex: hsl(0-360,0%-100%,0%-100%)
         */
        toHsl: function() {
          var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);
          return "hsl(" + hsl[0] + "," + hsl[1] + "%," + hsl[2] + "%)";
        },
        /**
         * Returns color representation in HSLA format
         * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)
         */
        toHsla: function() {
          var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);
          return "hsla(" + hsl[0] + "," + hsl[1] + "%," + hsl[2] + "%," + source[3] + ")";
        },
        /**
         * Returns color representation in HEX format
         * @return {String} ex: FF5555
         */
        toHex: function() {
          var source = this.getSource(), r2, g2, b2;
          r2 = source[0].toString(16);
          r2 = r2.length === 1 ? "0" + r2 : r2;
          g2 = source[1].toString(16);
          g2 = g2.length === 1 ? "0" + g2 : g2;
          b2 = source[2].toString(16);
          b2 = b2.length === 1 ? "0" + b2 : b2;
          return r2.toUpperCase() + g2.toUpperCase() + b2.toUpperCase();
        },
        /**
         * Returns color representation in HEXA format
         * @return {String} ex: FF5555CC
         */
        toHexa: function() {
          var source = this.getSource(), a2;
          a2 = Math.round(source[3] * 255);
          a2 = a2.toString(16);
          a2 = a2.length === 1 ? "0" + a2 : a2;
          return this.toHex() + a2.toUpperCase();
        },
        /**
         * Gets value of alpha channel for this color
         * @return {Number} 0-1
         */
        getAlpha: function() {
          return this.getSource()[3];
        },
        /**
         * Sets value of alpha channel for this color
         * @param {Number} alpha Alpha value 0-1
         * @return {fabric.Color} thisArg
         */
        setAlpha: function(alpha) {
          var source = this.getSource();
          source[3] = alpha;
          this.setSource(source);
          return this;
        },
        /**
         * Transforms color to its grayscale representation
         * @return {fabric.Color} thisArg
         */
        toGrayscale: function() {
          var source = this.getSource(), average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10), currentAlpha = source[3];
          this.setSource([average, average, average, currentAlpha]);
          return this;
        },
        /**
         * Transforms color to its black and white representation
         * @param {Number} threshold
         * @return {fabric.Color} thisArg
         */
        toBlackWhite: function(threshold) {
          var source = this.getSource(), average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), currentAlpha = source[3];
          threshold = threshold || 127;
          average = Number(average) < Number(threshold) ? 0 : 255;
          this.setSource([average, average, average, currentAlpha]);
          return this;
        },
        /**
         * Overlays color with another color
         * @param {String|fabric.Color} otherColor
         * @return {fabric.Color} thisArg
         */
        overlayWith: function(otherColor) {
          if (!(otherColor instanceof Color)) {
            otherColor = new Color(otherColor);
          }
          var result = [], alpha = this.getAlpha(), otherAlpha = 0.5, source = this.getSource(), otherSource = otherColor.getSource(), i2;
          for (i2 = 0; i2 < 3; i2++) {
            result.push(Math.round(source[i2] * (1 - otherAlpha) + otherSource[i2] * otherAlpha));
          }
          result[3] = alpha;
          this.setSource(result);
          return this;
        }
      };
      fabric2.Color.reRGBa = /^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i;
      fabric2.Color.reHSLa = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i;
      fabric2.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;
      fabric2.Color.colorNameMap = {
        aliceblue: "#F0F8FF",
        antiquewhite: "#FAEBD7",
        aqua: "#00FFFF",
        aquamarine: "#7FFFD4",
        azure: "#F0FFFF",
        beige: "#F5F5DC",
        bisque: "#FFE4C4",
        black: "#000000",
        blanchedalmond: "#FFEBCD",
        blue: "#0000FF",
        blueviolet: "#8A2BE2",
        brown: "#A52A2A",
        burlywood: "#DEB887",
        cadetblue: "#5F9EA0",
        chartreuse: "#7FFF00",
        chocolate: "#D2691E",
        coral: "#FF7F50",
        cornflowerblue: "#6495ED",
        cornsilk: "#FFF8DC",
        crimson: "#DC143C",
        cyan: "#00FFFF",
        darkblue: "#00008B",
        darkcyan: "#008B8B",
        darkgoldenrod: "#B8860B",
        darkgray: "#A9A9A9",
        darkgrey: "#A9A9A9",
        darkgreen: "#006400",
        darkkhaki: "#BDB76B",
        darkmagenta: "#8B008B",
        darkolivegreen: "#556B2F",
        darkorange: "#FF8C00",
        darkorchid: "#9932CC",
        darkred: "#8B0000",
        darksalmon: "#E9967A",
        darkseagreen: "#8FBC8F",
        darkslateblue: "#483D8B",
        darkslategray: "#2F4F4F",
        darkslategrey: "#2F4F4F",
        darkturquoise: "#00CED1",
        darkviolet: "#9400D3",
        deeppink: "#FF1493",
        deepskyblue: "#00BFFF",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1E90FF",
        firebrick: "#B22222",
        floralwhite: "#FFFAF0",
        forestgreen: "#228B22",
        fuchsia: "#FF00FF",
        gainsboro: "#DCDCDC",
        ghostwhite: "#F8F8FF",
        gold: "#FFD700",
        goldenrod: "#DAA520",
        gray: "#808080",
        grey: "#808080",
        green: "#008000",
        greenyellow: "#ADFF2F",
        honeydew: "#F0FFF0",
        hotpink: "#FF69B4",
        indianred: "#CD5C5C",
        indigo: "#4B0082",
        ivory: "#FFFFF0",
        khaki: "#F0E68C",
        lavender: "#E6E6FA",
        lavenderblush: "#FFF0F5",
        lawngreen: "#7CFC00",
        lemonchiffon: "#FFFACD",
        lightblue: "#ADD8E6",
        lightcoral: "#F08080",
        lightcyan: "#E0FFFF",
        lightgoldenrodyellow: "#FAFAD2",
        lightgray: "#D3D3D3",
        lightgrey: "#D3D3D3",
        lightgreen: "#90EE90",
        lightpink: "#FFB6C1",
        lightsalmon: "#FFA07A",
        lightseagreen: "#20B2AA",
        lightskyblue: "#87CEFA",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#B0C4DE",
        lightyellow: "#FFFFE0",
        lime: "#00FF00",
        limegreen: "#32CD32",
        linen: "#FAF0E6",
        magenta: "#FF00FF",
        maroon: "#800000",
        mediumaquamarine: "#66CDAA",
        mediumblue: "#0000CD",
        mediumorchid: "#BA55D3",
        mediumpurple: "#9370DB",
        mediumseagreen: "#3CB371",
        mediumslateblue: "#7B68EE",
        mediumspringgreen: "#00FA9A",
        mediumturquoise: "#48D1CC",
        mediumvioletred: "#C71585",
        midnightblue: "#191970",
        mintcream: "#F5FFFA",
        mistyrose: "#FFE4E1",
        moccasin: "#FFE4B5",
        navajowhite: "#FFDEAD",
        navy: "#000080",
        oldlace: "#FDF5E6",
        olive: "#808000",
        olivedrab: "#6B8E23",
        orange: "#FFA500",
        orangered: "#FF4500",
        orchid: "#DA70D6",
        palegoldenrod: "#EEE8AA",
        palegreen: "#98FB98",
        paleturquoise: "#AFEEEE",
        palevioletred: "#DB7093",
        papayawhip: "#FFEFD5",
        peachpuff: "#FFDAB9",
        peru: "#CD853F",
        pink: "#FFC0CB",
        plum: "#DDA0DD",
        powderblue: "#B0E0E6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#FF0000",
        rosybrown: "#BC8F8F",
        royalblue: "#4169E1",
        saddlebrown: "#8B4513",
        salmon: "#FA8072",
        sandybrown: "#F4A460",
        seagreen: "#2E8B57",
        seashell: "#FFF5EE",
        sienna: "#A0522D",
        silver: "#C0C0C0",
        skyblue: "#87CEEB",
        slateblue: "#6A5ACD",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#FFFAFA",
        springgreen: "#00FF7F",
        steelblue: "#4682B4",
        tan: "#D2B48C",
        teal: "#008080",
        thistle: "#D8BFD8",
        tomato: "#FF6347",
        turquoise: "#40E0D0",
        violet: "#EE82EE",
        wheat: "#F5DEB3",
        white: "#FFFFFF",
        whitesmoke: "#F5F5F5",
        yellow: "#FFFF00",
        yellowgreen: "#9ACD32"
      };
      function hue2rgb(p2, q, t2) {
        if (t2 < 0) {
          t2 += 1;
        }
        if (t2 > 1) {
          t2 -= 1;
        }
        if (t2 < 1 / 6) {
          return p2 + (q - p2) * 6 * t2;
        }
        if (t2 < 1 / 2) {
          return q;
        }
        if (t2 < 2 / 3) {
          return p2 + (q - p2) * (2 / 3 - t2) * 6;
        }
        return p2;
      }
      fabric2.Color.fromRgb = function(color) {
        return Color.fromSource(Color.sourceFromRgb(color));
      };
      fabric2.Color.sourceFromRgb = function(color) {
        var match = color.match(Color.reRGBa);
        if (match) {
          var r2 = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1), g2 = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1), b2 = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);
          return [
            parseInt(r2, 10),
            parseInt(g2, 10),
            parseInt(b2, 10),
            match[4] ? parseFloat(match[4]) : 1
          ];
        }
      };
      fabric2.Color.fromRgba = Color.fromRgb;
      fabric2.Color.fromHsl = function(color) {
        return Color.fromSource(Color.sourceFromHsl(color));
      };
      fabric2.Color.sourceFromHsl = function(color) {
        var match = color.match(Color.reHSLa);
        if (!match) {
          return;
        }
        var h2 = (parseFloat(match[1]) % 360 + 360) % 360 / 360, s2 = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1), l2 = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1), r2, g2, b2;
        if (s2 === 0) {
          r2 = g2 = b2 = l2;
        } else {
          var q = l2 <= 0.5 ? l2 * (s2 + 1) : l2 + s2 - l2 * s2, p2 = l2 * 2 - q;
          r2 = hue2rgb(p2, q, h2 + 1 / 3);
          g2 = hue2rgb(p2, q, h2);
          b2 = hue2rgb(p2, q, h2 - 1 / 3);
        }
        return [
          Math.round(r2 * 255),
          Math.round(g2 * 255),
          Math.round(b2 * 255),
          match[4] ? parseFloat(match[4]) : 1
        ];
      };
      fabric2.Color.fromHsla = Color.fromHsl;
      fabric2.Color.fromHex = function(color) {
        return Color.fromSource(Color.sourceFromHex(color));
      };
      fabric2.Color.sourceFromHex = function(color) {
        if (color.match(Color.reHex)) {
          var value = color.slice(color.indexOf("#") + 1), isShortNotation = value.length === 3 || value.length === 4, isRGBa = value.length === 8 || value.length === 4, r2 = isShortNotation ? value.charAt(0) + value.charAt(0) : value.substring(0, 2), g2 = isShortNotation ? value.charAt(1) + value.charAt(1) : value.substring(2, 4), b2 = isShortNotation ? value.charAt(2) + value.charAt(2) : value.substring(4, 6), a2 = isRGBa ? isShortNotation ? value.charAt(3) + value.charAt(3) : value.substring(6, 8) : "FF";
          return [
            parseInt(r2, 16),
            parseInt(g2, 16),
            parseInt(b2, 16),
            parseFloat((parseInt(a2, 16) / 255).toFixed(2))
          ];
        }
      };
      fabric2.Color.fromSource = function(source) {
        var oColor = new Color();
        oColor.setSource(source);
        return oColor;
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), scaleMap = ["e", "se", "s", "sw", "w", "nw", "n", "ne", "e"], skewMap = ["ns", "nesw", "ew", "nwse"], controls = {}, LEFT = "left", TOP = "top", RIGHT = "right", BOTTOM = "bottom", CENTER = "center", opposite = {
        top: BOTTOM,
        bottom: TOP,
        left: RIGHT,
        right: LEFT,
        center: CENTER
      }, radiansToDegrees = fabric2.util.radiansToDegrees, sign = Math.sign || function(x) {
        return (x > 0) - (x < 0) || +x;
      };
      function findCornerQuadrant(fabricObject, control) {
        var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;
        return Math.round(cornerAngle % 360 / 45);
      }
      function fireEvent(eventName, options) {
        var target = options.transform.target, canvas = target.canvas, canvasOptions = fabric2.util.object.clone(options);
        canvasOptions.target = target;
        canvas && canvas.fire("object:" + eventName, canvasOptions);
        target.fire(eventName, options);
      }
      function scaleIsProportional(eventData, fabricObject) {
        var canvas = fabricObject.canvas, uniScaleKey = canvas.uniScaleKey, uniformIsToggled = eventData[uniScaleKey];
        return canvas.uniformScaling && !uniformIsToggled || !canvas.uniformScaling && uniformIsToggled;
      }
      function isTransformCentered(transform) {
        return transform.originX === CENTER && transform.originY === CENTER;
      }
      function scalingIsForbidden(fabricObject, by, scaleProportionally) {
        var lockX = fabricObject.lockScalingX, lockY = fabricObject.lockScalingY;
        if (lockX && lockY) {
          return true;
        }
        if (!by && (lockX || lockY) && scaleProportionally) {
          return true;
        }
        if (lockX && by === "x") {
          return true;
        }
        if (lockY && by === "y") {
          return true;
        }
        return false;
      }
      function scaleCursorStyleHandler(eventData, control, fabricObject) {
        var notAllowed = "not-allowed", scaleProportionally = scaleIsProportional(eventData, fabricObject), by = "";
        if (control.x !== 0 && control.y === 0) {
          by = "x";
        } else if (control.x === 0 && control.y !== 0) {
          by = "y";
        }
        if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {
          return notAllowed;
        }
        var n2 = findCornerQuadrant(fabricObject, control);
        return scaleMap[n2] + "-resize";
      }
      function skewCursorStyleHandler(eventData, control, fabricObject) {
        var notAllowed = "not-allowed";
        if (control.x !== 0 && fabricObject.lockSkewingY) {
          return notAllowed;
        }
        if (control.y !== 0 && fabricObject.lockSkewingX) {
          return notAllowed;
        }
        var n2 = findCornerQuadrant(fabricObject, control) % 4;
        return skewMap[n2] + "-resize";
      }
      function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {
        if (eventData[fabricObject.canvas.altActionKey]) {
          return controls.skewCursorStyleHandler(eventData, control, fabricObject);
        }
        return controls.scaleCursorStyleHandler(eventData, control, fabricObject);
      }
      function scaleOrSkewActionName(eventData, control, fabricObject) {
        var isAlternative = eventData[fabricObject.canvas.altActionKey];
        if (control.x === 0) {
          return isAlternative ? "skewX" : "scaleY";
        }
        if (control.y === 0) {
          return isAlternative ? "skewY" : "scaleX";
        }
      }
      function rotationStyleHandler(eventData, control, fabricObject) {
        if (fabricObject.lockRotation) {
          return "not-allowed";
        }
        return control.cursorStyle;
      }
      function commonEventInfo(eventData, transform, x, y2) {
        return {
          e: eventData,
          transform,
          pointer: {
            x,
            y: y2
          }
        };
      }
      function wrapWithFixedAnchor(actionHandler) {
        return function(eventData, transform, x, y2) {
          var target = transform.target, centerPoint = target.getCenterPoint(), constraint = target.translateToOriginPoint(centerPoint, transform.originX, transform.originY), actionPerformed = actionHandler(eventData, transform, x, y2);
          target.setPositionByOrigin(constraint, transform.originX, transform.originY);
          return actionPerformed;
        };
      }
      function wrapWithFireEvent(eventName, actionHandler) {
        return function(eventData, transform, x, y2) {
          var actionPerformed = actionHandler(eventData, transform, x, y2);
          if (actionPerformed) {
            fireEvent(eventName, commonEventInfo(eventData, transform, x, y2));
          }
          return actionPerformed;
        };
      }
      function getLocalPoint(transform, originX, originY, x, y2) {
        var target = transform.target, control = target.controls[transform.corner], zoom = target.canvas.getZoom(), padding = target.padding / zoom, localPoint = target.toLocalPoint(new fabric2.Point(x, y2), originX, originY);
        if (localPoint.x >= padding) {
          localPoint.x -= padding;
        }
        if (localPoint.x <= -padding) {
          localPoint.x += padding;
        }
        if (localPoint.y >= padding) {
          localPoint.y -= padding;
        }
        if (localPoint.y <= padding) {
          localPoint.y += padding;
        }
        localPoint.x -= control.offsetX;
        localPoint.y -= control.offsetY;
        return localPoint;
      }
      function targetHasOneFlip(target) {
        return target.flipX !== target.flipY;
      }
      function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {
        if (target[oppositeSkew] !== 0) {
          var newDim = target._getTransformedDimensions()[axis];
          var newValue = reference / newDim * target[scaleToCompensate];
          target.set(scaleToCompensate, newValue);
        }
      }
      function skewObjectX(eventData, transform, x, y2) {
        var target = transform.target, dimNoSkew = target._getTransformedDimensions(0, target.skewY), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y2), totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x, currentSkew = target.skewX, newSkew;
        if (totalSkewSize < 2) {
          newSkew = 0;
        } else {
          newSkew = radiansToDegrees(
            Math.atan2(totalSkewSize / target.scaleX, dimNoSkew.y / target.scaleY)
          );
          if (transform.originX === LEFT && transform.originY === BOTTOM) {
            newSkew = -newSkew;
          }
          if (transform.originX === RIGHT && transform.originY === TOP) {
            newSkew = -newSkew;
          }
          if (targetHasOneFlip(target)) {
            newSkew = -newSkew;
          }
        }
        var hasSkewed = currentSkew !== newSkew;
        if (hasSkewed) {
          var dimBeforeSkewing = target._getTransformedDimensions().y;
          target.set("skewX", newSkew);
          compensateScaleForSkew(target, "skewY", "scaleY", "y", dimBeforeSkewing);
        }
        return hasSkewed;
      }
      function skewObjectY(eventData, transform, x, y2) {
        var target = transform.target, dimNoSkew = target._getTransformedDimensions(target.skewX, 0), localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y2), totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y, currentSkew = target.skewY, newSkew;
        if (totalSkewSize < 2) {
          newSkew = 0;
        } else {
          newSkew = radiansToDegrees(
            Math.atan2(totalSkewSize / target.scaleY, dimNoSkew.x / target.scaleX)
          );
          if (transform.originX === LEFT && transform.originY === BOTTOM) {
            newSkew = -newSkew;
          }
          if (transform.originX === RIGHT && transform.originY === TOP) {
            newSkew = -newSkew;
          }
          if (targetHasOneFlip(target)) {
            newSkew = -newSkew;
          }
        }
        var hasSkewed = currentSkew !== newSkew;
        if (hasSkewed) {
          var dimBeforeSkewing = target._getTransformedDimensions().x;
          target.set("skewY", newSkew);
          compensateScaleForSkew(target, "skewX", "scaleX", "x", dimBeforeSkewing);
        }
        return hasSkewed;
      }
      function skewHandlerX(eventData, transform, x, y2) {
        var target = transform.target, currentSkew = target.skewX, originX, originY = transform.originY;
        if (target.lockSkewingX) {
          return false;
        }
        if (currentSkew === 0) {
          var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y2);
          if (localPointFromCenter.x > 0) {
            originX = LEFT;
          } else {
            originX = RIGHT;
          }
        } else {
          if (currentSkew > 0) {
            originX = originY === TOP ? LEFT : RIGHT;
          }
          if (currentSkew < 0) {
            originX = originY === TOP ? RIGHT : LEFT;
          }
          if (targetHasOneFlip(target)) {
            originX = originX === LEFT ? RIGHT : LEFT;
          }
        }
        transform.originX = originX;
        var finalHandler = wrapWithFireEvent("skewing", wrapWithFixedAnchor(skewObjectX));
        return finalHandler(eventData, transform, x, y2);
      }
      function skewHandlerY(eventData, transform, x, y2) {
        var target = transform.target, currentSkew = target.skewY, originY, originX = transform.originX;
        if (target.lockSkewingY) {
          return false;
        }
        if (currentSkew === 0) {
          var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y2);
          if (localPointFromCenter.y > 0) {
            originY = TOP;
          } else {
            originY = BOTTOM;
          }
        } else {
          if (currentSkew > 0) {
            originY = originX === LEFT ? TOP : BOTTOM;
          }
          if (currentSkew < 0) {
            originY = originX === LEFT ? BOTTOM : TOP;
          }
          if (targetHasOneFlip(target)) {
            originY = originY === TOP ? BOTTOM : TOP;
          }
        }
        transform.originY = originY;
        var finalHandler = wrapWithFireEvent("skewing", wrapWithFixedAnchor(skewObjectY));
        return finalHandler(eventData, transform, x, y2);
      }
      function rotationWithSnapping(eventData, transform, x, y2) {
        var t2 = transform, target = t2.target, pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t2.originX, t2.originY);
        if (target.lockRotation) {
          return false;
        }
        var lastAngle = Math.atan2(t2.ey - pivotPoint.y, t2.ex - pivotPoint.x), curAngle = Math.atan2(y2 - pivotPoint.y, x - pivotPoint.x), angle = radiansToDegrees(curAngle - lastAngle + t2.theta), hasRotated = true;
        if (target.snapAngle > 0) {
          var snapAngle = target.snapAngle, snapThreshold = target.snapThreshold || snapAngle, rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle, leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;
          if (Math.abs(angle - leftAngleLocked) < snapThreshold) {
            angle = leftAngleLocked;
          } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {
            angle = rightAngleLocked;
          }
        }
        if (angle < 0) {
          angle = 360 + angle;
        }
        angle %= 360;
        hasRotated = target.angle !== angle;
        target.angle = angle;
        return hasRotated;
      }
      function scaleObject(eventData, transform, x, y2, options) {
        options = options || {};
        var target = transform.target, lockScalingX = target.lockScalingX, lockScalingY = target.lockScalingY, by = options.by, newPoint, scaleX, scaleY, dim, scaleProportionally = scaleIsProportional(eventData, target), forbidScaling = scalingIsForbidden(target, by, scaleProportionally), signX, signY, gestureScale = transform.gestureScale;
        if (forbidScaling) {
          return false;
        }
        if (gestureScale) {
          scaleX = transform.scaleX * gestureScale;
          scaleY = transform.scaleY * gestureScale;
        } else {
          newPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y2);
          signX = by !== "y" ? sign(newPoint.x) : 1;
          signY = by !== "x" ? sign(newPoint.y) : 1;
          if (!transform.signX) {
            transform.signX = signX;
          }
          if (!transform.signY) {
            transform.signY = signY;
          }
          if (target.lockScalingFlip && (transform.signX !== signX || transform.signY !== signY)) {
            return false;
          }
          dim = target._getTransformedDimensions();
          if (scaleProportionally && !by) {
            var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y), original = transform.original, originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) + Math.abs(dim.y * original.scaleY / target.scaleY), scale = distance / originalDistance;
            scaleX = original.scaleX * scale;
            scaleY = original.scaleY * scale;
          } else {
            scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);
            scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);
          }
          if (isTransformCentered(transform)) {
            scaleX *= 2;
            scaleY *= 2;
          }
          if (transform.signX !== signX && by !== "y") {
            transform.originX = opposite[transform.originX];
            scaleX *= -1;
            transform.signX = signX;
          }
          if (transform.signY !== signY && by !== "x") {
            transform.originY = opposite[transform.originY];
            scaleY *= -1;
            transform.signY = signY;
          }
        }
        var oldScaleX = target.scaleX, oldScaleY = target.scaleY;
        if (!by) {
          !lockScalingX && target.set("scaleX", scaleX);
          !lockScalingY && target.set("scaleY", scaleY);
        } else {
          by === "x" && target.set("scaleX", scaleX);
          by === "y" && target.set("scaleY", scaleY);
        }
        return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;
      }
      function scaleObjectFromCorner(eventData, transform, x, y2) {
        return scaleObject(eventData, transform, x, y2);
      }
      function scaleObjectX(eventData, transform, x, y2) {
        return scaleObject(eventData, transform, x, y2, { by: "x" });
      }
      function scaleObjectY(eventData, transform, x, y2) {
        return scaleObject(eventData, transform, x, y2, { by: "y" });
      }
      function scalingYOrSkewingX(eventData, transform, x, y2) {
        if (eventData[transform.target.canvas.altActionKey]) {
          return controls.skewHandlerX(eventData, transform, x, y2);
        }
        return controls.scalingY(eventData, transform, x, y2);
      }
      function scalingXOrSkewingY(eventData, transform, x, y2) {
        if (eventData[transform.target.canvas.altActionKey]) {
          return controls.skewHandlerY(eventData, transform, x, y2);
        }
        return controls.scalingX(eventData, transform, x, y2);
      }
      function changeWidth(eventData, transform, x, y2) {
        var target = transform.target, localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y2), strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1), multiplier = isTransformCentered(transform) ? 2 : 1, oldWidth = target.width, newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;
        target.set("width", Math.max(newWidth, 0));
        return oldWidth !== newWidth;
      }
      function dragHandler(eventData, transform, x, y2) {
        var target = transform.target, newLeft = x - transform.offsetX, newTop = y2 - transform.offsetY, moveX = !target.get("lockMovementX") && target.left !== newLeft, moveY = !target.get("lockMovementY") && target.top !== newTop;
        moveX && target.set("left", newLeft);
        moveY && target.set("top", newTop);
        if (moveX || moveY) {
          fireEvent("moving", commonEventInfo(eventData, transform, x, y2));
        }
        return moveX || moveY;
      }
      controls.scaleCursorStyleHandler = scaleCursorStyleHandler;
      controls.skewCursorStyleHandler = skewCursorStyleHandler;
      controls.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;
      controls.rotationWithSnapping = wrapWithFireEvent("rotating", wrapWithFixedAnchor(rotationWithSnapping));
      controls.scalingEqually = wrapWithFireEvent("scaling", wrapWithFixedAnchor(scaleObjectFromCorner));
      controls.scalingX = wrapWithFireEvent("scaling", wrapWithFixedAnchor(scaleObjectX));
      controls.scalingY = wrapWithFireEvent("scaling", wrapWithFixedAnchor(scaleObjectY));
      controls.scalingYOrSkewingX = scalingYOrSkewingX;
      controls.scalingXOrSkewingY = scalingXOrSkewingY;
      controls.changeWidth = wrapWithFireEvent("resizing", wrapWithFixedAnchor(changeWidth));
      controls.skewHandlerX = skewHandlerX;
      controls.skewHandlerY = skewHandlerY;
      controls.dragHandler = dragHandler;
      controls.scaleOrSkewActionName = scaleOrSkewActionName;
      controls.rotationStyleHandler = rotationStyleHandler;
      controls.fireEvent = fireEvent;
      controls.wrapWithFixedAnchor = wrapWithFixedAnchor;
      controls.wrapWithFireEvent = wrapWithFireEvent;
      controls.getLocalPoint = getLocalPoint;
      fabric2.controlsUtils = controls;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), degreesToRadians = fabric2.util.degreesToRadians, controls = fabric2.controlsUtils;
      function renderCircleControl(ctx, left, top, styleOverride, fabricObject) {
        styleOverride = styleOverride || {};
        var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== "undefined" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? "stroke" : "fill", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), myLeft = left, myTop = top, size;
        ctx.save();
        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
        ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;
        if (xSize > ySize) {
          size = xSize;
          ctx.scale(1, ySize / xSize);
          myTop = top * xSize / ySize;
        } else if (ySize > xSize) {
          size = ySize;
          ctx.scale(xSize / ySize, 1);
          myLeft = left * ySize / xSize;
        } else {
          size = xSize;
        }
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.arc(myLeft, myTop, size / 2, 0, 2 * Math.PI, false);
        ctx[methodName]();
        if (stroke) {
          ctx.stroke();
        }
        ctx.restore();
      }
      function renderSquareControl(ctx, left, top, styleOverride, fabricObject) {
        styleOverride = styleOverride || {};
        var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== "undefined" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? "stroke" : "fill", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), xSizeBy2 = xSize / 2, ySizeBy2 = ySize / 2;
        ctx.save();
        ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
        ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;
        ctx.lineWidth = 1;
        ctx.translate(left, top);
        ctx.rotate(degreesToRadians(fabricObject.angle));
        ctx[methodName + "Rect"](-xSizeBy2, -ySizeBy2, xSize, ySize);
        if (stroke) {
          ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);
        }
        ctx.restore();
      }
      controls.renderCircleControl = renderCircleControl;
      controls.renderSquareControl = renderSquareControl;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      function Control(options) {
        for (var i2 in options) {
          this[i2] = options[i2];
        }
      }
      fabric2.Control = Control;
      fabric2.Control.prototype = /** @lends fabric.Control.prototype */
      {
        /**
         * keep track of control visibility.
         * mainly for backward compatibility.
         * if you do not want to see a control, you can remove it
         * from the controlset.
         * @type {Boolean}
         * @default true
         */
        visible: true,
        /**
         * Name of the action that the control will likely execute.
         * This is optional. FabricJS uses to identify what the user is doing for some
         * extra optimizations. If you are writing a custom control and you want to know
         * somewhere else in the code what is going on, you can use this string here.
         * you can also provide a custom getActionName if your control run multiple actions
         * depending on some external state.
         * default to scale since is the most common, used on 4 corners by default
         * @type {String}
         * @default 'scale'
         */
        actionName: "scale",
        /**
         * Drawing angle of the control.
         * NOT used for now, but name marked as needed for internal logic
         * example: to reuse the same drawing function for different rotated controls
         * @type {Number}
         * @default 0
         */
        angle: 0,
        /**
         * Relative position of the control. X
         * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities
         * of the bounding box.
         * @type {Number}
         * @default 0
         */
        x: 0,
        /**
         * Relative position of the control. Y
         * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities
         * of the bounding box.
         * @type {Number}
         * @default 0
         */
        y: 0,
        /**
         * Horizontal offset of the control from the defined position. In pixels
         * Positive offset moves the control to the right, negative to the left.
         * It used when you want to have position of control that does not scale with
         * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on
         * the boundindbox, with an offset of 30 pixels vertically. Those 30 pixels will
         * stay 30 pixels no matter how the object is big. Another example is having 2
         * controls in the corner, that stay in the same position when the object scale.
         * of the bounding box.
         * @type {Number}
         * @default 0
         */
        offsetX: 0,
        /**
         * Vertical offset of the control from the defined position. In pixels
         * Positive offset moves the control to the bottom, negative to the top.
         * @type {Number}
         * @default 0
         */
        offsetY: 0,
        /**
         * Sets the length of the control. If null, defaults to object's cornerSize.
         * Expects both sizeX and sizeY to be set when set.
         * @type {?Number}
         * @default null
         */
        sizeX: null,
        /**
         * Sets the height of the control. If null, defaults to object's cornerSize.
         * Expects both sizeX and sizeY to be set when set.
         * @type {?Number}
         * @default null
         */
        sizeY: null,
        /**
         * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.
         * Expects both touchSizeX and touchSizeY to be set when set.
         * @type {?Number}
         * @default null
         */
        touchSizeX: null,
        /**
         * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.
         * Expects both touchSizeX and touchSizeY to be set when set.
         * @type {?Number}
         * @default null
         */
        touchSizeY: null,
        /**
         * Css cursor style to display when the control is hovered.
         * if the method `cursorStyleHandler` is provided, this property is ignored.
         * @type {String}
         * @default 'crosshair'
         */
        cursorStyle: "crosshair",
        /**
         * If controls has an offsetY or offsetX, draw a line that connects
         * the control to the bounding box
         * @type {Boolean}
         * @default false
         */
        withConnection: false,
        /**
         * The control actionHandler, provide one to handle action ( control being moved )
         * @param {Event} eventData the native mouse event
         * @param {Object} transformData properties of the current transform
         * @param {Number} x x position of the cursor
         * @param {Number} y y position of the cursor
         * @return {Boolean} true if the action/event modified the object
         */
        actionHandler: function() {
        },
        /**
         * The control handler for mouse down, provide one to handle mouse down on control
         * @param {Event} eventData the native mouse event
         * @param {Object} transformData properties of the current transform
         * @param {Number} x x position of the cursor
         * @param {Number} y y position of the cursor
         * @return {Boolean} true if the action/event modified the object
         */
        mouseDownHandler: function() {
        },
        /**
         * The control mouseUpHandler, provide one to handle an effect on mouse up.
         * @param {Event} eventData the native mouse event
         * @param {Object} transformData properties of the current transform
         * @param {Number} x x position of the cursor
         * @param {Number} y y position of the cursor
         * @return {Boolean} true if the action/event modified the object
         */
        mouseUpHandler: function() {
        },
        /**
         * Returns control actionHandler
         * @param {Event} eventData the native mouse event
         * @param {fabric.Object} fabricObject on which the control is displayed
         * @param {fabric.Control} control control for which the action handler is being asked
         * @return {Function} the action handler
         */
        getActionHandler: function() {
          return this.actionHandler;
        },
        /**
         * Returns control mouseDown handler
         * @param {Event} eventData the native mouse event
         * @param {fabric.Object} fabricObject on which the control is displayed
         * @param {fabric.Control} control control for which the action handler is being asked
         * @return {Function} the action handler
         */
        getMouseDownHandler: function() {
          return this.mouseDownHandler;
        },
        /**
         * Returns control mouseUp handler
         * @param {Event} eventData the native mouse event
         * @param {fabric.Object} fabricObject on which the control is displayed
         * @param {fabric.Control} control control for which the action handler is being asked
         * @return {Function} the action handler
         */
        getMouseUpHandler: function() {
          return this.mouseUpHandler;
        },
        /**
         * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate
         * function you can pass one in the constructor
         * the cursorStyle property
         * @param {Event} eventData the native mouse event
         * @param {fabric.Control} control the current control ( likely this)
         * @param {fabric.Object} object on which the control is displayed
         * @return {String}
         */
        cursorStyleHandler: function(eventData, control) {
          return control.cursorStyle;
        },
        /**
         * Returns the action name. The basic implementation just return the actionName property.
         * @param {Event} eventData the native mouse event
         * @param {fabric.Control} control the current control ( likely this)
         * @param {fabric.Object} object on which the control is displayed
         * @return {String}
         */
        getActionName: function(eventData, control) {
          return control.actionName;
        },
        /**
         * Returns controls visibility
         * @param {fabric.Object} object on which the control is displayed
         * @param {String} controlKey key where the control is memorized on the
         * @return {Boolean}
         */
        getVisibility: function(fabricObject, controlKey) {
          var objectVisibility = fabricObject._controlsVisibility;
          if (objectVisibility && typeof objectVisibility[controlKey] !== "undefined") {
            return objectVisibility[controlKey];
          }
          return this.visible;
        },
        /**
         * Sets controls visibility
         * @param {Boolean} visibility for the object
         * @return {Void}
         */
        setVisibility: function(visibility) {
          this.visible = visibility;
        },
        positionHandler: function(dim, finalMatrix) {
          var point = fabric2.util.transformPoint({
            x: this.x * dim.x + this.offsetX,
            y: this.y * dim.y + this.offsetY
          }, finalMatrix);
          return point;
        },
        /**
         * Returns the coords for this control based on object values.
         * @param {Number} objectAngle angle from the fabric object holding the control
         * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if
         *   isTouch is true)
         * @param {Number} centerX x coordinate where the control center should be
         * @param {Number} centerY y coordinate where the control center should be
         * @param {boolean} isTouch true if touch corner, false if normal corner
         */
        calcCornerCoords: function(objectAngle, objectCornerSize, centerX, centerY, isTouch) {
          var cosHalfOffset, sinHalfOffset, cosHalfOffsetComp, sinHalfOffsetComp, xSize = isTouch ? this.touchSizeX : this.sizeX, ySize = isTouch ? this.touchSizeY : this.sizeY;
          if (xSize && ySize && xSize !== ySize) {
            var controlTriangleAngle = Math.atan2(ySize, xSize);
            var cornerHypotenuse = Math.sqrt(xSize * xSize + ySize * ySize) / 2;
            var newTheta = controlTriangleAngle - fabric2.util.degreesToRadians(objectAngle);
            var newThetaComp = Math.PI / 2 - controlTriangleAngle - fabric2.util.degreesToRadians(objectAngle);
            cosHalfOffset = cornerHypotenuse * fabric2.util.cos(newTheta);
            sinHalfOffset = cornerHypotenuse * fabric2.util.sin(newTheta);
            cosHalfOffsetComp = cornerHypotenuse * fabric2.util.cos(newThetaComp);
            sinHalfOffsetComp = cornerHypotenuse * fabric2.util.sin(newThetaComp);
          } else {
            var cornerSize = xSize && ySize ? xSize : objectCornerSize;
            cornerHypotenuse = cornerSize * 0.7071067812;
            var newTheta = fabric2.util.degreesToRadians(45 - objectAngle);
            cosHalfOffset = cosHalfOffsetComp = cornerHypotenuse * fabric2.util.cos(newTheta);
            sinHalfOffset = sinHalfOffsetComp = cornerHypotenuse * fabric2.util.sin(newTheta);
          }
          return {
            tl: {
              x: centerX - sinHalfOffsetComp,
              y: centerY - cosHalfOffsetComp
            },
            tr: {
              x: centerX + cosHalfOffset,
              y: centerY - sinHalfOffset
            },
            bl: {
              x: centerX - cosHalfOffset,
              y: centerY + sinHalfOffset
            },
            br: {
              x: centerX + sinHalfOffsetComp,
              y: centerY + cosHalfOffsetComp
            }
          };
        },
        /**
        * Render function for the control.
        * When this function runs the context is unscaled. unrotate. Just retina scaled.
        * all the functions will have to translate to the point left,top before starting Drawing
        * if they want to draw a control where the position is detected.
        * left and top are the result of the positionHandler function
        * @param {RenderingContext2D} ctx the context where the control will be drawn
        * @param {Number} left position of the canvas where we are about to render the control.
        * @param {Number} top position of the canvas where we are about to render the control.
        * @param {Object} styleOverride
        * @param {fabric.Object} fabricObject the object where the control is about to be rendered
        */
        render: function(ctx, left, top, styleOverride, fabricObject) {
          styleOverride = styleOverride || {};
          switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {
            case "circle":
              fabric2.controlsUtils.renderCircleControl.call(this, ctx, left, top, styleOverride, fabricObject);
              break;
            default:
              fabric2.controlsUtils.renderSquareControl.call(this, ctx, left, top, styleOverride, fabricObject);
          }
        }
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      function getColorStop(el, multiplier) {
        var style = el.getAttribute("style"), offset = el.getAttribute("offset") || 0, color, colorAlpha, opacity, i2;
        offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);
        offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;
        if (style) {
          var keyValuePairs = style.split(/\s*;\s*/);
          if (keyValuePairs[keyValuePairs.length - 1] === "") {
            keyValuePairs.pop();
          }
          for (i2 = keyValuePairs.length; i2--; ) {
            var split = keyValuePairs[i2].split(/\s*:\s*/), key = split[0].trim(), value = split[1].trim();
            if (key === "stop-color") {
              color = value;
            } else if (key === "stop-opacity") {
              opacity = value;
            }
          }
        }
        if (!color) {
          color = el.getAttribute("stop-color") || "rgb(0,0,0)";
        }
        if (!opacity) {
          opacity = el.getAttribute("stop-opacity");
        }
        color = new fabric.Color(color);
        colorAlpha = color.getAlpha();
        opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);
        opacity *= colorAlpha * multiplier;
        return {
          offset,
          color: color.toRgb(),
          opacity
        };
      }
      function getLinearCoords(el) {
        return {
          x1: el.getAttribute("x1") || 0,
          y1: el.getAttribute("y1") || 0,
          x2: el.getAttribute("x2") || "100%",
          y2: el.getAttribute("y2") || 0
        };
      }
      function getRadialCoords(el) {
        return {
          x1: el.getAttribute("fx") || el.getAttribute("cx") || "50%",
          y1: el.getAttribute("fy") || el.getAttribute("cy") || "50%",
          r1: 0,
          x2: el.getAttribute("cx") || "50%",
          y2: el.getAttribute("cy") || "50%",
          r2: el.getAttribute("r") || "50%"
        };
      }
      var clone = fabric.util.object.clone;
      fabric.Gradient = fabric.util.createClass(
        /** @lends fabric.Gradient.prototype */
        {
          /**
           * Horizontal offset for aligning gradients coming from SVG when outside pathgroups
           * @type Number
           * @default 0
           */
          offsetX: 0,
          /**
           * Vertical offset for aligning gradients coming from SVG when outside pathgroups
           * @type Number
           * @default 0
           */
          offsetY: 0,
          /**
           * A transform matrix to apply to the gradient before painting.
           * Imported from svg gradients, is not applied with the current transform in the center.
           * Before this transform is applied, the origin point is at the top left corner of the object
           * plus the addition of offsetY and offsetX.
           * @type Number[]
           * @default null
           */
          gradientTransform: null,
          /**
           * coordinates units for coords.
           * If `pixels`, the number of coords are in the same unit of width / height.
           * If set as `percentage` the coords are still a number, but 1 means 100% of width
           * for the X and 100% of the height for the y. It can be bigger than 1 and negative.
           * allowed values pixels or percentage.
           * @type String
           * @default 'pixels'
           */
          gradientUnits: "pixels",
          /**
           * Gradient type linear or radial
           * @type String
           * @default 'pixels'
           */
          type: "linear",
          /**
           * Constructor
           * @param {Object} options Options object with type, coords, gradientUnits and colorStops
           * @param {Object} [options.type] gradient type linear or radial
           * @param {Object} [options.gradientUnits] gradient units
           * @param {Object} [options.offsetX] SVG import compatibility
           * @param {Object} [options.offsetY] SVG import compatibility
           * @param {Object[]} options.colorStops contains the colorstops.
           * @param {Object} options.coords contains the coords of the gradient
           * @param {Number} [options.coords.x1] X coordiante of the first point for linear or of the focal point for radial
           * @param {Number} [options.coords.y1] Y coordiante of the first point for linear or of the focal point for radial
           * @param {Number} [options.coords.x2] X coordiante of the second point for linear or of the center point for radial
           * @param {Number} [options.coords.y2] Y coordiante of the second point for linear or of the center point for radial
           * @param {Number} [options.coords.r1] only for radial gradient, radius of the inner circle
           * @param {Number} [options.coords.r2] only for radial gradient, radius of the external circle
           * @return {fabric.Gradient} thisArg
           */
          initialize: function(options) {
            options || (options = {});
            options.coords || (options.coords = {});
            var coords, _this = this;
            Object.keys(options).forEach(function(option) {
              _this[option] = options[option];
            });
            if (this.id) {
              this.id += "_" + fabric.Object.__uid++;
            } else {
              this.id = fabric.Object.__uid++;
            }
            coords = {
              x1: options.coords.x1 || 0,
              y1: options.coords.y1 || 0,
              x2: options.coords.x2 || 0,
              y2: options.coords.y2 || 0
            };
            if (this.type === "radial") {
              coords.r1 = options.coords.r1 || 0;
              coords.r2 = options.coords.r2 || 0;
            }
            this.coords = coords;
            this.colorStops = options.colorStops.slice();
          },
          /**
           * Adds another colorStop
           * @param {Object} colorStop Object with offset and color
           * @return {fabric.Gradient} thisArg
           */
          addColorStop: function(colorStops) {
            for (var position in colorStops) {
              var color = new fabric.Color(colorStops[position]);
              this.colorStops.push({
                offset: parseFloat(position),
                color: color.toRgb(),
                opacity: color.getAlpha()
              });
            }
            return this;
          },
          /**
           * Returns object representation of a gradient
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object}
           */
          toObject: function(propertiesToInclude) {
            var object = {
              type: this.type,
              coords: this.coords,
              colorStops: this.colorStops,
              offsetX: this.offsetX,
              offsetY: this.offsetY,
              gradientUnits: this.gradientUnits,
              gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform
            };
            fabric.util.populateWithProperties(this, object, propertiesToInclude);
            return object;
          },
          /* _TO_SVG_START_ */
          /**
           * Returns SVG representation of an gradient
           * @param {Object} object Object to create a gradient for
           * @return {String} SVG representation of an gradient (linear/radial)
           */
          toSVG: function(object, options) {
            var coords = clone(this.coords, true), i2, len, options = options || {}, markup, commonAttributes, colorStops = clone(this.colorStops, true), needsSwap = coords.r1 > coords.r2, transform = this.gradientTransform ? this.gradientTransform.concat() : fabric.iMatrix.concat(), offsetX = -this.offsetX, offsetY = -this.offsetY, withViewport = !!options.additionalTransform, gradientUnits = this.gradientUnits === "pixels" ? "userSpaceOnUse" : "objectBoundingBox";
            colorStops.sort(function(a2, b2) {
              return a2.offset - b2.offset;
            });
            if (gradientUnits === "objectBoundingBox") {
              offsetX /= object.width;
              offsetY /= object.height;
            } else {
              offsetX += object.width / 2;
              offsetY += object.height / 2;
            }
            if (object.type === "path" && this.gradientUnits !== "percentage") {
              offsetX -= object.pathOffset.x;
              offsetY -= object.pathOffset.y;
            }
            transform[4] -= offsetX;
            transform[5] -= offsetY;
            commonAttributes = 'id="SVGID_' + this.id + '" gradientUnits="' + gradientUnits + '"';
            commonAttributes += ' gradientTransform="' + (withViewport ? options.additionalTransform + " " : "") + fabric.util.matrixToSVG(transform) + '" ';
            if (this.type === "linear") {
              markup = [
                "<linearGradient ",
                commonAttributes,
                ' x1="',
                coords.x1,
                '" y1="',
                coords.y1,
                '" x2="',
                coords.x2,
                '" y2="',
                coords.y2,
                '">\n'
              ];
            } else if (this.type === "radial") {
              markup = [
                "<radialGradient ",
                commonAttributes,
                ' cx="',
                needsSwap ? coords.x1 : coords.x2,
                '" cy="',
                needsSwap ? coords.y1 : coords.y2,
                '" r="',
                needsSwap ? coords.r1 : coords.r2,
                '" fx="',
                needsSwap ? coords.x2 : coords.x1,
                '" fy="',
                needsSwap ? coords.y2 : coords.y1,
                '">\n'
              ];
            }
            if (this.type === "radial") {
              if (needsSwap) {
                colorStops = colorStops.concat();
                colorStops.reverse();
                for (i2 = 0, len = colorStops.length; i2 < len; i2++) {
                  colorStops[i2].offset = 1 - colorStops[i2].offset;
                }
              }
              var minRadius = Math.min(coords.r1, coords.r2);
              if (minRadius > 0) {
                var maxRadius = Math.max(coords.r1, coords.r2), percentageShift = minRadius / maxRadius;
                for (i2 = 0, len = colorStops.length; i2 < len; i2++) {
                  colorStops[i2].offset += percentageShift * (1 - colorStops[i2].offset);
                }
              }
            }
            for (i2 = 0, len = colorStops.length; i2 < len; i2++) {
              var colorStop = colorStops[i2];
              markup.push(
                "<stop ",
                'offset="',
                colorStop.offset * 100 + "%",
                '" style="stop-color:',
                colorStop.color,
                typeof colorStop.opacity !== "undefined" ? ";stop-opacity: " + colorStop.opacity : ";",
                '"/>\n'
              );
            }
            markup.push(this.type === "linear" ? "</linearGradient>\n" : "</radialGradient>\n");
            return markup.join("");
          },
          /* _TO_SVG_END_ */
          /**
           * Returns an instance of CanvasGradient
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @return {CanvasGradient}
           */
          toLive: function(ctx) {
            var gradient, coords = fabric.util.object.clone(this.coords), i2, len;
            if (!this.type) {
              return;
            }
            if (this.type === "linear") {
              gradient = ctx.createLinearGradient(
                coords.x1,
                coords.y1,
                coords.x2,
                coords.y2
              );
            } else if (this.type === "radial") {
              gradient = ctx.createRadialGradient(
                coords.x1,
                coords.y1,
                coords.r1,
                coords.x2,
                coords.y2,
                coords.r2
              );
            }
            for (i2 = 0, len = this.colorStops.length; i2 < len; i2++) {
              var color = this.colorStops[i2].color, opacity = this.colorStops[i2].opacity, offset = this.colorStops[i2].offset;
              if (typeof opacity !== "undefined") {
                color = new fabric.Color(color).setAlpha(opacity).toRgba();
              }
              gradient.addColorStop(offset, color);
            }
            return gradient;
          }
        }
      );
      fabric.util.object.extend(fabric.Gradient, {
        /* _FROM_SVG_START_ */
        /**
         * Returns {@link fabric.Gradient} instance from an SVG element
         * @static
         * @memberOf fabric.Gradient
         * @param {SVGGradientElement} el SVG gradient element
         * @param {fabric.Object} instance
         * @param {String} opacityAttr A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.
         * @param {Object} svgOptions an object containing the size of the SVG in order to parse correctly gradients
         * that uses gradientUnits as 'userSpaceOnUse' and percentages.
         * @param {Object.number} viewBoxWidth width part of the viewBox attribute on svg
         * @param {Object.number} viewBoxHeight height part of the viewBox attribute on svg
         * @param {Object.number} width width part of the svg tag if viewBox is not specified
         * @param {Object.number} height height part of the svg tag if viewBox is not specified
         * @return {fabric.Gradient} Gradient instance
         * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
         * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement
         */
        fromElement: function(el, instance, opacityAttr, svgOptions) {
          var multiplier = parseFloat(opacityAttr) / (/%$/.test(opacityAttr) ? 100 : 1);
          multiplier = multiplier < 0 ? 0 : multiplier > 1 ? 1 : multiplier;
          if (isNaN(multiplier)) {
            multiplier = 1;
          }
          var colorStopEls = el.getElementsByTagName("stop"), type, gradientUnits = el.getAttribute("gradientUnits") === "userSpaceOnUse" ? "pixels" : "percentage", gradientTransform = el.getAttribute("gradientTransform") || "", colorStops = [], coords, i2, offsetX = 0, offsetY = 0, transformMatrix;
          if (el.nodeName === "linearGradient" || el.nodeName === "LINEARGRADIENT") {
            type = "linear";
            coords = getLinearCoords(el);
          } else {
            type = "radial";
            coords = getRadialCoords(el);
          }
          for (i2 = colorStopEls.length; i2--; ) {
            colorStops.push(getColorStop(colorStopEls[i2], multiplier));
          }
          transformMatrix = fabric.parseTransformAttribute(gradientTransform);
          __convertPercentUnitsToValues(instance, coords, svgOptions, gradientUnits);
          if (gradientUnits === "pixels") {
            offsetX = -instance.left;
            offsetY = -instance.top;
          }
          var gradient = new fabric.Gradient({
            id: el.getAttribute("id"),
            type,
            coords,
            colorStops,
            gradientUnits,
            gradientTransform: transformMatrix,
            offsetX,
            offsetY
          });
          return gradient;
        }
        /* _FROM_SVG_END_ */
      });
      function __convertPercentUnitsToValues(instance, options, svgOptions, gradientUnits) {
        var propValue, finalValue;
        Object.keys(options).forEach(function(prop) {
          propValue = options[prop];
          if (propValue === "Infinity") {
            finalValue = 1;
          } else if (propValue === "-Infinity") {
            finalValue = 0;
          } else {
            finalValue = parseFloat(options[prop], 10);
            if (typeof propValue === "string" && /^(\d+\.\d+)%|(\d+)%$/.test(propValue)) {
              finalValue *= 0.01;
              if (gradientUnits === "pixels") {
                if (prop === "x1" || prop === "x2" || prop === "r2") {
                  finalValue *= svgOptions.viewBoxWidth || svgOptions.width;
                }
                if (prop === "y1" || prop === "y2") {
                  finalValue *= svgOptions.viewBoxHeight || svgOptions.height;
                }
              }
            }
          }
          options[prop] = finalValue;
        });
      }
    })();
    (function() {
      "use strict";
      var toFixed = fabric.util.toFixed;
      fabric.Pattern = fabric.util.createClass(
        /** @lends fabric.Pattern.prototype */
        {
          /**
           * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
           * @type String
           * @default
           */
          repeat: "repeat",
          /**
           * Pattern horizontal offset from object's left/top corner
           * @type Number
           * @default
           */
          offsetX: 0,
          /**
           * Pattern vertical offset from object's left/top corner
           * @type Number
           * @default
           */
          offsetY: 0,
          /**
           * crossOrigin value (one of "", "anonymous", "use-credentials")
           * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
           * @type String
           * @default
           */
          crossOrigin: "",
          /**
           * transform matrix to change the pattern, imported from svgs.
           * @type Array
           * @default
           */
          patternTransform: null,
          /**
           * Constructor
           * @param {Object} [options] Options object
           * @param {Function} [callback] function to invoke after callback init.
           * @return {fabric.Pattern} thisArg
           */
          initialize: function(options, callback) {
            options || (options = {});
            this.id = fabric.Object.__uid++;
            this.setOptions(options);
            if (!options.source || options.source && typeof options.source !== "string") {
              callback && callback(this);
              return;
            } else {
              var _this = this;
              this.source = fabric.util.createImage();
              fabric.util.loadImage(options.source, function(img, isError) {
                _this.source = img;
                callback && callback(_this, isError);
              }, null, this.crossOrigin);
            }
          },
          /**
           * Returns object representation of a pattern
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} Object representation of a pattern instance
           */
          toObject: function(propertiesToInclude) {
            var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS, source, object;
            if (typeof this.source.src === "string") {
              source = this.source.src;
            } else if (typeof this.source === "object" && this.source.toDataURL) {
              source = this.source.toDataURL();
            }
            object = {
              type: "pattern",
              source,
              repeat: this.repeat,
              crossOrigin: this.crossOrigin,
              offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),
              offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),
              patternTransform: this.patternTransform ? this.patternTransform.concat() : null
            };
            fabric.util.populateWithProperties(this, object, propertiesToInclude);
            return object;
          },
          /* _TO_SVG_START_ */
          /**
           * Returns SVG representation of a pattern
           * @param {fabric.Object} object
           * @return {String} SVG representation of a pattern
           */
          toSVG: function(object) {
            var patternSource = typeof this.source === "function" ? this.source() : this.source, patternWidth = patternSource.width / object.width, patternHeight = patternSource.height / object.height, patternOffsetX = this.offsetX / object.width, patternOffsetY = this.offsetY / object.height, patternImgSrc = "";
            if (this.repeat === "repeat-x" || this.repeat === "no-repeat") {
              patternHeight = 1;
              if (patternOffsetY) {
                patternHeight += Math.abs(patternOffsetY);
              }
            }
            if (this.repeat === "repeat-y" || this.repeat === "no-repeat") {
              patternWidth = 1;
              if (patternOffsetX) {
                patternWidth += Math.abs(patternOffsetX);
              }
            }
            if (patternSource.src) {
              patternImgSrc = patternSource.src;
            } else if (patternSource.toDataURL) {
              patternImgSrc = patternSource.toDataURL();
            }
            return '<pattern id="SVGID_' + this.id + '" x="' + patternOffsetX + '" y="' + patternOffsetY + '" width="' + patternWidth + '" height="' + patternHeight + '">\n<image x="0" y="0" width="' + patternSource.width + '" height="' + patternSource.height + '" xlink:href="' + patternImgSrc + '"></image>\n</pattern>\n';
          },
          /* _TO_SVG_END_ */
          setOptions: function(options) {
            for (var prop in options) {
              this[prop] = options[prop];
            }
          },
          /**
           * Returns an instance of CanvasPattern
           * @param {CanvasRenderingContext2D} ctx Context to create pattern
           * @return {CanvasPattern}
           */
          toLive: function(ctx) {
            var source = this.source;
            if (!source) {
              return "";
            }
            if (typeof source.src !== "undefined") {
              if (!source.complete) {
                return "";
              }
              if (source.naturalWidth === 0 || source.naturalHeight === 0) {
                return "";
              }
            }
            return ctx.createPattern(source, this.repeat);
          }
        }
      );
    })();
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), toFixed = fabric2.util.toFixed;
      if (fabric2.Shadow) {
        fabric2.warn("fabric.Shadow is already defined.");
        return;
      }
      fabric2.Shadow = fabric2.util.createClass(
        /** @lends fabric.Shadow.prototype */
        {
          /**
           * Shadow color
           * @type String
           * @default
           */
          color: "rgb(0,0,0)",
          /**
           * Shadow blur
           * @type Number
           */
          blur: 0,
          /**
           * Shadow horizontal offset
           * @type Number
           * @default
           */
          offsetX: 0,
          /**
           * Shadow vertical offset
           * @type Number
           * @default
           */
          offsetY: 0,
          /**
           * Whether the shadow should affect stroke operations
           * @type Boolean
           * @default
           */
          affectStroke: false,
          /**
           * Indicates whether toObject should include default values
           * @type Boolean
           * @default
           */
          includeDefaultValues: true,
          /**
           * When `false`, the shadow will scale with the object.
           * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.
           * default to false
           * @type Boolean
           * @default
           */
          nonScaling: false,
          /**
           * Constructor
           * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. "rgba(0,0,0,0.2) 2px 2px 10px")
           * @return {fabric.Shadow} thisArg
           */
          initialize: function(options) {
            if (typeof options === "string") {
              options = this._parseShadow(options);
            }
            for (var prop in options) {
              this[prop] = options[prop];
            }
            this.id = fabric2.Object.__uid++;
          },
          /**
           * @private
           * @param {String} shadow Shadow value to parse
           * @return {Object} Shadow object with color, offsetX, offsetY and blur
           */
          _parseShadow: function(shadow) {
            var shadowStr = shadow.trim(), offsetsAndBlur = fabric2.Shadow.reOffsetsAndBlur.exec(shadowStr) || [], color = shadowStr.replace(fabric2.Shadow.reOffsetsAndBlur, "") || "rgb(0,0,0)";
            return {
              color: color.trim(),
              offsetX: parseFloat(offsetsAndBlur[1], 10) || 0,
              offsetY: parseFloat(offsetsAndBlur[2], 10) || 0,
              blur: parseFloat(offsetsAndBlur[3], 10) || 0
            };
          },
          /**
           * Returns a string representation of an instance
           * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow
           * @return {String} Returns CSS3 text-shadow declaration
           */
          toString: function() {
            return [this.offsetX, this.offsetY, this.blur, this.color].join("px ");
          },
          /* _TO_SVG_START_ */
          /**
           * Returns SVG representation of a shadow
           * @param {fabric.Object} object
           * @return {String} SVG representation of a shadow
           */
          toSVG: function(object) {
            var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric2.Object.NUM_FRACTION_DIGITS, offset = fabric2.util.rotateVector(
              { x: this.offsetX, y: this.offsetY },
              fabric2.util.degreesToRadians(-object.angle)
            ), BLUR_BOX = 20, color = new fabric2.Color(this.color);
            if (object.width && object.height) {
              fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
              fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
            }
            if (object.flipX) {
              offset.x *= -1;
            }
            if (object.flipY) {
              offset.y *= -1;
            }
            return '<filter id="SVGID_' + this.id + '" y="-' + fBoxY + '%" height="' + (100 + 2 * fBoxY) + '%" x="-' + fBoxX + '%" width="' + (100 + 2 * fBoxX) + '%" >\n	<feGaussianBlur in="SourceAlpha" stdDeviation="' + toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '"></feGaussianBlur>\n	<feOffset dx="' + toFixed(offset.x, NUM_FRACTION_DIGITS) + '" dy="' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '" result="oBlur" ></feOffset>\n	<feFlood flood-color="' + color.toRgb() + '" flood-opacity="' + color.getAlpha() + '"/>\n	<feComposite in2="oBlur" operator="in" />\n	<feMerge>\n		<feMergeNode></feMergeNode>\n		<feMergeNode in="SourceGraphic"></feMergeNode>\n	</feMerge>\n</filter>\n';
          },
          /* _TO_SVG_END_ */
          /**
           * Returns object representation of a shadow
           * @return {Object} Object representation of a shadow instance
           */
          toObject: function() {
            if (this.includeDefaultValues) {
              return {
                color: this.color,
                blur: this.blur,
                offsetX: this.offsetX,
                offsetY: this.offsetY,
                affectStroke: this.affectStroke,
                nonScaling: this.nonScaling
              };
            }
            var obj = {}, proto = fabric2.Shadow.prototype;
            ["color", "blur", "offsetX", "offsetY", "affectStroke", "nonScaling"].forEach(function(prop) {
              if (this[prop] !== proto[prop]) {
                obj[prop] = this[prop];
              }
            }, this);
            return obj;
          }
        }
      );
      fabric2.Shadow.reOffsetsAndBlur = /(?:\s|^)(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(\d+(?:\.\d*)?(?:px)?)?(?:\s?|$)(?:$|\s)/;
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      "use strict";
      if (fabric.StaticCanvas) {
        fabric.warn("fabric.StaticCanvas is already defined.");
        return;
      }
      var extend = fabric.util.object.extend, getElementOffset = fabric.util.getElementOffset, removeFromArray = fabric.util.removeFromArray, toFixed = fabric.util.toFixed, transformPoint = fabric.util.transformPoint, invertTransform = fabric.util.invertTransform, getNodeCanvas = fabric.util.getNodeCanvas, createCanvasElement = fabric.util.createCanvasElement, CANVAS_INIT_ERROR = new Error("Could not initialize `canvas` element");
      fabric.StaticCanvas = fabric.util.createClass(
        fabric.CommonMethods,
        /** @lends fabric.StaticCanvas.prototype */
        {
          /**
           * Constructor
           * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
           * @param {Object} [options] Options object
           * @return {Object} thisArg
           */
          initialize: function(el, options) {
            options || (options = {});
            this.renderAndResetBound = this.renderAndReset.bind(this);
            this.requestRenderAllBound = this.requestRenderAll.bind(this);
            this._initStatic(el, options);
          },
          /**
           * Background color of canvas instance.
           * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.
           * @type {(String|fabric.Pattern)}
           * @default
           */
          backgroundColor: "",
          /**
           * Background image of canvas instance.
           * since 2.4.0 image caching is active, please when putting an image as background, add to the
           * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
           * vale. As an alternative you can disable image objectCaching
           * @type fabric.Image
           * @default
           */
          backgroundImage: null,
          /**
           * Overlay color of canvas instance.
           * Should be set via {@link fabric.StaticCanvas#setOverlayColor}
           * @since 1.3.9
           * @type {(String|fabric.Pattern)}
           * @default
           */
          overlayColor: "",
          /**
           * Overlay image of canvas instance.
           * since 2.4.0 image caching is active, please when putting an image as overlay, add to the
           * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
           * vale. As an alternative you can disable image objectCaching
           * @type fabric.Image
           * @default
           */
          overlayImage: null,
          /**
           * Indicates whether toObject/toDatalessObject should include default values
           * if set to false, takes precedence over the object value.
           * @type Boolean
           * @default
           */
          includeDefaultValues: true,
          /**
           * Indicates whether objects' state should be saved
           * @type Boolean
           * @default
           */
          stateful: false,
          /**
           * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},
           * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.
           * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once
           * since the renders are quequed and executed one per frame.
           * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )
           * Left default to true to do not break documentation and old app, fiddles.
           * @type Boolean
           * @default
           */
          renderOnAddRemove: true,
          /**
           * Indicates whether object controls (borders/controls) are rendered above overlay image
           * @type Boolean
           * @default
           */
          controlsAboveOverlay: false,
          /**
           * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas
           * @type Boolean
           * @default
           */
          allowTouchScrolling: false,
          /**
           * Indicates whether this canvas will use image smoothing, this is on by default in browsers
           * @type Boolean
           * @default
           */
          imageSmoothingEnabled: true,
          /**
           * The transformation (in the format of Canvas transform) which focuses the viewport
           * @type Array
           * @default
           */
          viewportTransform: fabric.iMatrix.concat(),
          /**
           * if set to false background image is not affected by viewport transform
           * @since 1.6.3
           * @type Boolean
           * @default
           */
          backgroundVpt: true,
          /**
           * if set to false overlya image is not affected by viewport transform
           * @since 1.6.3
           * @type Boolean
           * @default
           */
          overlayVpt: true,
          /**
           * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens
           * @type Boolean
           * @default
           */
          enableRetinaScaling: true,
          /**
           * Describe canvas element extension over design
           * properties are tl,tr,bl,br.
           * if canvas is not zoomed/panned those points are the four corner of canvas
           * if canvas is viewportTransformed you those points indicate the extension
           * of canvas element in plain untrasformed coordinates
           * The coordinates get updated with @method calcViewportBoundaries.
           * @memberOf fabric.StaticCanvas.prototype
           */
          vptCoords: {},
          /**
           * Based on vptCoords and object.aCoords, skip rendering of objects that
           * are not included in current viewport.
           * May greatly help in applications with crowded canvas and use of zoom/pan
           * If One of the corner of the bounding box of the object is on the canvas
           * the objects get rendered.
           * @memberOf fabric.StaticCanvas.prototype
           * @type Boolean
           * @default
           */
          skipOffscreen: true,
          /**
           * a fabricObject that, without stroke define a clipping area with their shape. filled in black
           * the clipPath object gets used when the canvas has rendered, and the context is placed in the
           * top left corner of the canvas.
           * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true
           * @type fabric.Object
           */
          clipPath: void 0,
          /**
           * @private
           * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
           * @param {Object} [options] Options object
           */
          _initStatic: function(el, options) {
            var cb = this.requestRenderAllBound;
            this._objects = [];
            this._createLowerCanvas(el);
            this._initOptions(options);
            if (!this.interactive) {
              this._initRetinaScaling();
            }
            if (options.overlayImage) {
              this.setOverlayImage(options.overlayImage, cb);
            }
            if (options.backgroundImage) {
              this.setBackgroundImage(options.backgroundImage, cb);
            }
            if (options.backgroundColor) {
              this.setBackgroundColor(options.backgroundColor, cb);
            }
            if (options.overlayColor) {
              this.setOverlayColor(options.overlayColor, cb);
            }
            this.calcOffset();
          },
          /**
           * @private
           */
          _isRetinaScaling: function() {
            return fabric.devicePixelRatio !== 1 && this.enableRetinaScaling;
          },
          /**
           * @private
           * @return {Number} retinaScaling if applied, otherwise 1;
           */
          getRetinaScaling: function() {
            return this._isRetinaScaling() ? fabric.devicePixelRatio : 1;
          },
          /**
           * @private
           */
          _initRetinaScaling: function() {
            if (!this._isRetinaScaling()) {
              return;
            }
            var scaleRatio = fabric.devicePixelRatio;
            this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);
            if (this.upperCanvasEl) {
              this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);
            }
          },
          __initRetinaScaling: function(scaleRatio, canvas, context) {
            canvas.setAttribute("width", this.width * scaleRatio);
            canvas.setAttribute("height", this.height * scaleRatio);
            context.scale(scaleRatio, scaleRatio);
          },
          /**
           * Calculates canvas element offset relative to the document
           * This method is also attached as "resize" event handler of window
           * @return {fabric.Canvas} instance
           * @chainable
           */
          calcOffset: function() {
            this._offset = getElementOffset(this.lowerCanvasEl);
            return this;
          },
          /**
           * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas
           * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to
           * @param {Function} callback callback to invoke when image is loaded and set as an overlay
           * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.
           * @return {fabric.Canvas} thisArg
           * @chainable
           * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}
           * @example <caption>Normal overlayImage with left/top = 0</caption>
           * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
           *   // Needed to position overlayImage at 0/0
           *   originX: 'left',
           *   originY: 'top'
           * });
           * @example <caption>overlayImage with different properties</caption>
           * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
           *   opacity: 0.5,
           *   angle: 45,
           *   left: 400,
           *   top: 400,
           *   originX: 'left',
           *   originY: 'top'
           * });
           * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>
           * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img, isError) {
           *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
           *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));
           * });
           * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>
           * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
           *   width: canvas.width,
           *   height: canvas.height,
           *   // Needed to position overlayImage at 0/0
           *   originX: 'left',
           *   originY: 'top'
           * });
           * @example <caption>overlayImage loaded from cross-origin</caption>
           * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
           *   opacity: 0.5,
           *   angle: 45,
           *   left: 400,
           *   top: 400,
           *   originX: 'left',
           *   originY: 'top',
           *   crossOrigin: 'anonymous'
           * });
           */
          setOverlayImage: function(image, callback, options) {
            return this.__setBgOverlayImage("overlayImage", image, callback, options);
          },
          /**
           * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas
           * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to
           * @param {Function} callback Callback to invoke when image is loaded and set as background
           * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.
           * @return {fabric.Canvas} thisArg
           * @chainable
           * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}
           * @example <caption>Normal backgroundImage with left/top = 0</caption>
           * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
           *   // Needed to position backgroundImage at 0/0
           *   originX: 'left',
           *   originY: 'top'
           * });
           * @example <caption>backgroundImage with different properties</caption>
           * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
           *   opacity: 0.5,
           *   angle: 45,
           *   left: 400,
           *   top: 400,
           *   originX: 'left',
           *   originY: 'top'
           * });
           * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>
           * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img, isError) {
           *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
           *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
           * });
           * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>
           * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
           *   width: canvas.width,
           *   height: canvas.height,
           *   // Needed to position backgroundImage at 0/0
           *   originX: 'left',
           *   originY: 'top'
           * });
           * @example <caption>backgroundImage loaded from cross-origin</caption>
           * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
           *   opacity: 0.5,
           *   angle: 45,
           *   left: 400,
           *   top: 400,
           *   originX: 'left',
           *   originY: 'top',
           *   crossOrigin: 'anonymous'
           * });
           */
          // TODO: fix stretched examples
          setBackgroundImage: function(image, callback, options) {
            return this.__setBgOverlayImage("backgroundImage", image, callback, options);
          },
          /**
           * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas
           * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to
           * @param {Function} callback Callback to invoke when foreground color is set
           * @return {fabric.Canvas} thisArg
           * @chainable
           * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}
           * @example <caption>Normal overlayColor - color value</caption>
           * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
           * @example <caption>fabric.Pattern used as overlayColor</caption>
           * canvas.setOverlayColor({
           *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
           * }, canvas.renderAll.bind(canvas));
           * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>
           * canvas.setOverlayColor({
           *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
           *   repeat: 'repeat',
           *   offsetX: 200,
           *   offsetY: 100
           * }, canvas.renderAll.bind(canvas));
           */
          setOverlayColor: function(overlayColor, callback) {
            return this.__setBgOverlayColor("overlayColor", overlayColor, callback);
          },
          /**
           * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas
           * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to
           * @param {Function} callback Callback to invoke when background color is set
           * @return {fabric.Canvas} thisArg
           * @chainable
           * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}
           * @example <caption>Normal backgroundColor - color value</caption>
           * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
           * @example <caption>fabric.Pattern used as backgroundColor</caption>
           * canvas.setBackgroundColor({
           *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
           * }, canvas.renderAll.bind(canvas));
           * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>
           * canvas.setBackgroundColor({
           *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
           *   repeat: 'repeat',
           *   offsetX: 200,
           *   offsetY: 100
           * }, canvas.renderAll.bind(canvas));
           */
          setBackgroundColor: function(backgroundColor, callback) {
            return this.__setBgOverlayColor("backgroundColor", backgroundColor, callback);
          },
          /**
           * @private
           * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}
           * or {@link fabric.StaticCanvas#overlayImage|overlayImage})
           * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to
           * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay. The first argument is the created image, the second argument is a flag indicating whether an error occurred or not.
           * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.
           */
          __setBgOverlayImage: function(property, image, callback, options) {
            if (typeof image === "string") {
              fabric.util.loadImage(image, function(img, isError) {
                if (img) {
                  var instance = new fabric.Image(img, options);
                  this[property] = instance;
                  instance.canvas = this;
                }
                callback && callback(img, isError);
              }, this, options && options.crossOrigin);
            } else {
              options && image.setOptions(options);
              this[property] = image;
              image && (image.canvas = this);
              callback && callback(image, false);
            }
            return this;
          },
          /**
           * @private
           * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}
           * or {@link fabric.StaticCanvas#overlayColor|overlayColor})
           * @param {(Object|String|null)} color Object with pattern information, color value or null
           * @param {Function} [callback] Callback is invoked when color is set
           */
          __setBgOverlayColor: function(property, color, callback) {
            this[property] = color;
            this._initGradient(color, property);
            this._initPattern(color, property, callback);
            return this;
          },
          /**
           * @private
           */
          _createCanvasElement: function() {
            var element = createCanvasElement();
            if (!element) {
              throw CANVAS_INIT_ERROR;
            }
            if (!element.style) {
              element.style = {};
            }
            if (typeof element.getContext === "undefined") {
              throw CANVAS_INIT_ERROR;
            }
            return element;
          },
          /**
           * @private
           * @param {Object} [options] Options object
           */
          _initOptions: function(options) {
            var lowerCanvasEl = this.lowerCanvasEl;
            this._setOptions(options);
            this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;
            this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;
            if (!this.lowerCanvasEl.style) {
              return;
            }
            lowerCanvasEl.width = this.width;
            lowerCanvasEl.height = this.height;
            lowerCanvasEl.style.width = this.width + "px";
            lowerCanvasEl.style.height = this.height + "px";
            this.viewportTransform = this.viewportTransform.slice();
          },
          /**
           * Creates a bottom canvas
           * @private
           * @param {HTMLElement} [canvasEl]
           */
          _createLowerCanvas: function(canvasEl) {
            if (canvasEl && canvasEl.getContext) {
              this.lowerCanvasEl = canvasEl;
            } else {
              this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();
            }
            fabric.util.addClass(this.lowerCanvasEl, "lower-canvas");
            this._originalCanvasStyle = this.lowerCanvasEl.style;
            if (this.interactive) {
              this._applyCanvasStyle(this.lowerCanvasEl);
            }
            this.contextContainer = this.lowerCanvasEl.getContext("2d");
          },
          /**
           * Returns canvas width (in px)
           * @return {Number}
           */
          getWidth: function() {
            return this.width;
          },
          /**
           * Returns canvas height (in px)
           * @return {Number}
           */
          getHeight: function() {
            return this.height;
          },
          /**
           * Sets width of this canvas instance
           * @param {Number|String} value                         Value to set width to
           * @param {Object}        [options]                     Options object
           * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
           * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          setWidth: function(value, options) {
            return this.setDimensions({ width: value }, options);
          },
          /**
           * Sets height of this canvas instance
           * @param {Number|String} value                         Value to set height to
           * @param {Object}        [options]                     Options object
           * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
           * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          setHeight: function(value, options) {
            return this.setDimensions({ height: value }, options);
          },
          /**
           * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)
           * @param {Object}        dimensions                    Object with width/height properties
           * @param {Number|String} [dimensions.width]            Width of canvas element
           * @param {Number|String} [dimensions.height]           Height of canvas element
           * @param {Object}        [options]                     Options object
           * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
           * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          setDimensions: function(dimensions, options) {
            var cssValue;
            options = options || {};
            for (var prop in dimensions) {
              cssValue = dimensions[prop];
              if (!options.cssOnly) {
                this._setBackstoreDimension(prop, dimensions[prop]);
                cssValue += "px";
                this.hasLostContext = true;
              }
              if (!options.backstoreOnly) {
                this._setCssDimension(prop, cssValue);
              }
            }
            if (this._isCurrentlyDrawing) {
              this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();
            }
            this._initRetinaScaling();
            this.calcOffset();
            if (!options.cssOnly) {
              this.requestRenderAll();
            }
            return this;
          },
          /**
           * Helper for setting width/height
           * @private
           * @param {String} prop property (width|height)
           * @param {Number} value value to set property to
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          _setBackstoreDimension: function(prop, value) {
            this.lowerCanvasEl[prop] = value;
            if (this.upperCanvasEl) {
              this.upperCanvasEl[prop] = value;
            }
            if (this.cacheCanvasEl) {
              this.cacheCanvasEl[prop] = value;
            }
            this[prop] = value;
            return this;
          },
          /**
           * Helper for setting css width/height
           * @private
           * @param {String} prop property (width|height)
           * @param {String} value value to set property to
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          _setCssDimension: function(prop, value) {
            this.lowerCanvasEl.style[prop] = value;
            if (this.upperCanvasEl) {
              this.upperCanvasEl.style[prop] = value;
            }
            if (this.wrapperEl) {
              this.wrapperEl.style[prop] = value;
            }
            return this;
          },
          /**
           * Returns canvas zoom level
           * @return {Number}
           */
          getZoom: function() {
            return this.viewportTransform[0];
          },
          /**
           * Sets viewport transform of this canvas instance
           * @param {Array} vpt the transform in the form of context.transform
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          setViewportTransform: function(vpt) {
            var activeObject = this._activeObject, backgroundObject = this.backgroundImage, overlayObject = this.overlayImage, object, i2, len;
            this.viewportTransform = vpt;
            for (i2 = 0, len = this._objects.length; i2 < len; i2++) {
              object = this._objects[i2];
              object.group || object.setCoords(true);
            }
            if (activeObject) {
              activeObject.setCoords();
            }
            if (backgroundObject) {
              backgroundObject.setCoords(true);
            }
            if (overlayObject) {
              overlayObject.setCoords(true);
            }
            this.calcViewportBoundaries();
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          /**
           * Sets zoom level of this canvas instance, the zoom centered around point
           * meaning that following zoom to point with the same point will have the visual
           * effect of the zoom originating from that point. The point won't move.
           * It has nothing to do with canvas center or visual center of the viewport.
           * @param {fabric.Point} point to zoom with respect to
           * @param {Number} value to set zoom to, less than 1 zooms out
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          zoomToPoint: function(point, value) {
            var before = point, vpt = this.viewportTransform.slice(0);
            point = transformPoint(point, invertTransform(this.viewportTransform));
            vpt[0] = value;
            vpt[3] = value;
            var after = transformPoint(point, vpt);
            vpt[4] += before.x - after.x;
            vpt[5] += before.y - after.y;
            return this.setViewportTransform(vpt);
          },
          /**
           * Sets zoom level of this canvas instance
           * @param {Number} value to set zoom to, less than 1 zooms out
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          setZoom: function(value) {
            this.zoomToPoint(new fabric.Point(0, 0), value);
            return this;
          },
          /**
           * Pan viewport so as to place point at top left corner of canvas
           * @param {fabric.Point} point to move to
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          absolutePan: function(point) {
            var vpt = this.viewportTransform.slice(0);
            vpt[4] = -point.x;
            vpt[5] = -point.y;
            return this.setViewportTransform(vpt);
          },
          /**
           * Pans viewpoint relatively
           * @param {fabric.Point} point (position vector) to move by
           * @return {fabric.Canvas} instance
           * @chainable true
           */
          relativePan: function(point) {
            return this.absolutePan(new fabric.Point(
              -point.x - this.viewportTransform[4],
              -point.y - this.viewportTransform[5]
            ));
          },
          /**
           * Returns &lt;canvas> element corresponding to this instance
           * @return {HTMLCanvasElement}
           */
          getElement: function() {
            return this.lowerCanvasEl;
          },
          /**
           * @private
           * @param {fabric.Object} obj Object that was added
           */
          _onObjectAdded: function(obj) {
            this.stateful && obj.setupState();
            obj._set("canvas", this);
            obj.setCoords();
            this.fire("object:added", { target: obj });
            obj.fire("added");
          },
          /**
           * @private
           * @param {fabric.Object} obj Object that was removed
           */
          _onObjectRemoved: function(obj) {
            this.fire("object:removed", { target: obj });
            obj.fire("removed");
            delete obj.canvas;
          },
          /**
           * Clears specified context of canvas element
           * @param {CanvasRenderingContext2D} ctx Context to clear
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          clearContext: function(ctx) {
            ctx.clearRect(0, 0, this.width, this.height);
            return this;
          },
          /**
           * Returns context of canvas where objects are drawn
           * @return {CanvasRenderingContext2D}
           */
          getContext: function() {
            return this.contextContainer;
          },
          /**
           * Clears all contexts (background, main, top) of an instance
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          clear: function() {
            this.remove.apply(this, this.getObjects());
            this.backgroundImage = null;
            this.overlayImage = null;
            this.backgroundColor = "";
            this.overlayColor = "";
            if (this._hasITextHandlers) {
              this.off("mouse:up", this._mouseUpITextHandler);
              this._iTextInstances = null;
              this._hasITextHandlers = false;
            }
            this.clearContext(this.contextContainer);
            this.fire("canvas:cleared");
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          /**
           * Renders the canvas
           * @return {fabric.Canvas} instance
           * @chainable
           */
          renderAll: function() {
            var canvasToDrawOn = this.contextContainer;
            this.renderCanvas(canvasToDrawOn, this._objects);
            return this;
          },
          /**
           * Function created to be instance bound at initialization
           * used in requestAnimationFrame rendering
           * Let the fabricJS call it. If you call it manually you could have more
           * animationFrame stacking on to of each other
           * for an imperative rendering, use canvas.renderAll
           * @private
           * @return {fabric.Canvas} instance
           * @chainable
           */
          renderAndReset: function() {
            this.isRendering = 0;
            this.renderAll();
          },
          /**
           * Append a renderAll request to next animation frame.
           * unless one is already in progress, in that case nothing is done
           * a boolean flag will avoid appending more.
           * @return {fabric.Canvas} instance
           * @chainable
           */
          requestRenderAll: function() {
            if (!this.isRendering) {
              this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);
            }
            return this;
          },
          /**
           * Calculate the position of the 4 corner of canvas with current viewportTransform.
           * helps to determinate when an object is in the current rendering viewport using
           * object absolute coordinates ( aCoords )
           * @return {Object} points.tl
           * @chainable
           */
          calcViewportBoundaries: function() {
            var points = {}, width = this.width, height = this.height, iVpt = invertTransform(this.viewportTransform);
            points.tl = transformPoint({ x: 0, y: 0 }, iVpt);
            points.br = transformPoint({ x: width, y: height }, iVpt);
            points.tr = new fabric.Point(points.br.x, points.tl.y);
            points.bl = new fabric.Point(points.tl.x, points.br.y);
            this.vptCoords = points;
            return points;
          },
          cancelRequestedRender: function() {
            if (this.isRendering) {
              fabric.util.cancelAnimFrame(this.isRendering);
              this.isRendering = 0;
            }
          },
          /**
           * Renders background, objects, overlay and controls.
           * @param {CanvasRenderingContext2D} ctx
           * @param {Array} objects to render
           * @return {fabric.Canvas} instance
           * @chainable
           */
          renderCanvas: function(ctx, objects) {
            var v2 = this.viewportTransform, path = this.clipPath;
            this.cancelRequestedRender();
            this.calcViewportBoundaries();
            this.clearContext(ctx);
            fabric.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);
            this.fire("before:render", { ctx });
            this._renderBackground(ctx);
            ctx.save();
            ctx.transform(v2[0], v2[1], v2[2], v2[3], v2[4], v2[5]);
            this._renderObjects(ctx, objects);
            ctx.restore();
            if (!this.controlsAboveOverlay && this.interactive) {
              this.drawControls(ctx);
            }
            if (path) {
              path.canvas = this;
              path.shouldCache();
              path._transformDone = true;
              path.renderCache({ forClipping: true });
              this.drawClipPathOnCanvas(ctx);
            }
            this._renderOverlay(ctx);
            if (this.controlsAboveOverlay && this.interactive) {
              this.drawControls(ctx);
            }
            this.fire("after:render", { ctx });
          },
          /**
           * Paint the cached clipPath on the lowerCanvasEl
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          drawClipPathOnCanvas: function(ctx) {
            var v2 = this.viewportTransform, path = this.clipPath;
            ctx.save();
            ctx.transform(v2[0], v2[1], v2[2], v2[3], v2[4], v2[5]);
            ctx.globalCompositeOperation = "destination-in";
            path.transform(ctx);
            ctx.scale(1 / path.zoomX, 1 / path.zoomY);
            ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
            ctx.restore();
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {Array} objects to render
           */
          _renderObjects: function(ctx, objects) {
            var i2, len;
            for (i2 = 0, len = objects.length; i2 < len; ++i2) {
              objects[i2] && objects[i2].render(ctx);
            }
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {string} property 'background' or 'overlay'
           */
          _renderBackgroundOrOverlay: function(ctx, property) {
            var fill = this[property + "Color"], object = this[property + "Image"], v2 = this.viewportTransform, needsVpt = this[property + "Vpt"];
            if (!fill && !object) {
              return;
            }
            if (fill) {
              ctx.save();
              ctx.beginPath();
              ctx.moveTo(0, 0);
              ctx.lineTo(this.width, 0);
              ctx.lineTo(this.width, this.height);
              ctx.lineTo(0, this.height);
              ctx.closePath();
              ctx.fillStyle = fill.toLive ? fill.toLive(ctx, this) : fill;
              if (needsVpt) {
                ctx.transform(v2[0], v2[1], v2[2], v2[3], v2[4], v2[5]);
              }
              ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);
              var m2 = fill.gradientTransform || fill.patternTransform;
              m2 && ctx.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
              ctx.fill();
              ctx.restore();
            }
            if (object) {
              ctx.save();
              if (needsVpt) {
                ctx.transform(v2[0], v2[1], v2[2], v2[3], v2[4], v2[5]);
              }
              object.render(ctx);
              ctx.restore();
            }
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderBackground: function(ctx) {
            this._renderBackgroundOrOverlay(ctx, "background");
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderOverlay: function(ctx) {
            this._renderBackgroundOrOverlay(ctx, "overlay");
          },
          /**
           * Returns coordinates of a center of canvas.
           * Returned value is an object with top and left properties
           * @return {Object} object with "top" and "left" number values
           */
          getCenter: function() {
            return {
              top: this.height / 2,
              left: this.width / 2
            };
          },
          /**
           * Centers object horizontally in the canvas
           * @param {fabric.Object} object Object to center horizontally
           * @return {fabric.Canvas} thisArg
           */
          centerObjectH: function(object) {
            return this._centerObject(object, new fabric.Point(this.getCenter().left, object.getCenterPoint().y));
          },
          /**
           * Centers object vertically in the canvas
           * @param {fabric.Object} object Object to center vertically
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          centerObjectV: function(object) {
            return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenter().top));
          },
          /**
           * Centers object vertically and horizontally in the canvas
           * @param {fabric.Object} object Object to center vertically and horizontally
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          centerObject: function(object) {
            var center = this.getCenter();
            return this._centerObject(object, new fabric.Point(center.left, center.top));
          },
          /**
           * Centers object vertically and horizontally in the viewport
           * @param {fabric.Object} object Object to center vertically and horizontally
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          viewportCenterObject: function(object) {
            var vpCenter = this.getVpCenter();
            return this._centerObject(object, vpCenter);
          },
          /**
           * Centers object horizontally in the viewport, object.top is unchanged
           * @param {fabric.Object} object Object to center vertically and horizontally
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          viewportCenterObjectH: function(object) {
            var vpCenter = this.getVpCenter();
            this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));
            return this;
          },
          /**
           * Centers object Vertically in the viewport, object.top is unchanged
           * @param {fabric.Object} object Object to center vertically and horizontally
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          viewportCenterObjectV: function(object) {
            var vpCenter = this.getVpCenter();
            return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));
          },
          /**
           * Calculate the point in canvas that correspond to the center of actual viewport.
           * @return {fabric.Point} vpCenter, viewport center
           * @chainable
           */
          getVpCenter: function() {
            var center = this.getCenter(), iVpt = invertTransform(this.viewportTransform);
            return transformPoint({ x: center.left, y: center.top }, iVpt);
          },
          /**
           * @private
           * @param {fabric.Object} object Object to center
           * @param {fabric.Point} center Center point
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          _centerObject: function(object, center) {
            object.setPositionByOrigin(center, "center", "center");
            object.setCoords();
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          /**
           * Returns dataless JSON representation of canvas
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {String} json string
           */
          toDatalessJSON: function(propertiesToInclude) {
            return this.toDatalessObject(propertiesToInclude);
          },
          /**
           * Returns object representation of canvas
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            return this._toObjectMethod("toObject", propertiesToInclude);
          },
          /**
           * Returns dataless object representation of canvas
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toDatalessObject: function(propertiesToInclude) {
            return this._toObjectMethod("toDatalessObject", propertiesToInclude);
          },
          /**
           * @private
           */
          _toObjectMethod: function(methodName, propertiesToInclude) {
            var clipPath = this.clipPath, data = {
              version: fabric.version,
              objects: this._toObjects(methodName, propertiesToInclude)
            };
            if (clipPath && !clipPath.excludeFromExport) {
              data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);
            }
            extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));
            fabric.util.populateWithProperties(this, data, propertiesToInclude);
            return data;
          },
          /**
           * @private
           */
          _toObjects: function(methodName, propertiesToInclude) {
            return this._objects.filter(function(object) {
              return !object.excludeFromExport;
            }).map(function(instance) {
              return this._toObject(instance, methodName, propertiesToInclude);
            }, this);
          },
          /**
           * @private
           */
          _toObject: function(instance, methodName, propertiesToInclude) {
            var originalValue;
            if (!this.includeDefaultValues) {
              originalValue = instance.includeDefaultValues;
              instance.includeDefaultValues = false;
            }
            var object = instance[methodName](propertiesToInclude);
            if (!this.includeDefaultValues) {
              instance.includeDefaultValues = originalValue;
            }
            return object;
          },
          /**
           * @private
           */
          __serializeBgOverlay: function(methodName, propertiesToInclude) {
            var data = {}, bgImage = this.backgroundImage, overlayImage = this.overlayImage, bgColor = this.backgroundColor, overlayColor = this.overlayColor;
            if (bgColor && bgColor.toObject) {
              if (!bgColor.excludeFromExport) {
                data.background = bgColor.toObject(propertiesToInclude);
              }
            } else if (bgColor) {
              data.background = bgColor;
            }
            if (overlayColor && overlayColor.toObject) {
              if (!overlayColor.excludeFromExport) {
                data.overlay = overlayColor.toObject(propertiesToInclude);
              }
            } else if (overlayColor) {
              data.overlay = overlayColor;
            }
            if (bgImage && !bgImage.excludeFromExport) {
              data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);
            }
            if (overlayImage && !overlayImage.excludeFromExport) {
              data.overlayImage = this._toObject(overlayImage, methodName, propertiesToInclude);
            }
            return data;
          },
          /* _TO_SVG_START_ */
          /**
           * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,
           * a zoomed canvas will then produce zoomed SVG output.
           * @type Boolean
           * @default
           */
          svgViewportTransformation: true,
          /**
           * Returns SVG representation of canvas
           * @function
           * @param {Object} [options] Options object for SVG output
           * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included
           * @param {Object} [options.viewBox] SVG viewbox object
           * @param {Number} [options.viewBox.x] x-coordinate of viewbox
           * @param {Number} [options.viewBox.y] y-coordinate of viewbox
           * @param {Number} [options.viewBox.width] Width of viewbox
           * @param {Number} [options.viewBox.height] Height of viewbox
           * @param {String} [options.encoding=UTF-8] Encoding of SVG output
           * @param {String} [options.width] desired width of svg with or without units
           * @param {String} [options.height] desired height of svg with or without units
           * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.
           * @return {String} SVG string
           * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
           * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}
           * @example <caption>Normal SVG output</caption>
           * var svg = canvas.toSVG();
           * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>
           * var svg = canvas.toSVG({suppressPreamble: true});
           * @example <caption>SVG output with viewBox attribute</caption>
           * var svg = canvas.toSVG({
           *   viewBox: {
           *     x: 100,
           *     y: 100,
           *     width: 200,
           *     height: 300
           *   }
           * });
           * @example <caption>SVG output with different encoding (default: UTF-8)</caption>
           * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});
           * @example <caption>Modify SVG output with reviver function</caption>
           * var svg = canvas.toSVG(null, function(svg) {
           *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');
           * });
           */
          toSVG: function(options, reviver) {
            options || (options = {});
            options.reviver = reviver;
            var markup = [];
            this._setSVGPreamble(markup, options);
            this._setSVGHeader(markup, options);
            if (this.clipPath) {
              markup.push('<g clip-path="url(#' + this.clipPath.clipPathId + ')" >\n');
            }
            this._setSVGBgOverlayColor(markup, "background");
            this._setSVGBgOverlayImage(markup, "backgroundImage", reviver);
            this._setSVGObjects(markup, reviver);
            if (this.clipPath) {
              markup.push("</g>\n");
            }
            this._setSVGBgOverlayColor(markup, "overlay");
            this._setSVGBgOverlayImage(markup, "overlayImage", reviver);
            markup.push("</svg>");
            return markup.join("");
          },
          /**
           * @private
           */
          _setSVGPreamble: function(markup, options) {
            if (options.suppressPreamble) {
              return;
            }
            markup.push(
              '<?xml version="1.0" encoding="',
              options.encoding || "UTF-8",
              '" standalone="no" ?>\n',
              '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ',
              '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n'
            );
          },
          /**
           * @private
           */
          _setSVGHeader: function(markup, options) {
            var width = options.width || this.width, height = options.height || this.height, vpt, viewBox = 'viewBox="0 0 ' + this.width + " " + this.height + '" ', NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
            if (options.viewBox) {
              viewBox = 'viewBox="' + options.viewBox.x + " " + options.viewBox.y + " " + options.viewBox.width + " " + options.viewBox.height + '" ';
            } else {
              if (this.svgViewportTransformation) {
                vpt = this.viewportTransform;
                viewBox = 'viewBox="' + toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + " " + toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + " " + toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + " " + toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '" ';
              }
            }
            markup.push(
              "<svg ",
              'xmlns="http://www.w3.org/2000/svg" ',
              'xmlns:xlink="http://www.w3.org/1999/xlink" ',
              'version="1.1" ',
              'width="',
              width,
              '" ',
              'height="',
              height,
              '" ',
              viewBox,
              'xml:space="preserve">\n',
              "<desc>Created with Fabric.js ",
              fabric.version,
              "</desc>\n",
              "<defs>\n",
              this.createSVGFontFacesMarkup(),
              this.createSVGRefElementsMarkup(),
              this.createSVGClipPathMarkup(options),
              "</defs>\n"
            );
          },
          createSVGClipPathMarkup: function(options) {
            var clipPath = this.clipPath;
            if (clipPath) {
              clipPath.clipPathId = "CLIPPATH_" + fabric.Object.__uid++;
              return '<clipPath id="' + clipPath.clipPathId + '" >\n' + this.clipPath.toClipPathSVG(options.reviver) + "</clipPath>\n";
            }
            return "";
          },
          /**
           * Creates markup containing SVG referenced elements like patterns, gradients etc.
           * @return {String}
           */
          createSVGRefElementsMarkup: function() {
            var _this = this, markup = ["background", "overlay"].map(function(prop) {
              var fill = _this[prop + "Color"];
              if (fill && fill.toLive) {
                var shouldTransform = _this[prop + "Vpt"], vpt = _this.viewportTransform, object = {
                  width: _this.width / (shouldTransform ? vpt[0] : 1),
                  height: _this.height / (shouldTransform ? vpt[3] : 1)
                };
                return fill.toSVG(
                  object,
                  { additionalTransform: shouldTransform ? fabric.util.matrixToSVG(vpt) : "" }
                );
              }
            });
            return markup.join("");
          },
          /**
           * Creates markup containing SVG font faces,
           * font URLs for font faces must be collected by developers
           * and are not extracted from the DOM by fabricjs
           * @param {Array} objects Array of fabric objects
           * @return {String}
           */
          createSVGFontFacesMarkup: function() {
            var markup = "", fontList = {}, obj, fontFamily, style, row, rowIndex, _char, charIndex, i2, len, fontPaths = fabric.fontPaths, objects = [];
            this._objects.forEach(function add(object) {
              objects.push(object);
              if (object._objects) {
                object._objects.forEach(add);
              }
            });
            for (i2 = 0, len = objects.length; i2 < len; i2++) {
              obj = objects[i2];
              fontFamily = obj.fontFamily;
              if (obj.type.indexOf("text") === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {
                continue;
              }
              fontList[fontFamily] = true;
              if (!obj.styles) {
                continue;
              }
              style = obj.styles;
              for (rowIndex in style) {
                row = style[rowIndex];
                for (charIndex in row) {
                  _char = row[charIndex];
                  fontFamily = _char.fontFamily;
                  if (!fontList[fontFamily] && fontPaths[fontFamily]) {
                    fontList[fontFamily] = true;
                  }
                }
              }
            }
            for (var j2 in fontList) {
              markup += [
                "		@font-face {\n",
                "			font-family: '",
                j2,
                "';\n",
                "			src: url('",
                fontPaths[j2],
                "');\n",
                "		}\n"
              ].join("");
            }
            if (markup) {
              markup = [
                '	<style type="text/css">',
                "<![CDATA[\n",
                markup,
                "]]>",
                "</style>\n"
              ].join("");
            }
            return markup;
          },
          /**
           * @private
           */
          _setSVGObjects: function(markup, reviver) {
            var instance, i2, len, objects = this._objects;
            for (i2 = 0, len = objects.length; i2 < len; i2++) {
              instance = objects[i2];
              if (instance.excludeFromExport) {
                continue;
              }
              this._setSVGObject(markup, instance, reviver);
            }
          },
          /**
           * @private
           */
          _setSVGObject: function(markup, instance, reviver) {
            markup.push(instance.toSVG(reviver));
          },
          /**
           * @private
           */
          _setSVGBgOverlayImage: function(markup, property, reviver) {
            if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {
              markup.push(this[property].toSVG(reviver));
            }
          },
          /**
           * @private
           */
          _setSVGBgOverlayColor: function(markup, property) {
            var filler = this[property + "Color"], vpt = this.viewportTransform, finalWidth = this.width, finalHeight = this.height;
            if (!filler) {
              return;
            }
            if (filler.toLive) {
              var repeat = filler.repeat, iVpt = fabric.util.invertTransform(vpt), shouldInvert = this[property + "Vpt"], additionalTransform = shouldInvert ? fabric.util.matrixToSVG(iVpt) : "";
              markup.push(
                '<rect transform="' + additionalTransform + " translate(",
                finalWidth / 2,
                ",",
                finalHeight / 2,
                ')"',
                ' x="',
                filler.offsetX - finalWidth / 2,
                '" y="',
                filler.offsetY - finalHeight / 2,
                '" ',
                'width="',
                repeat === "repeat-y" || repeat === "no-repeat" ? filler.source.width : finalWidth,
                '" height="',
                repeat === "repeat-x" || repeat === "no-repeat" ? filler.source.height : finalHeight,
                '" fill="url(#SVGID_' + filler.id + ')"',
                "></rect>\n"
              );
            } else {
              markup.push(
                '<rect x="0" y="0" width="100%" height="100%" ',
                'fill="',
                filler,
                '"',
                "></rect>\n"
              );
            }
          },
          /* _TO_SVG_END_ */
          /**
           * Moves an object or the objects of a multiple selection
           * to the bottom of the stack of drawn objects
           * @param {fabric.Object} object Object to send to back
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          sendToBack: function(object) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i2, obj, objs;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i2 = objs.length; i2--; ) {
                obj = objs[i2];
                removeFromArray(this._objects, obj);
                this._objects.unshift(obj);
              }
            } else {
              removeFromArray(this._objects, object);
              this._objects.unshift(object);
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          /**
           * Moves an object or the objects of a multiple selection
           * to the top of the stack of drawn objects
           * @param {fabric.Object} object Object to send
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          bringToFront: function(object) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i2, obj, objs;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i2 = 0; i2 < objs.length; i2++) {
                obj = objs[i2];
                removeFromArray(this._objects, obj);
                this._objects.push(obj);
              }
            } else {
              removeFromArray(this._objects, object);
              this._objects.push(object);
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          /**
           * Moves an object or a selection down in stack of drawn objects
           * An optional parameter, intersecting allows to move the object in behind
           * the first intersecting object. Where intersection is calculated with
           * bounding box. If no intersection is found, there will not be change in the
           * stack.
           * @param {fabric.Object} object Object to send
           * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          sendBackwards: function(object, intersecting) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i2, obj, idx, newIdx, objs, objsMoved = 0;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i2 = 0; i2 < objs.length; i2++) {
                obj = objs[i2];
                idx = this._objects.indexOf(obj);
                if (idx > 0 + objsMoved) {
                  newIdx = idx - 1;
                  removeFromArray(this._objects, obj);
                  this._objects.splice(newIdx, 0, obj);
                }
                objsMoved++;
              }
            } else {
              idx = this._objects.indexOf(object);
              if (idx !== 0) {
                newIdx = this._findNewLowerIndex(object, idx, intersecting);
                removeFromArray(this._objects, object);
                this._objects.splice(newIdx, 0, object);
              }
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          /**
           * @private
           */
          _findNewLowerIndex: function(object, idx, intersecting) {
            var newIdx, i2;
            if (intersecting) {
              newIdx = idx;
              for (i2 = idx - 1; i2 >= 0; --i2) {
                var isIntersecting = object.intersectsWithObject(this._objects[i2]) || object.isContainedWithinObject(this._objects[i2]) || this._objects[i2].isContainedWithinObject(object);
                if (isIntersecting) {
                  newIdx = i2;
                  break;
                }
              }
            } else {
              newIdx = idx - 1;
            }
            return newIdx;
          },
          /**
           * Moves an object or a selection up in stack of drawn objects
           * An optional parameter, intersecting allows to move the object in front
           * of the first intersecting object. Where intersection is calculated with
           * bounding box. If no intersection is found, there will not be change in the
           * stack.
           * @param {fabric.Object} object Object to send
           * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          bringForward: function(object, intersecting) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i2, obj, idx, newIdx, objs, objsMoved = 0;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i2 = objs.length; i2--; ) {
                obj = objs[i2];
                idx = this._objects.indexOf(obj);
                if (idx < this._objects.length - 1 - objsMoved) {
                  newIdx = idx + 1;
                  removeFromArray(this._objects, obj);
                  this._objects.splice(newIdx, 0, obj);
                }
                objsMoved++;
              }
            } else {
              idx = this._objects.indexOf(object);
              if (idx !== this._objects.length - 1) {
                newIdx = this._findNewUpperIndex(object, idx, intersecting);
                removeFromArray(this._objects, object);
                this._objects.splice(newIdx, 0, object);
              }
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          /**
           * @private
           */
          _findNewUpperIndex: function(object, idx, intersecting) {
            var newIdx, i2, len;
            if (intersecting) {
              newIdx = idx;
              for (i2 = idx + 1, len = this._objects.length; i2 < len; ++i2) {
                var isIntersecting = object.intersectsWithObject(this._objects[i2]) || object.isContainedWithinObject(this._objects[i2]) || this._objects[i2].isContainedWithinObject(object);
                if (isIntersecting) {
                  newIdx = i2;
                  break;
                }
              }
            } else {
              newIdx = idx + 1;
            }
            return newIdx;
          },
          /**
           * Moves an object to specified level in stack of drawn objects
           * @param {fabric.Object} object Object to send
           * @param {Number} index Position to move to
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          moveTo: function(object, index) {
            removeFromArray(this._objects, object);
            this._objects.splice(index, 0, object);
            return this.renderOnAddRemove && this.requestRenderAll();
          },
          /**
           * Clears a canvas element and dispose objects
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          dispose: function() {
            if (this.isRendering) {
              fabric.util.cancelAnimFrame(this.isRendering);
              this.isRendering = 0;
            }
            this.forEachObject(function(object) {
              object.dispose && object.dispose();
            });
            this._objects = [];
            if (this.backgroundImage && this.backgroundImage.dispose) {
              this.backgroundImage.dispose();
            }
            this.backgroundImage = null;
            if (this.overlayImage && this.overlayImage.dispose) {
              this.overlayImage.dispose();
            }
            this.overlayImage = null;
            this._iTextInstances = null;
            this.contextContainer = null;
            this.lowerCanvasEl.classList.remove("lower-canvas");
            this.lowerCanvasEl.style = this._originalCanvasStyle;
            delete this._originalCanvasStyle;
            this.lowerCanvasEl.setAttribute("width", this.width);
            this.lowerCanvasEl.setAttribute("height", this.height);
            fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);
            this.lowerCanvasEl = void 0;
            return this;
          },
          /**
           * Returns a string representation of an instance
           * @return {String} string representation of an instance
           */
          toString: function() {
            return "#<fabric.Canvas (" + this.complexity() + "): { objects: " + this._objects.length + " }>";
          }
        }
      );
      extend(fabric.StaticCanvas.prototype, fabric.Observable);
      extend(fabric.StaticCanvas.prototype, fabric.Collection);
      extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);
      extend(
        fabric.StaticCanvas,
        /** @lends fabric.StaticCanvas */
        {
          /**
           * @static
           * @type String
           * @default
           */
          EMPTY_JSON: '{"objects": [], "background": "white"}',
          /**
           * Provides a way to check support of some of the canvas methods
           * (either those of HTMLCanvasElement itself, or rendering context)
           *
           * @param {String} methodName Method to check support for;
           *                            Could be one of "setLineDash"
           * @return {Boolean | null} `true` if method is supported (or at least exists),
           *                          `null` if canvas element or context can not be initialized
           */
          supports: function(methodName) {
            var el = createCanvasElement();
            if (!el || !el.getContext) {
              return null;
            }
            var ctx = el.getContext("2d");
            if (!ctx) {
              return null;
            }
            switch (methodName) {
              case "setLineDash":
                return typeof ctx.setLineDash !== "undefined";
              default:
                return null;
            }
          }
        }
      );
      fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;
      if (fabric.isLikelyNode) {
        fabric.StaticCanvas.prototype.createPNGStream = function() {
          var impl = getNodeCanvas(this.lowerCanvasEl);
          return impl && impl.createPNGStream();
        };
        fabric.StaticCanvas.prototype.createJPEGStream = function(opts) {
          var impl = getNodeCanvas(this.lowerCanvasEl);
          return impl && impl.createJPEGStream(opts);
        };
      }
    })();
    fabric.BaseBrush = fabric.util.createClass(
      /** @lends fabric.BaseBrush.prototype */
      {
        /**
         * Color of a brush
         * @type String
         * @default
         */
        color: "rgb(0, 0, 0)",
        /**
         * Width of a brush, has to be a Number, no string literals
         * @type Number
         * @default
         */
        width: 1,
        /**
         * Shadow object representing shadow of this shape.
         * <b>Backwards incompatibility note:</b> This property replaces "shadowColor" (String), "shadowOffsetX" (Number),
         * "shadowOffsetY" (Number) and "shadowBlur" (Number) since v1.2.12
         * @type fabric.Shadow
         * @default
         */
        shadow: null,
        /**
         * Line endings style of a brush (one of "butt", "round", "square")
         * @type String
         * @default
         */
        strokeLineCap: "round",
        /**
         * Corner style of a brush (one of "bevel", "round", "miter")
         * @type String
         * @default
         */
        strokeLineJoin: "round",
        /**
         * Maximum miter length (used for strokeLineJoin = "miter") of a brush's
         * @type Number
         * @default
         */
        strokeMiterLimit: 10,
        /**
         * Stroke Dash Array.
         * @type Array
         * @default
         */
        strokeDashArray: null,
        /**
         * When `true`, the free drawing is limited to the whiteboard size. Default to false.
         * @type Boolean
         * @default false
        */
        limitedToCanvasSize: false,
        /**
         * Sets brush styles
         * @private
         */
        _setBrushStyles: function() {
          var ctx = this.canvas.contextTop;
          ctx.strokeStyle = this.color;
          ctx.lineWidth = this.width;
          ctx.lineCap = this.strokeLineCap;
          ctx.miterLimit = this.strokeMiterLimit;
          ctx.lineJoin = this.strokeLineJoin;
          ctx.setLineDash(this.strokeDashArray || []);
        },
        /**
         * Sets the transformation on given context
         * @param {RenderingContext2d} ctx context to render on
         * @private
         */
        _saveAndTransform: function(ctx) {
          var v2 = this.canvas.viewportTransform;
          ctx.save();
          ctx.transform(v2[0], v2[1], v2[2], v2[3], v2[4], v2[5]);
        },
        /**
         * Sets brush shadow styles
         * @private
         */
        _setShadow: function() {
          if (!this.shadow) {
            return;
          }
          var canvas = this.canvas, shadow = this.shadow, ctx = canvas.contextTop, zoom = canvas.getZoom();
          if (canvas && canvas._isRetinaScaling()) {
            zoom *= fabric.devicePixelRatio;
          }
          ctx.shadowColor = shadow.color;
          ctx.shadowBlur = shadow.blur * zoom;
          ctx.shadowOffsetX = shadow.offsetX * zoom;
          ctx.shadowOffsetY = shadow.offsetY * zoom;
        },
        needsFullRender: function() {
          var color = new fabric.Color(this.color);
          return color.getAlpha() < 1 || !!this.shadow;
        },
        /**
         * Removes brush shadow styles
         * @private
         */
        _resetShadow: function() {
          var ctx = this.canvas.contextTop;
          ctx.shadowColor = "";
          ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
        },
        /**
         * Check is pointer is outside canvas boundaries
         * @param {Object} pointer
         * @private
        */
        _isOutSideCanvas: function(pointer) {
          return pointer.x < 0 || pointer.x > this.canvas.getWidth() || pointer.y < 0 || pointer.y > this.canvas.getHeight();
        }
      }
    );
    (function() {
      fabric.PencilBrush = fabric.util.createClass(
        fabric.BaseBrush,
        /** @lends fabric.PencilBrush.prototype */
        {
          /**
           * Discard points that are less than `decimate` pixel distant from each other
           * @type Number
           * @default 0.4
           */
          decimate: 0.4,
          /**
           * Constructor
           * @param {fabric.Canvas} canvas
           * @return {fabric.PencilBrush} Instance of a pencil brush
           */
          initialize: function(canvas) {
            this.canvas = canvas;
            this._points = [];
          },
          /**
           * Invoked inside on mouse down and mouse move
           * @param {Object} pointer
           */
          _drawSegment: function(ctx, p1, p2) {
            var midPoint = p1.midPointFrom(p2);
            ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);
            return midPoint;
          },
          /**
           * Invoked on mouse down
           * @param {Object} pointer
           */
          onMouseDown: function(pointer, options) {
            if (!this.canvas._isMainEvent(options.e)) {
              return;
            }
            this._prepareForDrawing(pointer);
            this._captureDrawingPath(pointer);
            this._render();
          },
          /**
           * Invoked on mouse move
           * @param {Object} pointer
           */
          onMouseMove: function(pointer, options) {
            if (!this.canvas._isMainEvent(options.e)) {
              return;
            }
            if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
              return;
            }
            if (this._captureDrawingPath(pointer) && this._points.length > 1) {
              if (this.needsFullRender()) {
                this.canvas.clearContext(this.canvas.contextTop);
                this._render();
              } else {
                var points = this._points, length = points.length, ctx = this.canvas.contextTop;
                this._saveAndTransform(ctx);
                if (this.oldEnd) {
                  ctx.beginPath();
                  ctx.moveTo(this.oldEnd.x, this.oldEnd.y);
                }
                this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);
                ctx.stroke();
                ctx.restore();
              }
            }
          },
          /**
           * Invoked on mouse up
           */
          onMouseUp: function(options) {
            if (!this.canvas._isMainEvent(options.e)) {
              return true;
            }
            this.oldEnd = void 0;
            this._finalizeAndAddPath();
            return false;
          },
          /**
           * @private
           * @param {Object} pointer Actual mouse position related to the canvas.
           */
          _prepareForDrawing: function(pointer) {
            var p2 = new fabric.Point(pointer.x, pointer.y);
            this._reset();
            this._addPoint(p2);
            this.canvas.contextTop.moveTo(p2.x, p2.y);
          },
          /**
           * @private
           * @param {fabric.Point} point Point to be added to points array
           */
          _addPoint: function(point) {
            if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {
              return false;
            }
            this._points.push(point);
            return true;
          },
          /**
           * Clear points array and set contextTop canvas style.
           * @private
           */
          _reset: function() {
            this._points = [];
            this._setBrushStyles();
            this._setShadow();
          },
          /**
           * @private
           * @param {Object} pointer Actual mouse position related to the canvas.
           */
          _captureDrawingPath: function(pointer) {
            var pointerPoint = new fabric.Point(pointer.x, pointer.y);
            return this._addPoint(pointerPoint);
          },
          /**
           * Draw a smooth path on the topCanvas using quadraticCurveTo
           * @private
           */
          _render: function() {
            var ctx = this.canvas.contextTop, i2, len, p1 = this._points[0], p2 = this._points[1];
            this._saveAndTransform(ctx);
            ctx.beginPath();
            if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {
              var width = this.width / 1e3;
              p1 = new fabric.Point(p1.x, p1.y);
              p2 = new fabric.Point(p2.x, p2.y);
              p1.x -= width;
              p2.x += width;
            }
            ctx.moveTo(p1.x, p1.y);
            for (i2 = 1, len = this._points.length; i2 < len; i2++) {
              this._drawSegment(ctx, p1, p2);
              p1 = this._points[i2];
              p2 = this._points[i2 + 1];
            }
            ctx.lineTo(p1.x, p1.y);
            ctx.stroke();
            ctx.restore();
          },
          /**
           * Converts points to SVG path
           * @param {Array} points Array of points
           * @return {(string|number)[][]} SVG path commands
           */
          convertPointsToSVGPath: function(points) {
            var correction = this.width / 1e3;
            return fabric.util.getSmoothPathFromPoints(points, correction);
          },
          /**
           * @private
           * @param {(string|number)[][]} pathData SVG path commands
           * @returns {boolean}
           */
          _isEmptySVGPath: function(pathData) {
            var pathString = fabric.util.joinPath(pathData);
            return pathString === "M 0 0 Q 0 0 0 0 L 0 0";
          },
          /**
           * Creates fabric.Path object to add on canvas
           * @param {(string|number)[][]} pathData Path data
           * @return {fabric.Path} Path to add on canvas
           */
          createPath: function(pathData) {
            var path = new fabric.Path(pathData, {
              fill: null,
              stroke: this.color,
              strokeWidth: this.width,
              strokeLineCap: this.strokeLineCap,
              strokeMiterLimit: this.strokeMiterLimit,
              strokeLineJoin: this.strokeLineJoin,
              strokeDashArray: this.strokeDashArray
            });
            if (this.shadow) {
              this.shadow.affectStroke = true;
              path.shadow = new fabric.Shadow(this.shadow);
            }
            return path;
          },
          /**
           * Decimate points array with the decimate value
           */
          decimatePoints: function(points, distance) {
            if (points.length <= 2) {
              return points;
            }
            var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2), i2, l2 = points.length - 1, lastPoint = points[0], newPoints = [lastPoint], cDistance;
            for (i2 = 1; i2 < l2 - 1; i2++) {
              cDistance = Math.pow(lastPoint.x - points[i2].x, 2) + Math.pow(lastPoint.y - points[i2].y, 2);
              if (cDistance >= adjustedDistance) {
                lastPoint = points[i2];
                newPoints.push(lastPoint);
              }
            }
            newPoints.push(points[l2]);
            return newPoints;
          },
          /**
           * On mouseup after drawing the path on contextTop canvas
           * we use the points captured to create an new fabric path object
           * and add it to the fabric canvas.
           */
          _finalizeAndAddPath: function() {
            var ctx = this.canvas.contextTop;
            ctx.closePath();
            if (this.decimate) {
              this._points = this.decimatePoints(this._points, this.decimate);
            }
            var pathData = this.convertPointsToSVGPath(this._points);
            if (this._isEmptySVGPath(pathData)) {
              this.canvas.requestRenderAll();
              return;
            }
            var path = this.createPath(pathData);
            this.canvas.clearContext(this.canvas.contextTop);
            this.canvas.fire("before:path:created", { path });
            this.canvas.add(path);
            this.canvas.requestRenderAll();
            path.setCoords();
            this._resetShadow();
            this.canvas.fire("path:created", { path });
          }
        }
      );
    })();
    fabric.CircleBrush = fabric.util.createClass(
      fabric.BaseBrush,
      /** @lends fabric.CircleBrush.prototype */
      {
        /**
         * Width of a brush
         * @type Number
         * @default
         */
        width: 10,
        /**
         * Constructor
         * @param {fabric.Canvas} canvas
         * @return {fabric.CircleBrush} Instance of a circle brush
         */
        initialize: function(canvas) {
          this.canvas = canvas;
          this.points = [];
        },
        /**
         * Invoked inside on mouse down and mouse move
         * @param {Object} pointer
         */
        drawDot: function(pointer) {
          var point = this.addPoint(pointer), ctx = this.canvas.contextTop;
          this._saveAndTransform(ctx);
          this.dot(ctx, point);
          ctx.restore();
        },
        dot: function(ctx, point) {
          ctx.fillStyle = point.fill;
          ctx.beginPath();
          ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);
          ctx.closePath();
          ctx.fill();
        },
        /**
         * Invoked on mouse down
         */
        onMouseDown: function(pointer) {
          this.points.length = 0;
          this.canvas.clearContext(this.canvas.contextTop);
          this._setShadow();
          this.drawDot(pointer);
        },
        /**
         * Render the full state of the brush
         * @private
         */
        _render: function() {
          var ctx = this.canvas.contextTop, i2, len, points = this.points;
          this._saveAndTransform(ctx);
          for (i2 = 0, len = points.length; i2 < len; i2++) {
            this.dot(ctx, points[i2]);
          }
          ctx.restore();
        },
        /**
         * Invoked on mouse move
         * @param {Object} pointer
         */
        onMouseMove: function(pointer) {
          if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
            return;
          }
          if (this.needsFullRender()) {
            this.canvas.clearContext(this.canvas.contextTop);
            this.addPoint(pointer);
            this._render();
          } else {
            this.drawDot(pointer);
          }
        },
        /**
         * Invoked on mouse up
         */
        onMouseUp: function() {
          var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i2, len;
          this.canvas.renderOnAddRemove = false;
          var circles = [];
          for (i2 = 0, len = this.points.length; i2 < len; i2++) {
            var point = this.points[i2], circle = new fabric.Circle({
              radius: point.radius,
              left: point.x,
              top: point.y,
              originX: "center",
              originY: "center",
              fill: point.fill
            });
            this.shadow && (circle.shadow = new fabric.Shadow(this.shadow));
            circles.push(circle);
          }
          var group = new fabric.Group(circles);
          group.canvas = this.canvas;
          this.canvas.fire("before:path:created", { path: group });
          this.canvas.add(group);
          this.canvas.fire("path:created", { path: group });
          this.canvas.clearContext(this.canvas.contextTop);
          this._resetShadow();
          this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
          this.canvas.requestRenderAll();
        },
        /**
         * @param {Object} pointer
         * @return {fabric.Point} Just added pointer point
         */
        addPoint: function(pointer) {
          var pointerPoint = new fabric.Point(pointer.x, pointer.y), circleRadius = fabric.util.getRandomInt(
            Math.max(0, this.width - 20),
            this.width + 20
          ) / 2, circleColor = new fabric.Color(this.color).setAlpha(fabric.util.getRandomInt(0, 100) / 100).toRgba();
          pointerPoint.radius = circleRadius;
          pointerPoint.fill = circleColor;
          this.points.push(pointerPoint);
          return pointerPoint;
        }
      }
    );
    fabric.SprayBrush = fabric.util.createClass(
      fabric.BaseBrush,
      /** @lends fabric.SprayBrush.prototype */
      {
        /**
         * Width of a spray
         * @type Number
         * @default
         */
        width: 10,
        /**
         * Density of a spray (number of dots per chunk)
         * @type Number
         * @default
         */
        density: 20,
        /**
         * Width of spray dots
         * @type Number
         * @default
         */
        dotWidth: 1,
        /**
         * Width variance of spray dots
         * @type Number
         * @default
         */
        dotWidthVariance: 1,
        /**
         * Whether opacity of a dot should be random
         * @type Boolean
         * @default
         */
        randomOpacity: false,
        /**
         * Whether overlapping dots (rectangles) should be removed (for performance reasons)
         * @type Boolean
         * @default
         */
        optimizeOverlapping: true,
        /**
         * Constructor
         * @param {fabric.Canvas} canvas
         * @return {fabric.SprayBrush} Instance of a spray brush
         */
        initialize: function(canvas) {
          this.canvas = canvas;
          this.sprayChunks = [];
        },
        /**
         * Invoked on mouse down
         * @param {Object} pointer
         */
        onMouseDown: function(pointer) {
          this.sprayChunks.length = 0;
          this.canvas.clearContext(this.canvas.contextTop);
          this._setShadow();
          this.addSprayChunk(pointer);
          this.render(this.sprayChunkPoints);
        },
        /**
         * Invoked on mouse move
         * @param {Object} pointer
         */
        onMouseMove: function(pointer) {
          if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
            return;
          }
          this.addSprayChunk(pointer);
          this.render(this.sprayChunkPoints);
        },
        /**
         * Invoked on mouse up
         */
        onMouseUp: function() {
          var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;
          this.canvas.renderOnAddRemove = false;
          var rects = [];
          for (var i2 = 0, ilen = this.sprayChunks.length; i2 < ilen; i2++) {
            var sprayChunk = this.sprayChunks[i2];
            for (var j2 = 0, jlen = sprayChunk.length; j2 < jlen; j2++) {
              var rect = new fabric.Rect({
                width: sprayChunk[j2].width,
                height: sprayChunk[j2].width,
                left: sprayChunk[j2].x + 1,
                top: sprayChunk[j2].y + 1,
                originX: "center",
                originY: "center",
                fill: this.color
              });
              rects.push(rect);
            }
          }
          if (this.optimizeOverlapping) {
            rects = this._getOptimizedRects(rects);
          }
          var group = new fabric.Group(rects);
          this.shadow && group.set("shadow", new fabric.Shadow(this.shadow));
          this.canvas.fire("before:path:created", { path: group });
          this.canvas.add(group);
          this.canvas.fire("path:created", { path: group });
          this.canvas.clearContext(this.canvas.contextTop);
          this._resetShadow();
          this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
          this.canvas.requestRenderAll();
        },
        /**
         * @private
         * @param {Array} rects
         */
        _getOptimizedRects: function(rects) {
          var uniqueRects = {}, key, i2, len;
          for (i2 = 0, len = rects.length; i2 < len; i2++) {
            key = rects[i2].left + "" + rects[i2].top;
            if (!uniqueRects[key]) {
              uniqueRects[key] = rects[i2];
            }
          }
          var uniqueRectsArray = [];
          for (key in uniqueRects) {
            uniqueRectsArray.push(uniqueRects[key]);
          }
          return uniqueRectsArray;
        },
        /**
         * Render new chunk of spray brush
         */
        render: function(sprayChunk) {
          var ctx = this.canvas.contextTop, i2, len;
          ctx.fillStyle = this.color;
          this._saveAndTransform(ctx);
          for (i2 = 0, len = sprayChunk.length; i2 < len; i2++) {
            var point = sprayChunk[i2];
            if (typeof point.opacity !== "undefined") {
              ctx.globalAlpha = point.opacity;
            }
            ctx.fillRect(point.x, point.y, point.width, point.width);
          }
          ctx.restore();
        },
        /**
         * Render all spray chunks
         */
        _render: function() {
          var ctx = this.canvas.contextTop, i2, ilen;
          ctx.fillStyle = this.color;
          this._saveAndTransform(ctx);
          for (i2 = 0, ilen = this.sprayChunks.length; i2 < ilen; i2++) {
            this.render(this.sprayChunks[i2]);
          }
          ctx.restore();
        },
        /**
         * @param {Object} pointer
         */
        addSprayChunk: function(pointer) {
          this.sprayChunkPoints = [];
          var x, y2, width, radius = this.width / 2, i2;
          for (i2 = 0; i2 < this.density; i2++) {
            x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);
            y2 = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);
            if (this.dotWidthVariance) {
              width = fabric.util.getRandomInt(
                // bottom clamp width to 1
                Math.max(1, this.dotWidth - this.dotWidthVariance),
                this.dotWidth + this.dotWidthVariance
              );
            } else {
              width = this.dotWidth;
            }
            var point = new fabric.Point(x, y2);
            point.width = width;
            if (this.randomOpacity) {
              point.opacity = fabric.util.getRandomInt(0, 100) / 100;
            }
            this.sprayChunkPoints.push(point);
          }
          this.sprayChunks.push(this.sprayChunkPoints);
        }
      }
    );
    fabric.PatternBrush = fabric.util.createClass(
      fabric.PencilBrush,
      /** @lends fabric.PatternBrush.prototype */
      {
        getPatternSrc: function() {
          var dotWidth = 20, dotDistance = 5, patternCanvas = fabric.util.createCanvasElement(), patternCtx = patternCanvas.getContext("2d");
          patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;
          patternCtx.fillStyle = this.color;
          patternCtx.beginPath();
          patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);
          patternCtx.closePath();
          patternCtx.fill();
          return patternCanvas;
        },
        getPatternSrcFunction: function() {
          return String(this.getPatternSrc).replace("this.color", '"' + this.color + '"');
        },
        /**
         * Creates "pattern" instance property
         */
        getPattern: function() {
          return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), "repeat");
        },
        /**
         * Sets brush styles
         */
        _setBrushStyles: function() {
          this.callSuper("_setBrushStyles");
          this.canvas.contextTop.strokeStyle = this.getPattern();
        },
        /**
         * Creates path
         */
        createPath: function(pathData) {
          var path = this.callSuper("createPath", pathData), topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);
          path.stroke = new fabric.Pattern({
            source: this.source || this.getPatternSrcFunction(),
            offsetX: -topLeft.x,
            offsetY: -topLeft.y
          });
          return path;
        }
      }
    );
    (function() {
      var getPointer = fabric.util.getPointer, degreesToRadians = fabric.util.degreesToRadians, isTouchEvent = fabric.util.isTouchEvent;
      fabric.Canvas = fabric.util.createClass(
        fabric.StaticCanvas,
        /** @lends fabric.Canvas.prototype */
        {
          /**
           * Constructor
           * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
           * @param {Object} [options] Options object
           * @return {Object} thisArg
           */
          initialize: function(el, options) {
            options || (options = {});
            this.renderAndResetBound = this.renderAndReset.bind(this);
            this.requestRenderAllBound = this.requestRenderAll.bind(this);
            this._initStatic(el, options);
            this._initInteractive();
            this._createCacheCanvas();
          },
          /**
           * When true, objects can be transformed by one side (unproportionally)
           * when dragged on the corners that normally would not do that.
           * @type Boolean
           * @default
           * @since fabric 4.0 // changed name and default value
           */
          uniformScaling: true,
          /**
           * Indicates which key switches uniform scaling.
           * values: 'altKey', 'shiftKey', 'ctrlKey'.
           * If `null` or 'none' or any other string that is not a modifier key
           * feature is disabled.
           * totally wrong named. this sounds like `uniform scaling`
           * if Canvas.uniformScaling is true, pressing this will set it to false
           * and viceversa.
           * @since 1.6.2
           * @type String
           * @default
           */
          uniScaleKey: "shiftKey",
          /**
           * When true, objects use center point as the origin of scale transformation.
           * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
           * @since 1.3.4
           * @type Boolean
           * @default
           */
          centeredScaling: false,
          /**
           * When true, objects use center point as the origin of rotate transformation.
           * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
           * @since 1.3.4
           * @type Boolean
           * @default
           */
          centeredRotation: false,
          /**
           * Indicates which key enable centered Transform
           * values: 'altKey', 'shiftKey', 'ctrlKey'.
           * If `null` or 'none' or any other string that is not a modifier key
           * feature is disabled feature disabled.
           * @since 1.6.2
           * @type String
           * @default
           */
          centeredKey: "altKey",
          /**
           * Indicates which key enable alternate action on corner
           * values: 'altKey', 'shiftKey', 'ctrlKey'.
           * If `null` or 'none' or any other string that is not a modifier key
           * feature is disabled feature disabled.
           * @since 1.6.2
           * @type String
           * @default
           */
          altActionKey: "shiftKey",
          /**
           * Indicates that canvas is interactive. This property should not be changed.
           * @type Boolean
           * @default
           */
          interactive: true,
          /**
           * Indicates whether group selection should be enabled
           * @type Boolean
           * @default
           */
          selection: true,
          /**
           * Indicates which key or keys enable multiple click selection
           * Pass value as a string or array of strings
           * values: 'altKey', 'shiftKey', 'ctrlKey'.
           * If `null` or empty or containing any other string that is not a modifier key
           * feature is disabled.
           * @since 1.6.2
           * @type String|Array
           * @default
           */
          selectionKey: "shiftKey",
          /**
           * Indicates which key enable alternative selection
           * in case of target overlapping with active object
           * values: 'altKey', 'shiftKey', 'ctrlKey'.
           * For a series of reason that come from the general expectations on how
           * things should work, this feature works only for preserveObjectStacking true.
           * If `null` or 'none' or any other string that is not a modifier key
           * feature is disabled.
           * @since 1.6.5
           * @type null|String
           * @default
           */
          altSelectionKey: null,
          /**
           * Color of selection
           * @type String
           * @default
           */
          selectionColor: "rgba(100, 100, 255, 0.3)",
          // blue
          /**
           * Default dash array pattern
           * If not empty the selection border is dashed
           * @type Array
           */
          selectionDashArray: [],
          /**
           * Color of the border of selection (usually slightly darker than color of selection itself)
           * @type String
           * @default
           */
          selectionBorderColor: "rgba(255, 255, 255, 0.3)",
          /**
           * Width of a line used in object/group selection
           * @type Number
           * @default
           */
          selectionLineWidth: 1,
          /**
           * Select only shapes that are fully contained in the dragged selection rectangle.
           * @type Boolean
           * @default
           */
          selectionFullyContained: false,
          /**
           * Default cursor value used when hovering over an object on canvas
           * @type String
           * @default
           */
          hoverCursor: "move",
          /**
           * Default cursor value used when moving an object on canvas
           * @type String
           * @default
           */
          moveCursor: "move",
          /**
           * Default cursor value used for the entire canvas
           * @type String
           * @default
           */
          defaultCursor: "default",
          /**
           * Cursor value used during free drawing
           * @type String
           * @default
           */
          freeDrawingCursor: "crosshair",
          /**
           * Cursor value used for rotation point
           * @type String
           * @default
           */
          rotationCursor: "crosshair",
          /**
           * Cursor value used for disabled elements ( corners with disabled action )
           * @type String
           * @since 2.0.0
           * @default
           */
          notAllowedCursor: "not-allowed",
          /**
           * Default element class that's given to wrapper (div) element of canvas
           * @type String
           * @default
           */
          containerClass: "canvas-container",
          /**
           * When true, object detection happens on per-pixel basis rather than on per-bounding-box
           * @type Boolean
           * @default
           */
          perPixelTargetFind: false,
          /**
           * Number of pixels around target pixel to tolerate (consider active) during object detection
           * @type Number
           * @default
           */
          targetFindTolerance: 0,
          /**
           * When true, target detection is skipped. Target detection will return always undefined.
           * click selection won't work anymore, events will fire with no targets.
           * if something is selected before setting it to true, it will be deselected at the first click.
           * area selection will still work. check the `selection` property too.
           * if you deactivate both, you should look into staticCanvas.
           * @type Boolean
           * @default
           */
          skipTargetFind: false,
          /**
           * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.
           * After mousedown, mousemove creates a shape,
           * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.
           * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}
           * @type Boolean
           * @default
           */
          isDrawingMode: false,
          /**
           * Indicates whether objects should remain in current stack position when selected.
           * When false objects are brought to top and rendered as part of the selection group
           * @type Boolean
           * @default
           */
          preserveObjectStacking: false,
          /**
           * Indicates the angle that an object will lock to while rotating.
           * @type Number
           * @since 1.6.7
           * @default
           */
          snapAngle: 0,
          /**
           * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.
           * When `null`, the snapThreshold will default to the snapAngle.
           * @type null|Number
           * @since 1.6.7
           * @default
           */
          snapThreshold: null,
          /**
           * Indicates if the right click on canvas can output the context menu or not
           * @type Boolean
           * @since 1.6.5
           * @default
           */
          stopContextMenu: false,
          /**
           * Indicates if the canvas can fire right click events
           * @type Boolean
           * @since 1.6.5
           * @default
           */
          fireRightClick: false,
          /**
           * Indicates if the canvas can fire middle click events
           * @type Boolean
           * @since 1.7.8
           * @default
           */
          fireMiddleClick: false,
          /**
           * Keep track of the subTargets for Mouse Events
           * @type fabric.Object[]
           */
          targets: [],
          /**
           * Keep track of the hovered target
           * @type fabric.Object
           * @private
           */
          _hoveredTarget: null,
          /**
           * hold the list of nested targets hovered
           * @type fabric.Object[]
           * @private
           */
          _hoveredTargets: [],
          /**
           * @private
           */
          _initInteractive: function() {
            this._currentTransform = null;
            this._groupSelector = null;
            this._initWrapperElement();
            this._createUpperCanvas();
            this._initEventListeners();
            this._initRetinaScaling();
            this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);
            this.calcOffset();
          },
          /**
           * Divides objects in two groups, one to render immediately
           * and one to render as activeGroup.
           * @return {Array} objects to render immediately and pushes the other in the activeGroup.
           */
          _chooseObjectsToRender: function() {
            var activeObjects = this.getActiveObjects(), object, objsToRender, activeGroupObjects;
            if (activeObjects.length > 0 && !this.preserveObjectStacking) {
              objsToRender = [];
              activeGroupObjects = [];
              for (var i2 = 0, length = this._objects.length; i2 < length; i2++) {
                object = this._objects[i2];
                if (activeObjects.indexOf(object) === -1) {
                  objsToRender.push(object);
                } else {
                  activeGroupObjects.push(object);
                }
              }
              if (activeObjects.length > 1) {
                this._activeObject._objects = activeGroupObjects;
              }
              objsToRender.push.apply(objsToRender, activeGroupObjects);
            } else {
              objsToRender = this._objects;
            }
            return objsToRender;
          },
          /**
           * Renders both the top canvas and the secondary container canvas.
           * @return {fabric.Canvas} instance
           * @chainable
           */
          renderAll: function() {
            if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {
              this.clearContext(this.contextTop);
              this.contextTopDirty = false;
            }
            if (this.hasLostContext) {
              this.renderTopLayer(this.contextTop);
            }
            var canvasToDrawOn = this.contextContainer;
            this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());
            return this;
          },
          renderTopLayer: function(ctx) {
            ctx.save();
            if (this.isDrawingMode && this._isCurrentlyDrawing) {
              this.freeDrawingBrush && this.freeDrawingBrush._render();
              this.contextTopDirty = true;
            }
            if (this.selection && this._groupSelector) {
              this._drawSelection(ctx);
              this.contextTopDirty = true;
            }
            ctx.restore();
          },
          /**
           * Method to render only the top canvas.
           * Also used to render the group selection box.
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          renderTop: function() {
            var ctx = this.contextTop;
            this.clearContext(ctx);
            this.renderTopLayer(ctx);
            this.fire("after:render");
            return this;
          },
          /**
           * @private
           */
          _normalizePointer: function(object, pointer) {
            var m2 = object.calcTransformMatrix(), invertedM = fabric.util.invertTransform(m2), vptPointer = this.restorePointerVpt(pointer);
            return fabric.util.transformPoint(vptPointer, invertedM);
          },
          /**
           * Returns true if object is transparent at a certain location
           * @param {fabric.Object} target Object to check
           * @param {Number} x Left coordinate
           * @param {Number} y Top coordinate
           * @return {Boolean}
           */
          isTargetTransparent: function(target, x, y2) {
            if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {
              var normalizedPointer = this._normalizePointer(target, { x, y: y2 }), targetRelativeX = Math.max(target.cacheTranslationX + normalizedPointer.x * target.zoomX, 0), targetRelativeY = Math.max(target.cacheTranslationY + normalizedPointer.y * target.zoomY, 0);
              var isTransparent = fabric.util.isTransparent(
                target._cacheContext,
                Math.round(targetRelativeX),
                Math.round(targetRelativeY),
                this.targetFindTolerance
              );
              return isTransparent;
            }
            var ctx = this.contextCache, originalColor = target.selectionBackgroundColor, v2 = this.viewportTransform;
            target.selectionBackgroundColor = "";
            this.clearContext(ctx);
            ctx.save();
            ctx.transform(v2[0], v2[1], v2[2], v2[3], v2[4], v2[5]);
            target.render(ctx);
            ctx.restore();
            target.selectionBackgroundColor = originalColor;
            var isTransparent = fabric.util.isTransparent(
              ctx,
              x,
              y2,
              this.targetFindTolerance
            );
            return isTransparent;
          },
          /**
           * takes an event and determines if selection key has been pressed
           * @private
           * @param {Event} e Event object
           */
          _isSelectionKeyPressed: function(e2) {
            var selectionKeyPressed = false;
            if (Object.prototype.toString.call(this.selectionKey) === "[object Array]") {
              selectionKeyPressed = !!this.selectionKey.find(function(key) {
                return e2[key] === true;
              });
            } else {
              selectionKeyPressed = e2[this.selectionKey];
            }
            return selectionKeyPressed;
          },
          /**
           * @private
           * @param {Event} e Event object
           * @param {fabric.Object} target
           */
          _shouldClearSelection: function(e2, target) {
            var activeObjects = this.getActiveObjects(), activeObject = this._activeObject;
            return !target || target && activeObject && activeObjects.length > 1 && activeObjects.indexOf(target) === -1 && activeObject !== target && !this._isSelectionKeyPressed(e2) || target && !target.evented || target && !target.selectable && activeObject && activeObject !== target;
          },
          /**
           * centeredScaling from object can't override centeredScaling from canvas.
           * this should be fixed, since object setting should take precedence over canvas.
           * also this should be something that will be migrated in the control properties.
           * as ability to define the origin of the transformation that the control provide.
           * @private
           * @param {fabric.Object} target
           * @param {String} action
           * @param {Boolean} altKey
           */
          _shouldCenterTransform: function(target, action, altKey) {
            if (!target) {
              return;
            }
            var centerTransform;
            if (action === "scale" || action === "scaleX" || action === "scaleY" || action === "resizing") {
              centerTransform = this.centeredScaling || target.centeredScaling;
            } else if (action === "rotate") {
              centerTransform = this.centeredRotation || target.centeredRotation;
            }
            return centerTransform ? !altKey : altKey;
          },
          /**
           * should disappear before release 4.0
           * @private
           */
          _getOriginFromCorner: function(target, corner) {
            var origin = {
              x: target.originX,
              y: target.originY
            };
            if (corner === "ml" || corner === "tl" || corner === "bl") {
              origin.x = "right";
            } else if (corner === "mr" || corner === "tr" || corner === "br") {
              origin.x = "left";
            }
            if (corner === "tl" || corner === "mt" || corner === "tr") {
              origin.y = "bottom";
            } else if (corner === "bl" || corner === "mb" || corner === "br") {
              origin.y = "top";
            }
            return origin;
          },
          /**
           * @private
           * @param {Boolean} alreadySelected true if target is already selected
           * @param {String} corner a string representing the corner ml, mr, tl ...
           * @param {Event} e Event object
           * @param {fabric.Object} [target] inserted back to help overriding. Unused
           */
          _getActionFromCorner: function(alreadySelected, corner, e2, target) {
            if (!corner || !alreadySelected) {
              return "drag";
            }
            var control = target.controls[corner];
            return control.getActionName(e2, control, target);
          },
          /**
           * @private
           * @param {Event} e Event object
           * @param {fabric.Object} target
           */
          _setupCurrentTransform: function(e2, target, alreadySelected) {
            if (!target) {
              return;
            }
            var pointer = this.getPointer(e2), corner = target.__corner, control = target.controls[corner], actionHandler = alreadySelected && corner ? control.getActionHandler(e2, target, control) : fabric.controlsUtils.dragHandler, action = this._getActionFromCorner(alreadySelected, corner, e2, target), origin = this._getOriginFromCorner(target, corner), altKey = e2[this.centeredKey], transform = {
              target,
              action,
              actionHandler,
              corner,
              scaleX: target.scaleX,
              scaleY: target.scaleY,
              skewX: target.skewX,
              skewY: target.skewY,
              // used by transation
              offsetX: pointer.x - target.left,
              offsetY: pointer.y - target.top,
              originX: origin.x,
              originY: origin.y,
              ex: pointer.x,
              ey: pointer.y,
              lastX: pointer.x,
              lastY: pointer.y,
              // unsure they are useful anymore.
              // left: target.left,
              // top: target.top,
              theta: degreesToRadians(target.angle),
              // end of unsure
              width: target.width * target.scaleX,
              shiftKey: e2.shiftKey,
              altKey,
              original: fabric.util.saveObjectTransform(target)
            };
            if (this._shouldCenterTransform(target, action, altKey)) {
              transform.originX = "center";
              transform.originY = "center";
            }
            transform.original.originX = origin.x;
            transform.original.originY = origin.y;
            this._currentTransform = transform;
            this._beforeTransform(e2);
          },
          /**
           * Set the cursor type of the canvas element
           * @param {String} value Cursor type of the canvas element.
           * @see http://www.w3.org/TR/css3-ui/#cursor
           */
          setCursor: function(value) {
            this.upperCanvasEl.style.cursor = value;
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx to draw the selection on
           */
          _drawSelection: function(ctx) {
            var selector = this._groupSelector, viewportStart = new fabric.Point(selector.ex, selector.ey), start = fabric.util.transformPoint(viewportStart, this.viewportTransform), viewportExtent = new fabric.Point(selector.ex + selector.left, selector.ey + selector.top), extent = fabric.util.transformPoint(viewportExtent, this.viewportTransform), minX = Math.min(start.x, extent.x), minY = Math.min(start.y, extent.y), maxX = Math.max(start.x, extent.x), maxY = Math.max(start.y, extent.y), strokeOffset = this.selectionLineWidth / 2;
            if (this.selectionColor) {
              ctx.fillStyle = this.selectionColor;
              ctx.fillRect(minX, minY, maxX - minX, maxY - minY);
            }
            if (!this.selectionLineWidth || !this.selectionBorderColor) {
              return;
            }
            ctx.lineWidth = this.selectionLineWidth;
            ctx.strokeStyle = this.selectionBorderColor;
            minX += strokeOffset;
            minY += strokeOffset;
            maxX -= strokeOffset;
            maxY -= strokeOffset;
            fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);
            ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);
          },
          /**
           * Method that determines what object we are clicking on
           * the skipGroup parameter is for internal use, is needed for shift+click action
           * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target
           * or the outside part of the corner.
           * @param {Event} e mouse event
           * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through
           * @return {fabric.Object} the target found
           */
          findTarget: function(e2, skipGroup) {
            if (this.skipTargetFind) {
              return;
            }
            var ignoreZoom = true, pointer = this.getPointer(e2, ignoreZoom), activeObject = this._activeObject, aObjects = this.getActiveObjects(), activeTarget, activeTargetSubs, isTouch = isTouchEvent(e2), shouldLookForActive = aObjects.length > 1 && !skipGroup || aObjects.length === 1;
            this.targets = [];
            if (shouldLookForActive && activeObject._findTargetCorner(pointer, isTouch)) {
              return activeObject;
            }
            if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
              return activeObject;
            }
            if (aObjects.length === 1 && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
              if (!this.preserveObjectStacking) {
                return activeObject;
              } else {
                activeTarget = activeObject;
                activeTargetSubs = this.targets;
                this.targets = [];
              }
            }
            var target = this._searchPossibleTargets(this._objects, pointer);
            if (e2[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {
              target = activeTarget;
              this.targets = activeTargetSubs;
            }
            return target;
          },
          /**
           * Checks point is inside the object.
           * @param {Object} [pointer] x,y object of point coordinates we want to check.
           * @param {fabric.Object} obj Object to test against
           * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.
           * @return {Boolean} true if point is contained within an area of given object
           * @private
           */
          _checkTarget: function(pointer, obj, globalPointer) {
            if (obj && obj.visible && obj.evented && // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
            // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html
            obj.containsPoint(pointer)) {
              if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {
                var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);
                if (!isTransparent) {
                  return true;
                }
              } else {
                return true;
              }
            }
          },
          /**
           * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted
           * @param {Array} [objects] objects array to look into
           * @param {Object} [pointer] x,y object of point coordinates we want to check.
           * @return {fabric.Object} object that contains pointer
           * @private
           */
          _searchPossibleTargets: function(objects, pointer) {
            var target, i2 = objects.length, subTarget;
            while (i2--) {
              var objToCheck = objects[i2];
              var pointerToUse = objToCheck.group ? this._normalizePointer(objToCheck.group, pointer) : pointer;
              if (this._checkTarget(pointerToUse, objToCheck, pointer)) {
                target = objects[i2];
                if (target.subTargetCheck && target instanceof fabric.Group) {
                  subTarget = this._searchPossibleTargets(target._objects, pointer);
                  subTarget && this.targets.push(subTarget);
                }
                break;
              }
            }
            return target;
          },
          /**
           * Returns pointer coordinates without the effect of the viewport
           * @param {Object} pointer with "x" and "y" number values
           * @return {Object} object with "x" and "y" number values
           */
          restorePointerVpt: function(pointer) {
            return fabric.util.transformPoint(
              pointer,
              fabric.util.invertTransform(this.viewportTransform)
            );
          },
          /**
           * Returns pointer coordinates relative to canvas.
           * Can return coordinates with or without viewportTransform.
           * ignoreZoom false gives back coordinates that represent
           * the point clicked on canvas element.
           * ignoreZoom true gives back coordinates after being processed
           * by the viewportTransform ( sort of coordinates of what is displayed
           * on the canvas where you are clicking.
           * ignoreZoom true = HTMLElement coordinates relative to top,left
           * ignoreZoom false, default = fabric space coordinates, the same used for shape position
           * To interact with your shapes top and left you want to use ignoreZoom true
           * most of the time, while ignoreZoom false will give you coordinates
           * compatible with the object.oCoords system.
           * of the time.
           * @param {Event} e
           * @param {Boolean} ignoreZoom
           * @return {Object} object with "x" and "y" number values
           */
          getPointer: function(e2, ignoreZoom) {
            if (this._absolutePointer && !ignoreZoom) {
              return this._absolutePointer;
            }
            if (this._pointer && ignoreZoom) {
              return this._pointer;
            }
            var pointer = getPointer(e2), upperCanvasEl = this.upperCanvasEl, bounds = upperCanvasEl.getBoundingClientRect(), boundsWidth = bounds.width || 0, boundsHeight = bounds.height || 0, cssScale;
            if (!boundsWidth || !boundsHeight) {
              if ("top" in bounds && "bottom" in bounds) {
                boundsHeight = Math.abs(bounds.top - bounds.bottom);
              }
              if ("right" in bounds && "left" in bounds) {
                boundsWidth = Math.abs(bounds.right - bounds.left);
              }
            }
            this.calcOffset();
            pointer.x = pointer.x - this._offset.left;
            pointer.y = pointer.y - this._offset.top;
            if (!ignoreZoom) {
              pointer = this.restorePointerVpt(pointer);
            }
            var retinaScaling = this.getRetinaScaling();
            if (retinaScaling !== 1) {
              pointer.x /= retinaScaling;
              pointer.y /= retinaScaling;
            }
            if (boundsWidth === 0 || boundsHeight === 0) {
              cssScale = { width: 1, height: 1 };
            } else {
              cssScale = {
                width: upperCanvasEl.width / boundsWidth,
                height: upperCanvasEl.height / boundsHeight
              };
            }
            return {
              x: pointer.x * cssScale.width,
              y: pointer.y * cssScale.height
            };
          },
          /**
           * @private
           * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
           */
          _createUpperCanvas: function() {
            var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/, ""), lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;
            if (upperCanvasEl) {
              upperCanvasEl.className = "";
            } else {
              upperCanvasEl = this._createCanvasElement();
              this.upperCanvasEl = upperCanvasEl;
            }
            fabric.util.addClass(upperCanvasEl, "upper-canvas " + lowerCanvasClass);
            this.wrapperEl.appendChild(upperCanvasEl);
            this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);
            this._applyCanvasStyle(upperCanvasEl);
            this.contextTop = upperCanvasEl.getContext("2d");
          },
          /**
           * @private
           */
          _createCacheCanvas: function() {
            this.cacheCanvasEl = this._createCanvasElement();
            this.cacheCanvasEl.setAttribute("width", this.width);
            this.cacheCanvasEl.setAttribute("height", this.height);
            this.contextCache = this.cacheCanvasEl.getContext("2d");
          },
          /**
           * @private
           */
          _initWrapperElement: function() {
            this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, "div", {
              "class": this.containerClass
            });
            fabric.util.setStyle(this.wrapperEl, {
              width: this.width + "px",
              height: this.height + "px",
              position: "relative"
            });
            fabric.util.makeElementUnselectable(this.wrapperEl);
          },
          /**
           * @private
           * @param {HTMLElement} element canvas element to apply styles on
           */
          _applyCanvasStyle: function(element) {
            var width = this.width || element.width, height = this.height || element.height;
            fabric.util.setStyle(element, {
              position: "absolute",
              width: width + "px",
              height: height + "px",
              left: 0,
              top: 0,
              "touch-action": this.allowTouchScrolling ? "manipulation" : "none",
              "-ms-touch-action": this.allowTouchScrolling ? "manipulation" : "none"
            });
            element.width = width;
            element.height = height;
            fabric.util.makeElementUnselectable(element);
          },
          /**
           * Copy the entire inline style from one element (fromEl) to another (toEl)
           * @private
           * @param {Element} fromEl Element style is copied from
           * @param {Element} toEl Element copied style is applied to
           */
          _copyCanvasStyle: function(fromEl, toEl) {
            toEl.style.cssText = fromEl.style.cssText;
          },
          /**
           * Returns context of canvas where object selection is drawn
           * @return {CanvasRenderingContext2D}
           */
          getSelectionContext: function() {
            return this.contextTop;
          },
          /**
           * Returns &lt;canvas> element on which object selection is drawn
           * @return {HTMLCanvasElement}
           */
          getSelectionElement: function() {
            return this.upperCanvasEl;
          },
          /**
           * Returns currently active object
           * @return {fabric.Object} active object
           */
          getActiveObject: function() {
            return this._activeObject;
          },
          /**
           * Returns an array with the current selected objects
           * @return {fabric.Object} active object
           */
          getActiveObjects: function() {
            var active = this._activeObject;
            if (active) {
              if (active.type === "activeSelection" && active._objects) {
                return active._objects.slice(0);
              } else {
                return [active];
              }
            }
            return [];
          },
          /**
           * @private
           * @param {fabric.Object} obj Object that was removed
           */
          _onObjectRemoved: function(obj) {
            if (obj === this._activeObject) {
              this.fire("before:selection:cleared", { target: obj });
              this._discardActiveObject();
              this.fire("selection:cleared", { target: obj });
              obj.fire("deselected");
            }
            if (obj === this._hoveredTarget) {
              this._hoveredTarget = null;
              this._hoveredTargets = [];
            }
            this.callSuper("_onObjectRemoved", obj);
          },
          /**
           * @private
           * Compares the old activeObject with the current one and fires correct events
           * @param {fabric.Object} obj old activeObject
           */
          _fireSelectionEvents: function(oldObjects, e2) {
            var somethingChanged = false, objects = this.getActiveObjects(), added = [], removed = [];
            oldObjects.forEach(function(oldObject) {
              if (objects.indexOf(oldObject) === -1) {
                somethingChanged = true;
                oldObject.fire("deselected", {
                  e: e2,
                  target: oldObject
                });
                removed.push(oldObject);
              }
            });
            objects.forEach(function(object) {
              if (oldObjects.indexOf(object) === -1) {
                somethingChanged = true;
                object.fire("selected", {
                  e: e2,
                  target: object
                });
                added.push(object);
              }
            });
            if (oldObjects.length > 0 && objects.length > 0) {
              somethingChanged && this.fire("selection:updated", {
                e: e2,
                selected: added,
                deselected: removed,
                // added for backward compatibility
                // deprecated
                updated: added[0] || removed[0],
                target: this._activeObject
              });
            } else if (objects.length > 0) {
              this.fire("selection:created", {
                e: e2,
                selected: added,
                target: this._activeObject
              });
            } else if (oldObjects.length > 0) {
              this.fire("selection:cleared", {
                e: e2,
                deselected: removed
              });
            }
          },
          /**
           * Sets given object as the only active object on canvas
           * @param {fabric.Object} object Object to set as an active one
           * @param {Event} [e] Event (passed along when firing "object:selected")
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          setActiveObject: function(object, e2) {
            var currentActives = this.getActiveObjects();
            this._setActiveObject(object, e2);
            this._fireSelectionEvents(currentActives, e2);
            return this;
          },
          /**
           * This is a private method for now.
           * This is supposed to be equivalent to setActiveObject but without firing
           * any event. There is commitment to have this stay this way.
           * This is the functional part of setActiveObject.
           * @private
           * @param {Object} object to set as active
           * @param {Event} [e] Event (passed along when firing "object:selected")
           * @return {Boolean} true if the selection happened
           */
          _setActiveObject: function(object, e2) {
            if (this._activeObject === object) {
              return false;
            }
            if (!this._discardActiveObject(e2, object)) {
              return false;
            }
            if (object.onSelect({ e: e2 })) {
              return false;
            }
            this._activeObject = object;
            return true;
          },
          /**
           * This is a private method for now.
           * This is supposed to be equivalent to discardActiveObject but without firing
           * any events. There is commitment to have this stay this way.
           * This is the functional part of discardActiveObject.
           * @param {Event} [e] Event (passed along when firing "object:deselected")
           * @param {Object} object to set as active
           * @return {Boolean} true if the selection happened
           * @private
           */
          _discardActiveObject: function(e2, object) {
            var obj = this._activeObject;
            if (obj) {
              if (obj.onDeselect({ e: e2, object })) {
                return false;
              }
              this._activeObject = null;
            }
            return true;
          },
          /**
           * Discards currently active object and fire events. If the function is called by fabric
           * as a consequence of a mouse event, the event is passed as a parameter and
           * sent to the fire function for the custom events. When used as a method the
           * e param does not have any application.
           * @param {event} e
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          discardActiveObject: function(e2) {
            var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();
            if (currentActives.length) {
              this.fire("before:selection:cleared", { target: activeObject, e: e2 });
            }
            this._discardActiveObject(e2);
            this._fireSelectionEvents(currentActives, e2);
            return this;
          },
          /**
           * Clears a canvas element and removes all event listeners
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          dispose: function() {
            var wrapper = this.wrapperEl;
            this.removeListeners();
            wrapper.removeChild(this.upperCanvasEl);
            wrapper.removeChild(this.lowerCanvasEl);
            this.contextCache = null;
            this.contextTop = null;
            ["upperCanvasEl", "cacheCanvasEl"].forEach((function(element) {
              fabric.util.cleanUpJsdomNode(this[element]);
              this[element] = void 0;
            }).bind(this));
            if (wrapper.parentNode) {
              wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);
            }
            delete this.wrapperEl;
            fabric.StaticCanvas.prototype.dispose.call(this);
            return this;
          },
          /**
           * Clears all contexts (background, main, top) of an instance
           * @return {fabric.Canvas} thisArg
           * @chainable
           */
          clear: function() {
            this.discardActiveObject();
            this.clearContext(this.contextTop);
            return this.callSuper("clear");
          },
          /**
           * Draws objects' controls (borders/controls)
           * @param {CanvasRenderingContext2D} ctx Context to render controls on
           */
          drawControls: function(ctx) {
            var activeObject = this._activeObject;
            if (activeObject) {
              activeObject._renderControls(ctx);
            }
          },
          /**
           * @private
           */
          _toObject: function(instance, methodName, propertiesToInclude) {
            var originalProperties = this._realizeGroupTransformOnObject(instance), object = this.callSuper("_toObject", instance, methodName, propertiesToInclude);
            this._unwindGroupTransformOnObject(instance, originalProperties);
            return object;
          },
          /**
           * Realises an object's group transformation on it
           * @private
           * @param {fabric.Object} [instance] the object to transform (gets mutated)
           * @returns the original values of instance which were changed
           */
          _realizeGroupTransformOnObject: function(instance) {
            if (instance.group && instance.group.type === "activeSelection" && this._activeObject === instance.group) {
              var layoutProps = ["angle", "flipX", "flipY", "left", "scaleX", "scaleY", "skewX", "skewY", "top"];
              var originalValues = {};
              layoutProps.forEach(function(prop2) {
                originalValues[prop2] = instance[prop2];
              });
              fabric.util.addTransformToObject(instance, this._activeObject.calcOwnMatrix());
              return originalValues;
            } else {
              return null;
            }
          },
          /**
           * Restores the changed properties of instance
           * @private
           * @param {fabric.Object} [instance] the object to un-transform (gets mutated)
           * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject
           */
          _unwindGroupTransformOnObject: function(instance, originalValues) {
            if (originalValues) {
              instance.set(originalValues);
            }
          },
          /**
           * @private
           */
          _setSVGObject: function(markup, instance, reviver) {
            var originalProperties = this._realizeGroupTransformOnObject(instance);
            this.callSuper("_setSVGObject", markup, instance, reviver);
            this._unwindGroupTransformOnObject(instance, originalProperties);
          },
          setViewportTransform: function(vpt) {
            if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {
              this._activeObject.clearContextTop();
            }
            fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);
          }
        }
      );
      for (var prop in fabric.StaticCanvas) {
        if (prop !== "prototype") {
          fabric.Canvas[prop] = fabric.StaticCanvas[prop];
        }
      }
    })();
    (function() {
      var addListener = fabric.util.addListener, removeListener = fabric.util.removeListener, RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1, addEventOptions = { passive: false };
      function checkClick(e2, value) {
        return e2.button && e2.button === value - 1;
      }
      fabric.util.object.extend(
        fabric.Canvas.prototype,
        /** @lends fabric.Canvas.prototype */
        {
          /**
           * Contains the id of the touch event that owns the fabric transform
           * @type Number
           * @private
           */
          mainTouchId: null,
          /**
           * Adds mouse listeners to canvas
           * @private
           */
          _initEventListeners: function() {
            this.removeListeners();
            this._bindEvents();
            this.addOrRemove(addListener, "add");
          },
          /**
           * return an event prefix pointer or mouse.
           * @private
           */
          _getEventPrefix: function() {
            return this.enablePointerEvents ? "pointer" : "mouse";
          },
          addOrRemove: function(functor, eventjsFunctor) {
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            functor(fabric.window, "resize", this._onResize);
            functor(canvasElement, eventTypePrefix + "down", this._onMouseDown);
            functor(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            functor(canvasElement, eventTypePrefix + "out", this._onMouseOut);
            functor(canvasElement, eventTypePrefix + "enter", this._onMouseEnter);
            functor(canvasElement, "wheel", this._onMouseWheel);
            functor(canvasElement, "contextmenu", this._onContextMenu);
            functor(canvasElement, "dblclick", this._onDoubleClick);
            functor(canvasElement, "dragover", this._onDragOver);
            functor(canvasElement, "dragenter", this._onDragEnter);
            functor(canvasElement, "dragleave", this._onDragLeave);
            functor(canvasElement, "drop", this._onDrop);
            if (!this.enablePointerEvents) {
              functor(canvasElement, "touchstart", this._onTouchStart, addEventOptions);
            }
            if (typeof eventjs !== "undefined" && eventjsFunctor in eventjs) {
              eventjs[eventjsFunctor](canvasElement, "gesture", this._onGesture);
              eventjs[eventjsFunctor](canvasElement, "drag", this._onDrag);
              eventjs[eventjsFunctor](canvasElement, "orientation", this._onOrientationChange);
              eventjs[eventjsFunctor](canvasElement, "shake", this._onShake);
              eventjs[eventjsFunctor](canvasElement, "longpress", this._onLongPress);
            }
          },
          /**
           * Removes all event listeners
           */
          removeListeners: function() {
            this.addOrRemove(removeListener, "remove");
            var eventTypePrefix = this._getEventPrefix();
            removeListener(fabric.document, eventTypePrefix + "up", this._onMouseUp);
            removeListener(fabric.document, "touchend", this._onTouchEnd, addEventOptions);
            removeListener(fabric.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            removeListener(fabric.document, "touchmove", this._onMouseMove, addEventOptions);
          },
          /**
           * @private
           */
          _bindEvents: function() {
            if (this.eventsBound) {
              return;
            }
            this._onMouseDown = this._onMouseDown.bind(this);
            this._onTouchStart = this._onTouchStart.bind(this);
            this._onMouseMove = this._onMouseMove.bind(this);
            this._onMouseUp = this._onMouseUp.bind(this);
            this._onTouchEnd = this._onTouchEnd.bind(this);
            this._onResize = this._onResize.bind(this);
            this._onGesture = this._onGesture.bind(this);
            this._onDrag = this._onDrag.bind(this);
            this._onShake = this._onShake.bind(this);
            this._onLongPress = this._onLongPress.bind(this);
            this._onOrientationChange = this._onOrientationChange.bind(this);
            this._onMouseWheel = this._onMouseWheel.bind(this);
            this._onMouseOut = this._onMouseOut.bind(this);
            this._onMouseEnter = this._onMouseEnter.bind(this);
            this._onContextMenu = this._onContextMenu.bind(this);
            this._onDoubleClick = this._onDoubleClick.bind(this);
            this._onDragOver = this._onDragOver.bind(this);
            this._onDragEnter = this._simpleEventHandler.bind(this, "dragenter");
            this._onDragLeave = this._simpleEventHandler.bind(this, "dragleave");
            this._onDrop = this._simpleEventHandler.bind(this, "drop");
            this.eventsBound = true;
          },
          /**
           * @private
           * @param {Event} [e] Event object fired on Event.js gesture
           * @param {Event} [self] Inner Event object
           */
          _onGesture: function(e2, self2) {
            this.__onTransformGesture && this.__onTransformGesture(e2, self2);
          },
          /**
           * @private
           * @param {Event} [e] Event object fired on Event.js drag
           * @param {Event} [self] Inner Event object
           */
          _onDrag: function(e2, self2) {
            this.__onDrag && this.__onDrag(e2, self2);
          },
          /**
           * @private
           * @param {Event} [e] Event object fired on wheel event
           */
          _onMouseWheel: function(e2) {
            this.__onMouseWheel(e2);
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          _onMouseOut: function(e2) {
            var target = this._hoveredTarget;
            this.fire("mouse:out", { target, e: e2 });
            this._hoveredTarget = null;
            target && target.fire("mouseout", { e: e2 });
            var _this = this;
            this._hoveredTargets.forEach(function(_target) {
              _this.fire("mouse:out", { target, e: e2 });
              _target && target.fire("mouseout", { e: e2 });
            });
            this._hoveredTargets = [];
            if (this._iTextInstances) {
              this._iTextInstances.forEach(function(obj) {
                if (obj.isEditing) {
                  obj.hiddenTextarea.focus();
                }
              });
            }
          },
          /**
           * @private
           * @param {Event} e Event object fired on mouseenter
           */
          _onMouseEnter: function(e2) {
            if (!this._currentTransform && !this.findTarget(e2)) {
              this.fire("mouse:over", { target: null, e: e2 });
              this._hoveredTarget = null;
              this._hoveredTargets = [];
            }
          },
          /**
           * @private
           * @param {Event} [e] Event object fired on Event.js orientation change
           * @param {Event} [self] Inner Event object
           */
          _onOrientationChange: function(e2, self2) {
            this.__onOrientationChange && this.__onOrientationChange(e2, self2);
          },
          /**
           * @private
           * @param {Event} [e] Event object fired on Event.js shake
           * @param {Event} [self] Inner Event object
           */
          _onShake: function(e2, self2) {
            this.__onShake && this.__onShake(e2, self2);
          },
          /**
           * @private
           * @param {Event} [e] Event object fired on Event.js shake
           * @param {Event} [self] Inner Event object
           */
          _onLongPress: function(e2, self2) {
            this.__onLongPress && this.__onLongPress(e2, self2);
          },
          /**
           * prevent default to allow drop event to be fired
           * @private
           * @param {Event} [e] Event object fired on Event.js shake
           */
          _onDragOver: function(e2) {
            e2.preventDefault();
            var target = this._simpleEventHandler("dragover", e2);
            this._fireEnterLeaveEvents(target, e2);
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          _onContextMenu: function(e2) {
            if (this.stopContextMenu) {
              e2.stopPropagation();
              e2.preventDefault();
            }
            return false;
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          _onDoubleClick: function(e2) {
            this._cacheTransformEventData(e2);
            this._handleEvent(e2, "dblclick");
            this._resetTransformEventData(e2);
          },
          /**
           * Return a the id of an event.
           * returns either the pointerId or the identifier or 0 for the mouse event
           * @private
           * @param {Event} evt Event object
           */
          getPointerId: function(evt) {
            var changedTouches = evt.changedTouches;
            if (changedTouches) {
              return changedTouches[0] && changedTouches[0].identifier;
            }
            if (this.enablePointerEvents) {
              return evt.pointerId;
            }
            return -1;
          },
          /**
           * Determines if an event has the id of the event that is considered main
           * @private
           * @param {evt} event Event object
           */
          _isMainEvent: function(evt) {
            if (evt.isPrimary === true) {
              return true;
            }
            if (evt.isPrimary === false) {
              return false;
            }
            if (evt.type === "touchend" && evt.touches.length === 0) {
              return true;
            }
            if (evt.changedTouches) {
              return evt.changedTouches[0].identifier === this.mainTouchId;
            }
            return true;
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          _onTouchStart: function(e2) {
            e2.preventDefault();
            if (this.mainTouchId === null) {
              this.mainTouchId = this.getPointerId(e2);
            }
            this.__onMouseDown(e2);
            this._resetTransformEventData();
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            addListener(fabric.document, "touchend", this._onTouchEnd, addEventOptions);
            addListener(fabric.document, "touchmove", this._onMouseMove, addEventOptions);
            removeListener(canvasElement, eventTypePrefix + "down", this._onMouseDown);
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          _onMouseDown: function(e2) {
            this.__onMouseDown(e2);
            this._resetTransformEventData();
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            removeListener(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            addListener(fabric.document, eventTypePrefix + "up", this._onMouseUp);
            addListener(fabric.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          _onTouchEnd: function(e2) {
            if (e2.touches.length > 0) {
              return;
            }
            this.__onMouseUp(e2);
            this._resetTransformEventData();
            this.mainTouchId = null;
            var eventTypePrefix = this._getEventPrefix();
            removeListener(fabric.document, "touchend", this._onTouchEnd, addEventOptions);
            removeListener(fabric.document, "touchmove", this._onMouseMove, addEventOptions);
            var _this = this;
            if (this._willAddMouseDown) {
              clearTimeout(this._willAddMouseDown);
            }
            this._willAddMouseDown = setTimeout(function() {
              addListener(_this.upperCanvasEl, eventTypePrefix + "down", _this._onMouseDown);
              _this._willAddMouseDown = 0;
            }, 400);
          },
          /**
           * @private
           * @param {Event} e Event object fired on mouseup
           */
          _onMouseUp: function(e2) {
            this.__onMouseUp(e2);
            this._resetTransformEventData();
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            if (this._isMainEvent(e2)) {
              removeListener(fabric.document, eventTypePrefix + "up", this._onMouseUp);
              removeListener(fabric.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
              addListener(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            }
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousemove
           */
          _onMouseMove: function(e2) {
            !this.allowTouchScrolling && e2.preventDefault && e2.preventDefault();
            this.__onMouseMove(e2);
          },
          /**
           * @private
           */
          _onResize: function() {
            this.calcOffset();
          },
          /**
           * Decides whether the canvas should be redrawn in mouseup and mousedown events.
           * @private
           * @param {Object} target
           */
          _shouldRender: function(target) {
            var activeObject = this._activeObject;
            if (!!activeObject !== !!target || activeObject && target && activeObject !== target) {
              return true;
            } else if (activeObject && activeObject.isEditing) {
              return false;
            }
            return false;
          },
          /**
           * Method that defines the actions when mouse is released on canvas.
           * The method resets the currentTransform parameters, store the image corner
           * position in the image object and render the canvas on top.
           * @private
           * @param {Event} e Event object fired on mouseup
           */
          __onMouseUp: function(e2) {
            var target, transform = this._currentTransform, groupSelector = this._groupSelector, shouldRender = false, isClick = !groupSelector || groupSelector.left === 0 && groupSelector.top === 0;
            this._cacheTransformEventData(e2);
            target = this._target;
            this._handleEvent(e2, "up:before");
            if (checkClick(e2, RIGHT_CLICK)) {
              if (this.fireRightClick) {
                this._handleEvent(e2, "up", RIGHT_CLICK, isClick);
              }
              return;
            }
            if (checkClick(e2, MIDDLE_CLICK)) {
              if (this.fireMiddleClick) {
                this._handleEvent(e2, "up", MIDDLE_CLICK, isClick);
              }
              this._resetTransformEventData();
              return;
            }
            if (this.isDrawingMode && this._isCurrentlyDrawing) {
              this._onMouseUpInDrawingMode(e2);
              return;
            }
            if (!this._isMainEvent(e2)) {
              return;
            }
            if (transform) {
              this._finalizeCurrentTransform(e2);
              shouldRender = transform.actionPerformed;
            }
            if (!isClick) {
              var targetWasActive = target === this._activeObject;
              this._maybeGroupObjects(e2);
              if (!shouldRender) {
                shouldRender = this._shouldRender(target) || !targetWasActive && target === this._activeObject;
              }
            }
            if (target) {
              if (target.selectable && target !== this._activeObject && target.activeOn === "up") {
                this.setActiveObject(target, e2);
                shouldRender = true;
              } else {
                var corner = target._findTargetCorner(
                  this.getPointer(e2, true),
                  fabric.util.isTouchEvent(e2)
                );
                var control = target.controls[corner], mouseUpHandler = control && control.getMouseUpHandler(e2, target, control);
                if (mouseUpHandler) {
                  var pointer = this.getPointer(e2);
                  mouseUpHandler(e2, transform, pointer.x, pointer.y);
                }
              }
              target.isMoving = false;
            }
            this._setCursorFromEvent(e2, target);
            this._handleEvent(e2, "up", LEFT_CLICK, isClick);
            this._groupSelector = null;
            this._currentTransform = null;
            target && (target.__corner = 0);
            if (shouldRender) {
              this.requestRenderAll();
            } else if (!isClick) {
              this.renderTop();
            }
          },
          /**
           * @private
           * Handle event firing for target and subtargets
           * @param {Event} e event from mouse
           * @param {String} eventType event to fire (up, down or move)
           * @return {Fabric.Object} target return the the target found, for internal reasons.
           */
          _simpleEventHandler: function(eventType, e2) {
            var target = this.findTarget(e2), targets = this.targets, options = {
              e: e2,
              target,
              subTargets: targets
            };
            this.fire(eventType, options);
            target && target.fire(eventType, options);
            if (!targets) {
              return target;
            }
            for (var i2 = 0; i2 < targets.length; i2++) {
              targets[i2].fire(eventType, options);
            }
            return target;
          },
          /**
           * @private
           * Handle event firing for target and subtargets
           * @param {Event} e event from mouse
           * @param {String} eventType event to fire (up, down or move)
           * @param {fabric.Object} targetObj receiving event
           * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right
           * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.
           */
          _handleEvent: function(e2, eventType, button, isClick) {
            var target = this._target, targets = this.targets || [], options = {
              e: e2,
              target,
              subTargets: targets,
              button: button || LEFT_CLICK,
              isClick: isClick || false,
              pointer: this._pointer,
              absolutePointer: this._absolutePointer,
              transform: this._currentTransform
            };
            if (eventType === "up") {
              options.currentTarget = this.findTarget(e2);
              options.currentSubTargets = this.targets;
            }
            this.fire("mouse:" + eventType, options);
            target && target.fire("mouse" + eventType, options);
            for (var i2 = 0; i2 < targets.length; i2++) {
              targets[i2].fire("mouse" + eventType, options);
            }
          },
          /**
           * @private
           * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event
           */
          _finalizeCurrentTransform: function(e2) {
            var transform = this._currentTransform, target = transform.target, eventName, options = {
              e: e2,
              target,
              transform,
              action: transform.action
            };
            if (target._scaling) {
              target._scaling = false;
            }
            target.setCoords();
            if (transform.actionPerformed || this.stateful && target.hasStateChanged()) {
              if (transform.actionPerformed) {
                eventName = this._addEventOptions(options, transform);
                this._fire(eventName, options);
              }
              this._fire("modified", options);
            }
          },
          /**
           * Mutate option object in order to add by property and give back the event name.
           * @private
           * @deprecated since 4.2.0
           * @param {Object} options to mutate
           * @param {Object} transform to inspect action from
           */
          _addEventOptions: function(options, transform) {
            var eventName, by;
            switch (transform.action) {
              case "scaleX":
                eventName = "scaled";
                by = "x";
                break;
              case "scaleY":
                eventName = "scaled";
                by = "y";
                break;
              case "skewX":
                eventName = "skewed";
                by = "x";
                break;
              case "skewY":
                eventName = "skewed";
                by = "y";
                break;
              case "scale":
                eventName = "scaled";
                by = "equally";
                break;
              case "rotate":
                eventName = "rotated";
                break;
              case "drag":
                eventName = "moved";
                break;
            }
            options.by = by;
            return eventName;
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          _onMouseDownInDrawingMode: function(e2) {
            this._isCurrentlyDrawing = true;
            if (this.getActiveObject()) {
              this.discardActiveObject(e2).requestRenderAll();
            }
            var pointer = this.getPointer(e2);
            this.freeDrawingBrush.onMouseDown(pointer, { e: e2, pointer });
            this._handleEvent(e2, "down");
          },
          /**
           * @private
           * @param {Event} e Event object fired on mousemove
           */
          _onMouseMoveInDrawingMode: function(e2) {
            if (this._isCurrentlyDrawing) {
              var pointer = this.getPointer(e2);
              this.freeDrawingBrush.onMouseMove(pointer, { e: e2, pointer });
            }
            this.setCursor(this.freeDrawingCursor);
            this._handleEvent(e2, "move");
          },
          /**
           * @private
           * @param {Event} e Event object fired on mouseup
           */
          _onMouseUpInDrawingMode: function(e2) {
            var pointer = this.getPointer(e2);
            this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e: e2, pointer });
            this._handleEvent(e2, "up");
          },
          /**
           * Method that defines the actions when mouse is clicked on canvas.
           * The method inits the currentTransform parameters and renders all the
           * canvas so the current image can be placed on the top canvas and the rest
           * in on the container one.
           * @private
           * @param {Event} e Event object fired on mousedown
           */
          __onMouseDown: function(e2) {
            this._cacheTransformEventData(e2);
            this._handleEvent(e2, "down:before");
            var target = this._target;
            if (checkClick(e2, RIGHT_CLICK)) {
              if (this.fireRightClick) {
                this._handleEvent(e2, "down", RIGHT_CLICK);
              }
              return;
            }
            if (checkClick(e2, MIDDLE_CLICK)) {
              if (this.fireMiddleClick) {
                this._handleEvent(e2, "down", MIDDLE_CLICK);
              }
              return;
            }
            if (this.isDrawingMode) {
              this._onMouseDownInDrawingMode(e2);
              return;
            }
            if (!this._isMainEvent(e2)) {
              return;
            }
            if (this._currentTransform) {
              return;
            }
            var pointer = this._pointer;
            this._previousPointer = pointer;
            var shouldRender = this._shouldRender(target), shouldGroup = this._shouldGroup(e2, target);
            if (this._shouldClearSelection(e2, target)) {
              this.discardActiveObject(e2);
            } else if (shouldGroup) {
              this._handleGrouping(e2, target);
              target = this._activeObject;
            }
            if (this.selection && (!target || !target.selectable && !target.isEditing && target !== this._activeObject)) {
              this._groupSelector = {
                ex: this._absolutePointer.x,
                ey: this._absolutePointer.y,
                top: 0,
                left: 0
              };
            }
            if (target) {
              var alreadySelected = target === this._activeObject;
              if (target.selectable && target.activeOn === "down") {
                this.setActiveObject(target, e2);
              }
              var corner = target._findTargetCorner(
                this.getPointer(e2, true),
                fabric.util.isTouchEvent(e2)
              );
              target.__corner = corner;
              if (target === this._activeObject && (corner || !shouldGroup)) {
                this._setupCurrentTransform(e2, target, alreadySelected);
                var control = target.controls[corner], pointer = this.getPointer(e2), mouseDownHandler = control && control.getMouseDownHandler(e2, target, control);
                if (mouseDownHandler) {
                  mouseDownHandler(e2, this._currentTransform, pointer.x, pointer.y);
                }
              }
            }
            this._handleEvent(e2, "down");
            (shouldRender || shouldGroup) && this.requestRenderAll();
          },
          /**
           * reset cache form common information needed during event processing
           * @private
           */
          _resetTransformEventData: function() {
            this._target = null;
            this._pointer = null;
            this._absolutePointer = null;
          },
          /**
           * Cache common information needed during event processing
           * @private
           * @param {Event} e Event object fired on event
           */
          _cacheTransformEventData: function(e2) {
            this._resetTransformEventData();
            this._pointer = this.getPointer(e2, true);
            this._absolutePointer = this.restorePointerVpt(this._pointer);
            this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e2) || null;
          },
          /**
           * @private
           */
          _beforeTransform: function(e2) {
            var t2 = this._currentTransform;
            this.stateful && t2.target.saveState();
            this.fire("before:transform", {
              e: e2,
              transform: t2
            });
          },
          /**
           * Method that defines the actions when mouse is hovering the canvas.
           * The currentTransform parameter will define whether the user is rotating/scaling/translating
           * an image or neither of them (only hovering). A group selection is also possible and would cancel
           * all any other type of action.
           * In case of an image transformation only the top canvas will be rendered.
           * @private
           * @param {Event} e Event object fired on mousemove
           */
          __onMouseMove: function(e2) {
            this._handleEvent(e2, "move:before");
            this._cacheTransformEventData(e2);
            var target, pointer;
            if (this.isDrawingMode) {
              this._onMouseMoveInDrawingMode(e2);
              return;
            }
            if (!this._isMainEvent(e2)) {
              return;
            }
            var groupSelector = this._groupSelector;
            if (groupSelector) {
              pointer = this._absolutePointer;
              groupSelector.left = pointer.x - groupSelector.ex;
              groupSelector.top = pointer.y - groupSelector.ey;
              this.renderTop();
            } else if (!this._currentTransform) {
              target = this.findTarget(e2) || null;
              this._setCursorFromEvent(e2, target);
              this._fireOverOutEvents(target, e2);
            } else {
              this._transformObject(e2);
            }
            this._handleEvent(e2, "move");
            this._resetTransformEventData();
          },
          /**
           * Manage the mouseout, mouseover events for the fabric object on the canvas
           * @param {Fabric.Object} target the target where the target from the mousemove event
           * @param {Event} e Event object fired on mousemove
           * @private
           */
          _fireOverOutEvents: function(target, e2) {
            var _hoveredTarget = this._hoveredTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);
            this.fireSyntheticInOutEvents(target, e2, {
              oldTarget: _hoveredTarget,
              evtOut: "mouseout",
              canvasEvtOut: "mouse:out",
              evtIn: "mouseover",
              canvasEvtIn: "mouse:over"
            });
            for (var i2 = 0; i2 < length; i2++) {
              this.fireSyntheticInOutEvents(targets[i2], e2, {
                oldTarget: _hoveredTargets[i2],
                evtOut: "mouseout",
                evtIn: "mouseover"
              });
            }
            this._hoveredTarget = target;
            this._hoveredTargets = this.targets.concat();
          },
          /**
           * Manage the dragEnter, dragLeave events for the fabric objects on the canvas
           * @param {Fabric.Object} target the target where the target from the onDrag event
           * @param {Event} e Event object fired on ondrag
           * @private
           */
          _fireEnterLeaveEvents: function(target, e2) {
            var _draggedoverTarget = this._draggedoverTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length = Math.max(_hoveredTargets.length, targets.length);
            this.fireSyntheticInOutEvents(target, e2, {
              oldTarget: _draggedoverTarget,
              evtOut: "dragleave",
              evtIn: "dragenter"
            });
            for (var i2 = 0; i2 < length; i2++) {
              this.fireSyntheticInOutEvents(targets[i2], e2, {
                oldTarget: _hoveredTargets[i2],
                evtOut: "dragleave",
                evtIn: "dragenter"
              });
            }
            this._draggedoverTarget = target;
          },
          /**
           * Manage the synthetic in/out events for the fabric objects on the canvas
           * @param {Fabric.Object} target the target where the target from the supported events
           * @param {Event} e Event object fired
           * @param {Object} config configuration for the function to work
           * @param {String} config.targetName property on the canvas where the old target is stored
           * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out
           * @param {String} config.evtOut name of the event to fire for out
           * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in
           * @param {String} config.evtIn name of the event to fire for in
           * @private
           */
          fireSyntheticInOutEvents: function(target, e2, config) {
            var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires, targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;
            if (targetChanged) {
              inOpt = { e: e2, target, previousTarget: oldTarget };
              outOpt = { e: e2, target: oldTarget, nextTarget: target };
            }
            inFires = target && targetChanged;
            outFires = oldTarget && targetChanged;
            if (outFires) {
              canvasEvtOut && this.fire(canvasEvtOut, outOpt);
              oldTarget.fire(config.evtOut, outOpt);
            }
            if (inFires) {
              canvasEvtIn && this.fire(canvasEvtIn, inOpt);
              target.fire(config.evtIn, inOpt);
            }
          },
          /**
           * Method that defines actions when an Event Mouse Wheel
           * @param {Event} e Event object fired on mouseup
           */
          __onMouseWheel: function(e2) {
            this._cacheTransformEventData(e2);
            this._handleEvent(e2, "wheel");
            this._resetTransformEventData();
          },
          /**
           * @private
           * @param {Event} e Event fired on mousemove
           */
          _transformObject: function(e2) {
            var pointer = this.getPointer(e2), transform = this._currentTransform;
            transform.reset = false;
            transform.shiftKey = e2.shiftKey;
            transform.altKey = e2[this.centeredKey];
            this._performTransformAction(e2, transform, pointer);
            transform.actionPerformed && this.requestRenderAll();
          },
          /**
           * @private
           */
          _performTransformAction: function(e2, transform, pointer) {
            var x = pointer.x, y2 = pointer.y, action = transform.action, actionPerformed = false, actionHandler = transform.actionHandler;
            if (actionHandler) {
              actionPerformed = actionHandler(e2, transform, x, y2);
            }
            if (action === "drag" && actionPerformed) {
              transform.target.isMoving = true;
              this.setCursor(transform.target.moveCursor || this.moveCursor);
            }
            transform.actionPerformed = transform.actionPerformed || actionPerformed;
          },
          /**
           * @private
           */
          _fire: fabric.controlsUtils.fireEvent,
          /**
           * Sets the cursor depending on where the canvas is being hovered.
           * Note: very buggy in Opera
           * @param {Event} e Event object
           * @param {Object} target Object that the mouse is hovering, if so.
           */
          _setCursorFromEvent: function(e2, target) {
            if (!target) {
              this.setCursor(this.defaultCursor);
              return false;
            }
            var hoverCursor = target.hoverCursor || this.hoverCursor, activeSelection = this._activeObject && this._activeObject.type === "activeSelection" ? this._activeObject : null, corner = (!activeSelection || !activeSelection.contains(target)) && target._findTargetCorner(this.getPointer(e2, true));
            if (!corner) {
              if (target.subTargetCheck) {
                this.targets.concat().reverse().map(function(_target) {
                  hoverCursor = _target.hoverCursor || hoverCursor;
                });
              }
              this.setCursor(hoverCursor);
            } else {
              this.setCursor(this.getCornerCursor(corner, target, e2));
            }
          },
          /**
           * @private
           */
          getCornerCursor: function(corner, target, e2) {
            var control = target.controls[corner];
            return control.cursorStyleHandler(e2, control, target);
          }
        }
      );
    })();
    (function() {
      var min = Math.min, max = Math.max;
      fabric.util.object.extend(
        fabric.Canvas.prototype,
        /** @lends fabric.Canvas.prototype */
        {
          /**
           * @private
           * @param {Event} e Event object
           * @param {fabric.Object} target
           * @return {Boolean}
           */
          _shouldGroup: function(e2, target) {
            var activeObject = this._activeObject;
            return activeObject && this._isSelectionKeyPressed(e2) && target && target.selectable && this.selection && (activeObject !== target || activeObject.type === "activeSelection") && !target.onSelect({ e: e2 });
          },
          /**
           * @private
           * @param {Event} e Event object
           * @param {fabric.Object} target
           */
          _handleGrouping: function(e2, target) {
            var activeObject = this._activeObject;
            if (activeObject.__corner) {
              return;
            }
            if (target === activeObject) {
              target = this.findTarget(e2, true);
              if (!target || !target.selectable) {
                return;
              }
            }
            if (activeObject && activeObject.type === "activeSelection") {
              this._updateActiveSelection(target, e2);
            } else {
              this._createActiveSelection(target, e2);
            }
          },
          /**
           * @private
           */
          _updateActiveSelection: function(target, e2) {
            var activeSelection = this._activeObject, currentActiveObjects = activeSelection._objects.slice(0);
            if (activeSelection.contains(target)) {
              activeSelection.removeWithUpdate(target);
              this._hoveredTarget = target;
              this._hoveredTargets = this.targets.concat();
              if (activeSelection.size() === 1) {
                this._setActiveObject(activeSelection.item(0), e2);
              }
            } else {
              activeSelection.addWithUpdate(target);
              this._hoveredTarget = activeSelection;
              this._hoveredTargets = this.targets.concat();
            }
            this._fireSelectionEvents(currentActiveObjects, e2);
          },
          /**
           * @private
           */
          _createActiveSelection: function(target, e2) {
            var currentActives = this.getActiveObjects(), group = this._createGroup(target);
            this._hoveredTarget = group;
            this._setActiveObject(group, e2);
            this._fireSelectionEvents(currentActives, e2);
          },
          /**
           * @private
           * @param {Object} target
           */
          _createGroup: function(target) {
            var objects = this._objects, isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target), groupObjects = isActiveLower ? [this._activeObject, target] : [target, this._activeObject];
            this._activeObject.isEditing && this._activeObject.exitEditing();
            return new fabric.ActiveSelection(groupObjects, {
              canvas: this
            });
          },
          /**
           * @private
           * @param {Event} e mouse event
           */
          _groupSelectedObjects: function(e2) {
            var group = this._collectObjects(e2), aGroup;
            if (group.length === 1) {
              this.setActiveObject(group[0], e2);
            } else if (group.length > 1) {
              aGroup = new fabric.ActiveSelection(group.reverse(), {
                canvas: this
              });
              this.setActiveObject(aGroup, e2);
            }
          },
          /**
           * @private
           */
          _collectObjects: function(e2) {
            var group = [], currentObject, x1 = this._groupSelector.ex, y1 = this._groupSelector.ey, x2 = x1 + this._groupSelector.left, y2 = y1 + this._groupSelector.top, selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)), selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)), allowIntersect = !this.selectionFullyContained, isClick = x1 === x2 && y1 === y2;
            for (var i2 = this._objects.length; i2--; ) {
              currentObject = this._objects[i2];
              if (!currentObject || !currentObject.selectable || !currentObject.visible) {
                continue;
              }
              if (allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2, true) || currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2, true) || allowIntersect && currentObject.containsPoint(selectionX1Y1, null, true) || allowIntersect && currentObject.containsPoint(selectionX2Y2, null, true)) {
                group.push(currentObject);
                if (isClick) {
                  break;
                }
              }
            }
            if (group.length > 1) {
              group = group.filter(function(object) {
                return !object.onSelect({ e: e2 });
              });
            }
            return group;
          },
          /**
           * @private
           */
          _maybeGroupObjects: function(e2) {
            if (this.selection && this._groupSelector) {
              this._groupSelectedObjects(e2);
            }
            this.setCursor(this.defaultCursor);
            this._groupSelector = null;
          }
        }
      );
    })();
    (function() {
      fabric.util.object.extend(
        fabric.StaticCanvas.prototype,
        /** @lends fabric.StaticCanvas.prototype */
        {
          /**
           * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately
           * @param {Object} [options] Options object
           * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
           * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
           * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent
           * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
           * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
           * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
           * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
           * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0
           * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
           * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}
           * @example <caption>Generate jpeg dataURL with lower quality</caption>
           * var dataURL = canvas.toDataURL({
           *   format: 'jpeg',
           *   quality: 0.8
           * });
           * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>
           * var dataURL = canvas.toDataURL({
           *   format: 'png',
           *   left: 100,
           *   top: 100,
           *   width: 200,
           *   height: 200
           * });
           * @example <caption>Generate double scaled png dataURL</caption>
           * var dataURL = canvas.toDataURL({
           *   format: 'png',
           *   multiplier: 2
           * });
           */
          toDataURL: function(options) {
            options || (options = {});
            var format = options.format || "png", quality = options.quality || 1, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1), canvasEl = this.toCanvasElement(multiplier, options);
            return fabric.util.toDataURL(canvasEl, format, quality);
          },
          /**
           * Create a new HTMLCanvas element painted with the current canvas content.
           * No need to resize the actual one or repaint it.
           * Will transfer object ownership to a new canvas, paint it, and set everything back.
           * This is an intermediary step used to get to a dataUrl but also it is useful to
           * create quick image copies of a canvas without passing for the dataUrl string
           * @param {Number} [multiplier] a zoom factor.
           * @param {Object} [cropping] Cropping informations
           * @param {Number} [cropping.left] Cropping left offset.
           * @param {Number} [cropping.top] Cropping top offset.
           * @param {Number} [cropping.width] Cropping width.
           * @param {Number} [cropping.height] Cropping height.
           */
          toCanvasElement: function(multiplier, cropping) {
            multiplier = multiplier || 1;
            cropping = cropping || {};
            var scaledWidth = (cropping.width || this.width) * multiplier, scaledHeight = (cropping.height || this.height) * multiplier, zoom = this.getZoom(), originalWidth = this.width, originalHeight = this.height, newZoom = zoom * multiplier, vp = this.viewportTransform, translateX = (vp[4] - (cropping.left || 0)) * multiplier, translateY = (vp[5] - (cropping.top || 0)) * multiplier, originalInteractive = this.interactive, newVp = [newZoom, 0, 0, newZoom, translateX, translateY], originalRetina = this.enableRetinaScaling, canvasEl = fabric.util.createCanvasElement(), originalContextTop = this.contextTop;
            canvasEl.width = scaledWidth;
            canvasEl.height = scaledHeight;
            this.contextTop = null;
            this.enableRetinaScaling = false;
            this.interactive = false;
            this.viewportTransform = newVp;
            this.width = scaledWidth;
            this.height = scaledHeight;
            this.calcViewportBoundaries();
            this.renderCanvas(canvasEl.getContext("2d"), this._objects);
            this.viewportTransform = vp;
            this.width = originalWidth;
            this.height = originalHeight;
            this.calcViewportBoundaries();
            this.interactive = originalInteractive;
            this.enableRetinaScaling = originalRetina;
            this.contextTop = originalContextTop;
            return canvasEl;
          }
        }
      );
    })();
    fabric.util.object.extend(
      fabric.StaticCanvas.prototype,
      /** @lends fabric.StaticCanvas.prototype */
      {
        /**
         * Populates canvas with data from the specified JSON.
         * JSON format must conform to the one of {@link fabric.Canvas#toJSON}
         * @param {String|Object} json JSON string or object
         * @param {Function} callback Callback, invoked when json is parsed
         *                            and corresponding objects (e.g: {@link fabric.Image})
         *                            are initialized
         * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
         * @return {fabric.Canvas} instance
         * @chainable
         * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
         * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}
         * @example <caption>loadFromJSON</caption>
         * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
         * @example <caption>loadFromJSON with reviver</caption>
         * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {
         *   // `o` = json object
         *   // `object` = fabric.Object instance
         *   // ... do some stuff ...
         * });
         */
        loadFromJSON: function(json, callback, reviver) {
          if (!json) {
            return;
          }
          var serialized = typeof json === "string" ? JSON.parse(json) : fabric.util.object.clone(json);
          var _this = this, clipPath = serialized.clipPath, renderOnAddRemove = this.renderOnAddRemove;
          this.renderOnAddRemove = false;
          delete serialized.clipPath;
          this._enlivenObjects(serialized.objects, function(enlivenedObjects) {
            _this.clear();
            _this._setBgOverlay(serialized, function() {
              if (clipPath) {
                _this._enlivenObjects([clipPath], function(enlivenedCanvasClip) {
                  _this.clipPath = enlivenedCanvasClip[0];
                  _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
                });
              } else {
                _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
              }
            });
          }, reviver);
          return this;
        },
        /**
         * @private
         * @param {Object} serialized Object with background and overlay information
         * @param {Array} restored canvas objects
         * @param {Function} cached renderOnAddRemove callback
         * @param {Function} callback Invoked after all background and overlay images/patterns loaded
         */
        __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {
          var _this = this;
          enlivenedObjects.forEach(function(obj, index) {
            _this.insertAt(obj, index);
          });
          this.renderOnAddRemove = renderOnAddRemove;
          delete serialized.objects;
          delete serialized.backgroundImage;
          delete serialized.overlayImage;
          delete serialized.background;
          delete serialized.overlay;
          this._setOptions(serialized);
          this.renderAll();
          callback && callback();
        },
        /**
         * @private
         * @param {Object} serialized Object with background and overlay information
         * @param {Function} callback Invoked after all background and overlay images/patterns loaded
         */
        _setBgOverlay: function(serialized, callback) {
          var loaded = {
            backgroundColor: false,
            overlayColor: false,
            backgroundImage: false,
            overlayImage: false
          };
          if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {
            callback && callback();
            return;
          }
          var cbIfLoaded = function() {
            if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {
              callback && callback();
            }
          };
          this.__setBgOverlay("backgroundImage", serialized.backgroundImage, loaded, cbIfLoaded);
          this.__setBgOverlay("overlayImage", serialized.overlayImage, loaded, cbIfLoaded);
          this.__setBgOverlay("backgroundColor", serialized.background, loaded, cbIfLoaded);
          this.__setBgOverlay("overlayColor", serialized.overlay, loaded, cbIfLoaded);
        },
        /**
         * @private
         * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)
         * @param {(Object|String)} value Value to set
         * @param {Object} loaded Set loaded property to true if property is set
         * @param {Object} callback Callback function to invoke after property is set
         */
        __setBgOverlay: function(property, value, loaded, callback) {
          var _this = this;
          if (!value) {
            loaded[property] = true;
            callback && callback();
            return;
          }
          if (property === "backgroundImage" || property === "overlayImage") {
            fabric.util.enlivenObjects([value], function(enlivedObject) {
              _this[property] = enlivedObject[0];
              loaded[property] = true;
              callback && callback();
            });
          } else {
            this["set" + fabric.util.string.capitalize(property, true)](value, function() {
              loaded[property] = true;
              callback && callback();
            });
          }
        },
        /**
         * @private
         * @param {Array} objects
         * @param {Function} callback
         * @param {Function} [reviver]
         */
        _enlivenObjects: function(objects, callback, reviver) {
          if (!objects || objects.length === 0) {
            callback && callback([]);
            return;
          }
          fabric.util.enlivenObjects(objects, function(enlivenedObjects) {
            callback && callback(enlivenedObjects);
          }, null, reviver);
        },
        /**
         * @private
         * @param {String} format
         * @param {Function} callback
         */
        _toDataURL: function(format, callback) {
          this.clone(function(clone) {
            callback(clone.toDataURL(format));
          });
        },
        /**
         * @private
         * @param {String} format
         * @param {Number} multiplier
         * @param {Function} callback
         */
        _toDataURLWithMultiplier: function(format, multiplier, callback) {
          this.clone(function(clone) {
            callback(clone.toDataURLWithMultiplier(format, multiplier));
          });
        },
        /**
         * Clones canvas instance
         * @param {Object} [callback] Receives cloned instance as a first argument
         * @param {Array} [properties] Array of properties to include in the cloned canvas and children
         */
        clone: function(callback, properties) {
          var data = JSON.stringify(this.toJSON(properties));
          this.cloneWithoutData(function(clone) {
            clone.loadFromJSON(data, function() {
              callback && callback(clone);
            });
          });
        },
        /**
         * Clones canvas instance without cloning existing data.
         * This essentially copies canvas dimensions, clipping properties, etc.
         * but leaves data empty (so that you can populate it with your own)
         * @param {Object} [callback] Receives cloned instance as a first argument
         */
        cloneWithoutData: function(callback) {
          var el = fabric.util.createCanvasElement();
          el.width = this.width;
          el.height = this.height;
          var clone = new fabric.Canvas(el);
          if (this.backgroundImage) {
            clone.setBackgroundImage(this.backgroundImage.src, function() {
              clone.renderAll();
              callback && callback(clone);
            });
            clone.backgroundImageOpacity = this.backgroundImageOpacity;
            clone.backgroundImageStretch = this.backgroundImageStretch;
          } else {
            callback && callback(clone);
          }
        }
      }
    );
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend, clone = fabric2.util.object.clone, toFixed = fabric2.util.toFixed, capitalize = fabric2.util.string.capitalize, degreesToRadians = fabric2.util.degreesToRadians, objectCaching = !fabric2.isLikelyNode, ALIASING_LIMIT = 2;
      if (fabric2.Object) {
        return;
      }
      fabric2.Object = fabric2.util.createClass(
        fabric2.CommonMethods,
        /** @lends fabric.Object.prototype */
        {
          /**
           * Type of an object (rect, circle, path, etc.).
           * Note that this property is meant to be read-only and not meant to be modified.
           * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.
           * @type String
           * @default
           */
          type: "object",
          /**
           * Horizontal origin of transformation of an object (one of "left", "right", "center")
           * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
           * @type String
           * @default
           */
          originX: "left",
          /**
           * Vertical origin of transformation of an object (one of "top", "bottom", "center")
           * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
           * @type String
           * @default
           */
          originY: "top",
          /**
           * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}
           * @type Number
           * @default
           */
          top: 0,
          /**
           * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}
           * @type Number
           * @default
           */
          left: 0,
          /**
           * Object width
           * @type Number
           * @default
           */
          width: 0,
          /**
           * Object height
           * @type Number
           * @default
           */
          height: 0,
          /**
           * Object scale factor (horizontal)
           * @type Number
           * @default
           */
          scaleX: 1,
          /**
           * Object scale factor (vertical)
           * @type Number
           * @default
           */
          scaleY: 1,
          /**
           * When true, an object is rendered as flipped horizontally
           * @type Boolean
           * @default
           */
          flipX: false,
          /**
           * When true, an object is rendered as flipped vertically
           * @type Boolean
           * @default
           */
          flipY: false,
          /**
           * Opacity of an object
           * @type Number
           * @default
           */
          opacity: 1,
          /**
           * Angle of rotation of an object (in degrees)
           * @type Number
           * @default
           */
          angle: 0,
          /**
           * Angle of skew on x axes of an object (in degrees)
           * @type Number
           * @default
           */
          skewX: 0,
          /**
           * Angle of skew on y axes of an object (in degrees)
           * @type Number
           * @default
           */
          skewY: 0,
          /**
           * Size of object's controlling corners (in pixels)
           * @type Number
           * @default
           */
          cornerSize: 13,
          /**
           * Size of object's controlling corners when touch interaction is detected
           * @type Number
           * @default
           */
          touchCornerSize: 24,
          /**
           * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)
           * @type Boolean
           * @default
           */
          transparentCorners: true,
          /**
           * Default cursor value used when hovering over this object on canvas
           * @type String
           * @default
           */
          hoverCursor: null,
          /**
           * Default cursor value used when moving this object on canvas
           * @type String
           * @default
           */
          moveCursor: null,
          /**
           * Padding between object and its controlling borders (in pixels)
           * @type Number
           * @default
           */
          padding: 0,
          /**
           * Color of controlling borders of an object (when it's active)
           * @type String
           * @default
           */
          borderColor: "rgb(178,204,255)",
          /**
           * Array specifying dash pattern of an object's borders (hasBorder must be true)
           * @since 1.6.2
           * @type Array
           */
          borderDashArray: null,
          /**
           * Color of controlling corners of an object (when it's active)
           * @type String
           * @default
           */
          cornerColor: "rgb(178,204,255)",
          /**
           * Color of controlling corners of an object (when it's active and transparentCorners false)
           * @since 1.6.2
           * @type String
           * @default
           */
          cornerStrokeColor: null,
          /**
           * Specify style of control, 'rect' or 'circle'
           * @since 1.6.2
           * @type String
           */
          cornerStyle: "rect",
          /**
           * Array specifying dash pattern of an object's control (hasBorder must be true)
           * @since 1.6.2
           * @type Array
           */
          cornerDashArray: null,
          /**
           * When true, this object will use center point as the origin of transformation
           * when being scaled via the controls.
           * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
           * @since 1.3.4
           * @type Boolean
           * @default
           */
          centeredScaling: false,
          /**
           * When true, this object will use center point as the origin of transformation
           * when being rotated via the controls.
           * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
           * @since 1.3.4
           * @type Boolean
           * @default
           */
          centeredRotation: true,
          /**
           * Color of object's fill
           * takes css colors https://www.w3.org/TR/css-color-3/
           * @type String
           * @default
           */
          fill: "rgb(0,0,0)",
          /**
           * Fill rule used to fill an object
           * accepted values are nonzero, evenodd
           * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)
           * @type String
           * @default
           */
          fillRule: "nonzero",
          /**
           * Composite rule used for canvas globalCompositeOperation
           * @type String
           * @default
           */
          globalCompositeOperation: "source-over",
          /**
           * Background color of an object.
           * takes css colors https://www.w3.org/TR/css-color-3/
           * @type String
           * @default
           */
          backgroundColor: "",
          /**
           * Selection Background color of an object. colored layer behind the object when it is active.
           * does not mix good with globalCompositeOperation methods.
           * @type String
           * @default
           */
          selectionBackgroundColor: "",
          /**
           * When defined, an object is rendered via stroke and this property specifies its color
           * takes css colors https://www.w3.org/TR/css-color-3/
           * @type String
           * @default
           */
          stroke: null,
          /**
           * Width of a stroke used to render this object
           * @type Number
           * @default
           */
          strokeWidth: 1,
          /**
           * Array specifying dash pattern of an object's stroke (stroke must be defined)
           * @type Array
           */
          strokeDashArray: null,
          /**
           * Line offset of an object's stroke
           * @type Number
           * @default
           */
          strokeDashOffset: 0,
          /**
           * Line endings style of an object's stroke (one of "butt", "round", "square")
           * @type String
           * @default
           */
          strokeLineCap: "butt",
          /**
           * Corner style of an object's stroke (one of "bevel", "round", "miter")
           * @type String
           * @default
           */
          strokeLineJoin: "miter",
          /**
           * Maximum miter length (used for strokeLineJoin = "miter") of an object's stroke
           * @type Number
           * @default
           */
          strokeMiterLimit: 4,
          /**
           * Shadow object representing shadow of this shape
           * @type fabric.Shadow
           * @default
           */
          shadow: null,
          /**
           * Opacity of object's controlling borders when object is active and moving
           * @type Number
           * @default
           */
          borderOpacityWhenMoving: 0.4,
          /**
           * Scale factor of object's controlling borders
           * bigger number will make a thicker border
           * border is 1, so this is basically a border thickness
           * since there is no way to change the border itself.
           * @type Number
           * @default
           */
          borderScaleFactor: 1,
          /**
           * Minimum allowed scale value of an object
           * @type Number
           * @default
           */
          minScaleLimit: 0,
          /**
           * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).
           * But events still fire on it.
           * @type Boolean
           * @default
           */
          selectable: true,
          /**
           * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4
           * @type Boolean
           * @default
           */
          evented: true,
          /**
           * When set to `false`, an object is not rendered on canvas
           * @type Boolean
           * @default
           */
          visible: true,
          /**
           * When set to `false`, object's controls are not displayed and can not be used to manipulate object
           * @type Boolean
           * @default
           */
          hasControls: true,
          /**
           * When set to `false`, object's controlling borders are not rendered
           * @type Boolean
           * @default
           */
          hasBorders: true,
          /**
           * When set to `true`, objects are "found" on canvas on per-pixel basis rather than according to bounding box
           * @type Boolean
           * @default
           */
          perPixelTargetFind: false,
          /**
           * When `false`, default object's values are not included in its serialization
           * @type Boolean
           * @default
           */
          includeDefaultValues: true,
          /**
           * When `true`, object horizontal movement is locked
           * @type Boolean
           * @default
           */
          lockMovementX: false,
          /**
           * When `true`, object vertical movement is locked
           * @type Boolean
           * @default
           */
          lockMovementY: false,
          /**
           * When `true`, object rotation is locked
           * @type Boolean
           * @default
           */
          lockRotation: false,
          /**
           * When `true`, object horizontal scaling is locked
           * @type Boolean
           * @default
           */
          lockScalingX: false,
          /**
           * When `true`, object vertical scaling is locked
           * @type Boolean
           * @default
           */
          lockScalingY: false,
          /**
           * When `true`, object horizontal skewing is locked
           * @type Boolean
           * @default
           */
          lockSkewingX: false,
          /**
           * When `true`, object vertical skewing is locked
           * @type Boolean
           * @default
           */
          lockSkewingY: false,
          /**
           * When `true`, object cannot be flipped by scaling into negative values
           * @type Boolean
           * @default
           */
          lockScalingFlip: false,
          /**
           * When `true`, object is not exported in OBJECT/JSON
           * @since 1.6.3
           * @type Boolean
           * @default
           */
          excludeFromExport: false,
          /**
           * When `true`, object is cached on an additional canvas.
           * When `false`, object is not cached unless necessary ( clipPath )
           * default to true
           * @since 1.7.0
           * @type Boolean
           * @default true
           */
          objectCaching,
          /**
           * When `true`, object properties are checked for cache invalidation. In some particular
           * situation you may want this to be disabled ( spray brush, very big, groups)
           * or if your application does not allow you to modify properties for groups child you want
           * to disable it for groups.
           * default to false
           * since 1.7.0
           * @type Boolean
           * @default false
           */
          statefullCache: false,
          /**
           * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled
           * too much and will be redrawn with correct details at the end of scaling.
           * this setting is performance and application dependant.
           * default to true
           * since 1.7.0
           * @type Boolean
           * @default true
           */
          noScaleCache: true,
          /**
           * When `false`, the stoke width will scale with the object.
           * When `true`, the stroke will always match the exact pixel size entered for stroke width.
           * default to false
           * @since 2.6.0
           * @type Boolean
           * @default false
           * @type Boolean
           * @default false
           */
          strokeUniform: false,
          /**
           * When set to `true`, object's cache will be rerendered next render call.
           * since 1.7.0
           * @type Boolean
           * @default true
           */
          dirty: true,
          /**
           * keeps the value of the last hovered corner during mouse move.
           * 0 is no corner, or 'mt', 'ml', 'mtr' etc..
           * It should be private, but there is no harm in using it as
           * a read-only property.
           * @type number|string|any
           * @default 0
           */
          __corner: 0,
          /**
           * Determines if the fill or the stroke is drawn first (one of "fill" or "stroke")
           * @type String
           * @default
           */
          paintFirst: "fill",
          /**
           * When 'down', object is set to active on mousedown/touchstart
           * When 'up', object is set to active on mouseup/touchend
           * Experimental. Let's see if this breaks anything before supporting officially
           * @private
           * since 4.4.0
           * @type String
           * @default 'down'
           */
          activeOn: "down",
          /**
           * List of properties to consider when checking if state
           * of an object is changed (fabric.Object#hasStateChanged)
           * as well as for history (undo/redo) purposes
           * @type Array
           */
          stateProperties: "top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),
          /**
           * List of properties to consider when checking if cache needs refresh
           * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
           * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
           * and refreshed at the next render
           * @type Array
           */
          cacheProperties: "fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),
          /**
           * List of properties to consider for animating colors.
           * @type Array
           */
          colorProperties: "fill stroke backgroundColor".split(" "),
          /**
           * a fabricObject that, without stroke define a clipping area with their shape. filled in black
           * the clipPath object gets used when the object has rendered, and the context is placed in the center
           * of the object cacheCanvas.
           * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'
           * @type fabric.Object
           */
          clipPath: void 0,
          /**
           * Meaningful ONLY when the object is used as clipPath.
           * if true, the clipPath will make the object clip to the outside of the clipPath
           * since 2.4.0
           * @type boolean
           * @default false
           */
          inverted: false,
          /**
           * Meaningful ONLY when the object is used as clipPath.
           * if true, the clipPath will have its top and left relative to canvas, and will
           * not be influenced by the object transform. This will make the clipPath relative
           * to the canvas, but clipping just a particular object.
           * WARNING this is beta, this feature may change or be renamed.
           * since 2.4.0
           * @type boolean
           * @default false
           */
          absolutePositioned: false,
          /**
           * Constructor
           * @param {Object} [options] Options object
           */
          initialize: function(options) {
            if (options) {
              this.setOptions(options);
            }
          },
          /**
           * Create a the canvas used to keep the cached copy of the object
           * @private
           */
          _createCacheCanvas: function() {
            this._cacheProperties = {};
            this._cacheCanvas = fabric2.util.createCanvasElement();
            this._cacheContext = this._cacheCanvas.getContext("2d");
            this._updateCacheCanvas();
            this.dirty = true;
          },
          /**
           * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal
           * and each side do not cross fabric.cacheSideLimit
           * those numbers are configurable so that you can get as much detail as you want
           * making bargain with performances.
           * @param {Object} dims
           * @param {Object} dims.width width of canvas
           * @param {Object} dims.height height of canvas
           * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache
           * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache
           * @return {Object}.width width of canvas
           * @return {Object}.height height of canvas
           * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
           * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
           */
          _limitCacheSize: function(dims) {
            var perfLimitSizeTotal = fabric2.perfLimitSizeTotal, width = dims.width, height = dims.height, max = fabric2.maxCacheSideLimit, min = fabric2.minCacheSideLimit;
            if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {
              if (width < min) {
                dims.width = min;
              }
              if (height < min) {
                dims.height = min;
              }
              return dims;
            }
            var ar = width / height, limitedDims = fabric2.util.limitDimsByArea(ar, perfLimitSizeTotal), capValue = fabric2.util.capValue, x = capValue(min, limitedDims.x, max), y2 = capValue(min, limitedDims.y, max);
            if (width > x) {
              dims.zoomX /= width / x;
              dims.width = x;
              dims.capped = true;
            }
            if (height > y2) {
              dims.zoomY /= height / y2;
              dims.height = y2;
              dims.capped = true;
            }
            return dims;
          },
          /**
           * Return the dimension and the zoom level needed to create a cache canvas
           * big enough to host the object to be cached.
           * @private
           * @return {Object}.x width of object to be cached
           * @return {Object}.y height of object to be cached
           * @return {Object}.width width of canvas
           * @return {Object}.height height of canvas
           * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
           * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
           */
          _getCacheCanvasDimensions: function() {
            var objectScale = this.getTotalObjectScaling(), dim = this._getTransformedDimensions(0, 0), neededX = dim.x * objectScale.scaleX / this.scaleX, neededY = dim.y * objectScale.scaleY / this.scaleY;
            return {
              // for sure this ALIASING_LIMIT is slightly creating problem
              // in situation in which the cache canvas gets an upper limit
              // also objectScale contains already scaleX and scaleY
              width: neededX + ALIASING_LIMIT,
              height: neededY + ALIASING_LIMIT,
              zoomX: objectScale.scaleX,
              zoomY: objectScale.scaleY,
              x: neededX,
              y: neededY
            };
          },
          /**
           * Update width and height of the canvas for cache
           * returns true or false if canvas needed resize.
           * @private
           * @return {Boolean} true if the canvas has been resized
           */
          _updateCacheCanvas: function() {
            var targetCanvas = this.canvas;
            if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {
              var target = targetCanvas._currentTransform.target, action = targetCanvas._currentTransform.action;
              if (this === target && action.slice && action.slice(0, 5) === "scale") {
                return false;
              }
            }
            var canvas = this._cacheCanvas, dims = this._limitCacheSize(this._getCacheCanvasDimensions()), minCacheSize = fabric2.minCacheSideLimit, width = dims.width, height = dims.height, drawingWidth, drawingHeight, zoomX = dims.zoomX, zoomY = dims.zoomY, dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight, zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY, shouldRedraw = dimensionsChanged || zoomChanged, additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;
            if (dimensionsChanged) {
              var canvasWidth = this._cacheCanvas.width, canvasHeight = this._cacheCanvas.height, sizeGrowing = width > canvasWidth || height > canvasHeight, sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) && canvasWidth > minCacheSize && canvasHeight > minCacheSize;
              shouldResizeCanvas = sizeGrowing || sizeShrinking;
              if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {
                additionalWidth = width * 0.1;
                additionalHeight = height * 0.1;
              }
            }
            if (this instanceof fabric2.Text && this.path) {
              shouldRedraw = true;
              shouldResizeCanvas = true;
              additionalWidth += this.getHeightOfLine(0) * this.zoomX;
              additionalHeight += this.getHeightOfLine(0) * this.zoomY;
            }
            if (shouldRedraw) {
              if (shouldResizeCanvas) {
                canvas.width = Math.ceil(width + additionalWidth);
                canvas.height = Math.ceil(height + additionalHeight);
              } else {
                this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);
                this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);
              }
              drawingWidth = dims.x / 2;
              drawingHeight = dims.y / 2;
              this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;
              this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;
              this.cacheWidth = width;
              this.cacheHeight = height;
              this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);
              this._cacheContext.scale(zoomX, zoomY);
              this.zoomX = zoomX;
              this.zoomY = zoomY;
              return true;
            }
            return false;
          },
          /**
           * Sets object's properties from options
           * @param {Object} [options] Options object
           */
          setOptions: function(options) {
            this._setOptions(options);
            this._initGradient(options.fill, "fill");
            this._initGradient(options.stroke, "stroke");
            this._initPattern(options.fill, "fill");
            this._initPattern(options.stroke, "stroke");
          },
          /**
           * Transforms context when rendering an object
           * @param {CanvasRenderingContext2D} ctx Context
           */
          transform: function(ctx) {
            var needFullTransform = this.group && !this.group._transformDone || this.group && this.canvas && ctx === this.canvas.contextTop;
            var m2 = this.calcTransformMatrix(!needFullTransform);
            ctx.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
          },
          /**
           * Returns an object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} Object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            var NUM_FRACTION_DIGITS = fabric2.Object.NUM_FRACTION_DIGITS, object = {
              type: this.type,
              version: fabric2.version,
              originX: this.originX,
              originY: this.originY,
              left: toFixed(this.left, NUM_FRACTION_DIGITS),
              top: toFixed(this.top, NUM_FRACTION_DIGITS),
              width: toFixed(this.width, NUM_FRACTION_DIGITS),
              height: toFixed(this.height, NUM_FRACTION_DIGITS),
              fill: this.fill && this.fill.toObject ? this.fill.toObject() : this.fill,
              stroke: this.stroke && this.stroke.toObject ? this.stroke.toObject() : this.stroke,
              strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),
              strokeDashArray: this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,
              strokeLineCap: this.strokeLineCap,
              strokeDashOffset: this.strokeDashOffset,
              strokeLineJoin: this.strokeLineJoin,
              strokeUniform: this.strokeUniform,
              strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),
              scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),
              scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),
              angle: toFixed(this.angle, NUM_FRACTION_DIGITS),
              flipX: this.flipX,
              flipY: this.flipY,
              opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),
              shadow: this.shadow && this.shadow.toObject ? this.shadow.toObject() : this.shadow,
              visible: this.visible,
              backgroundColor: this.backgroundColor,
              fillRule: this.fillRule,
              paintFirst: this.paintFirst,
              globalCompositeOperation: this.globalCompositeOperation,
              skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),
              skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS)
            };
            if (this.clipPath && !this.clipPath.excludeFromExport) {
              object.clipPath = this.clipPath.toObject(propertiesToInclude);
              object.clipPath.inverted = this.clipPath.inverted;
              object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;
            }
            fabric2.util.populateWithProperties(this, object, propertiesToInclude);
            if (!this.includeDefaultValues) {
              object = this._removeDefaultValues(object);
            }
            return object;
          },
          /**
           * Returns (dataless) object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} Object representation of an instance
           */
          toDatalessObject: function(propertiesToInclude) {
            return this.toObject(propertiesToInclude);
          },
          /**
           * @private
           * @param {Object} object
           */
          _removeDefaultValues: function(object) {
            var prototype = fabric2.util.getKlass(object.type).prototype, stateProperties = prototype.stateProperties;
            stateProperties.forEach(function(prop) {
              if (prop === "left" || prop === "top") {
                return;
              }
              if (object[prop] === prototype[prop]) {
                delete object[prop];
              }
              var isArray = Object.prototype.toString.call(object[prop]) === "[object Array]" && Object.prototype.toString.call(prototype[prop]) === "[object Array]";
              if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {
                delete object[prop];
              }
            });
            return object;
          },
          /**
           * Returns a string representation of an instance
           * @return {String}
           */
          toString: function() {
            return "#<fabric." + capitalize(this.type) + ">";
          },
          /**
           * Return the object scale factor counting also the group scaling
           * @return {Object} object with scaleX and scaleY properties
           */
          getObjectScaling: function() {
            if (!this.group) {
              return {
                scaleX: this.scaleX,
                scaleY: this.scaleY
              };
            }
            var options = fabric2.util.qrDecompose(this.calcTransformMatrix());
            return { scaleX: Math.abs(options.scaleX), scaleY: Math.abs(options.scaleY) };
          },
          /**
           * Return the object scale factor counting also the group scaling, zoom and retina
           * @return {Object} object with scaleX and scaleY properties
           */
          getTotalObjectScaling: function() {
            var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;
            if (this.canvas) {
              var zoom = this.canvas.getZoom();
              var retina = this.canvas.getRetinaScaling();
              scaleX *= zoom * retina;
              scaleY *= zoom * retina;
            }
            return { scaleX, scaleY };
          },
          /**
           * Return the object opacity counting also the group property
           * @return {Number}
           */
          getObjectOpacity: function() {
            var opacity = this.opacity;
            if (this.group) {
              opacity *= this.group.getObjectOpacity();
            }
            return opacity;
          },
          /**
           * @private
           * @param {String} key
           * @param {*} value
           * @return {fabric.Object} thisArg
           */
          _set: function(key, value) {
            var shouldConstrainValue = key === "scaleX" || key === "scaleY", isChanged = this[key] !== value, groupNeedsUpdate = false;
            if (shouldConstrainValue) {
              value = this._constrainScale(value);
            }
            if (key === "scaleX" && value < 0) {
              this.flipX = !this.flipX;
              value *= -1;
            } else if (key === "scaleY" && value < 0) {
              this.flipY = !this.flipY;
              value *= -1;
            } else if (key === "shadow" && value && !(value instanceof fabric2.Shadow)) {
              value = new fabric2.Shadow(value);
            } else if (key === "dirty" && this.group) {
              this.group.set("dirty", value);
            }
            this[key] = value;
            if (isChanged) {
              groupNeedsUpdate = this.group && this.group.isOnACache();
              if (this.cacheProperties.indexOf(key) > -1) {
                this.dirty = true;
                groupNeedsUpdate && this.group.set("dirty", true);
              } else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {
                this.group.set("dirty", true);
              }
            }
            return this;
          },
          /**
           * This callback function is called by the parent group of an object every
           * time a non-delegated property changes on the group. It is passed the key
           * and value as parameters. Not adding in this function's signature to avoid
           * Travis build error about unused variables.
           */
          setOnGroup: function() {
          },
          /**
           * Retrieves viewportTransform from Object's canvas if possible
           * @method getViewportTransform
           * @memberOf fabric.Object.prototype
           * @return {Array}
           */
          getViewportTransform: function() {
            if (this.canvas && this.canvas.viewportTransform) {
              return this.canvas.viewportTransform;
            }
            return fabric2.iMatrix.concat();
          },
          /*
           * @private
           * return if the object would be visible in rendering
           * @memberOf fabric.Object.prototype
           * @return {Boolean}
           */
          isNotVisible: function() {
            return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;
          },
          /**
           * Renders an object on a specified context
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          render: function(ctx) {
            if (this.isNotVisible()) {
              return;
            }
            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
              return;
            }
            ctx.save();
            this._setupCompositeOperation(ctx);
            this.drawSelectionBackground(ctx);
            this.transform(ctx);
            this._setOpacity(ctx);
            this._setShadow(ctx, this);
            if (this.shouldCache()) {
              this.renderCache();
              this.drawCacheOnCanvas(ctx);
            } else {
              this._removeCacheCanvas();
              this.dirty = false;
              this.drawObject(ctx);
              if (this.objectCaching && this.statefullCache) {
                this.saveState({ propertySet: "cacheProperties" });
              }
            }
            ctx.restore();
          },
          renderCache: function(options) {
            options = options || {};
            if (!this._cacheCanvas) {
              this._createCacheCanvas();
            }
            if (this.isCacheDirty()) {
              this.statefullCache && this.saveState({ propertySet: "cacheProperties" });
              this.drawObject(this._cacheContext, options.forClipping);
              this.dirty = false;
            }
          },
          /**
           * Remove cacheCanvas and its dimensions from the objects
           */
          _removeCacheCanvas: function() {
            this._cacheCanvas = null;
            this.cacheWidth = 0;
            this.cacheHeight = 0;
          },
          /**
           * return true if the object will draw a stroke
           * Does not consider text styles. This is just a shortcut used at rendering time
           * We want it to be an approximation and be fast.
           * wrote to avoid extra caching, it has to return true when stroke happens,
           * can guess when it will not happen at 100% chance, does not matter if it misses
           * some use case where the stroke is invisible.
           * @since 3.0.0
           * @returns Boolean
           */
          hasStroke: function() {
            return this.stroke && this.stroke !== "transparent" && this.strokeWidth !== 0;
          },
          /**
           * return true if the object will draw a fill
           * Does not consider text styles. This is just a shortcut used at rendering time
           * We want it to be an approximation and be fast.
           * wrote to avoid extra caching, it has to return true when fill happens,
           * can guess when it will not happen at 100% chance, does not matter if it misses
           * some use case where the fill is invisible.
           * @since 3.0.0
           * @returns Boolean
           */
          hasFill: function() {
            return this.fill && this.fill !== "transparent";
          },
          /**
           * When set to `true`, force the object to have its own cache, even if it is inside a group
           * it may be needed when your object behave in a particular way on the cache and always needs
           * its own isolated canvas to render correctly.
           * Created to be overridden
           * since 1.7.12
           * @returns Boolean
           */
          needsItsOwnCache: function() {
            if (this.paintFirst === "stroke" && this.hasFill() && this.hasStroke() && typeof this.shadow === "object") {
              return true;
            }
            if (this.clipPath) {
              return true;
            }
            return false;
          },
          /**
           * Decide if the object should cache or not. Create its own cache level
           * objectCaching is a global flag, wins over everything
           * needsItsOwnCache should be used when the object drawing method requires
           * a cache step. None of the fabric classes requires it.
           * Generally you do not cache objects in groups because the group outside is cached.
           * Read as: cache if is needed, or if the feature is enabled but we are not already caching.
           * @return {Boolean}
           */
          shouldCache: function() {
            this.ownCaching = this.needsItsOwnCache() || this.objectCaching && (!this.group || !this.group.isOnACache());
            return this.ownCaching;
          },
          /**
           * Check if this object or a child object will cast a shadow
           * used by Group.shouldCache to know if child has a shadow recursively
           * @return {Boolean}
           */
          willDrawShadow: function() {
            return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);
          },
          /**
           * Execute the drawing operation for an object clipPath
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          drawClipPathOnCache: function(ctx) {
            var path = this.clipPath;
            ctx.save();
            if (path.inverted) {
              ctx.globalCompositeOperation = "destination-out";
            } else {
              ctx.globalCompositeOperation = "destination-in";
            }
            if (path.absolutePositioned) {
              var m2 = fabric2.util.invertTransform(this.calcTransformMatrix());
              ctx.transform(m2[0], m2[1], m2[2], m2[3], m2[4], m2[5]);
            }
            path.transform(ctx);
            ctx.scale(1 / path.zoomX, 1 / path.zoomY);
            ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
            ctx.restore();
          },
          /**
           * Execute the drawing operation for an object on a specified context
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          drawObject: function(ctx, forClipping) {
            var originalFill = this.fill, originalStroke = this.stroke;
            if (forClipping) {
              this.fill = "black";
              this.stroke = "";
              this._setClippingProperties(ctx);
            } else {
              this._renderBackground(ctx);
            }
            this._render(ctx);
            this._drawClipPath(ctx);
            this.fill = originalFill;
            this.stroke = originalStroke;
          },
          _drawClipPath: function(ctx) {
            var path = this.clipPath;
            if (!path) {
              return;
            }
            path.canvas = this.canvas;
            path.shouldCache();
            path._transformDone = true;
            path.renderCache({ forClipping: true });
            this.drawClipPathOnCache(ctx);
          },
          /**
           * Paint the cached copy of the object on the target context.
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          drawCacheOnCanvas: function(ctx) {
            ctx.scale(1 / this.zoomX, 1 / this.zoomY);
            ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);
          },
          /**
           * Check if cache is dirty
           * @param {Boolean} skipCanvas skip canvas checks because this object is painted
           * on parent canvas.
           */
          isCacheDirty: function(skipCanvas) {
            if (this.isNotVisible()) {
              return false;
            }
            if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {
              return true;
            } else {
              if (this.dirty || this.clipPath && this.clipPath.absolutePositioned || this.statefullCache && this.hasStateChanged("cacheProperties")) {
                if (this._cacheCanvas && !skipCanvas) {
                  var width = this.cacheWidth / this.zoomX;
                  var height = this.cacheHeight / this.zoomY;
                  this._cacheContext.clearRect(-width / 2, -height / 2, width, height);
                }
                return true;
              }
            }
            return false;
          },
          /**
           * Draws a background for the object big as its untransformed dimensions
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderBackground: function(ctx) {
            if (!this.backgroundColor) {
              return;
            }
            var dim = this._getNonTransformedDimensions();
            ctx.fillStyle = this.backgroundColor;
            ctx.fillRect(
              -dim.x / 2,
              -dim.y / 2,
              dim.x,
              dim.y
            );
            this._removeShadow(ctx);
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _setOpacity: function(ctx) {
            if (this.group && !this.group._transformDone) {
              ctx.globalAlpha = this.getObjectOpacity();
            } else {
              ctx.globalAlpha *= this.opacity;
            }
          },
          _setStrokeStyles: function(ctx, decl) {
            var stroke = decl.stroke;
            if (stroke) {
              ctx.lineWidth = decl.strokeWidth;
              ctx.lineCap = decl.strokeLineCap;
              ctx.lineDashOffset = decl.strokeDashOffset;
              ctx.lineJoin = decl.strokeLineJoin;
              ctx.miterLimit = decl.strokeMiterLimit;
              if (stroke.toLive) {
                if (stroke.gradientUnits === "percentage" || stroke.gradientTransform || stroke.patternTransform) {
                  this._applyPatternForTransformedGradient(ctx, stroke);
                } else {
                  ctx.strokeStyle = stroke.toLive(ctx, this);
                  this._applyPatternGradientTransform(ctx, stroke);
                }
              } else {
                ctx.strokeStyle = decl.stroke;
              }
            }
          },
          _setFillStyles: function(ctx, decl) {
            var fill = decl.fill;
            if (fill) {
              if (fill.toLive) {
                ctx.fillStyle = fill.toLive(ctx, this);
                this._applyPatternGradientTransform(ctx, decl.fill);
              } else {
                ctx.fillStyle = fill;
              }
            }
          },
          _setClippingProperties: function(ctx) {
            ctx.globalAlpha = 1;
            ctx.strokeStyle = "transparent";
            ctx.fillStyle = "#000000";
          },
          /**
           * @private
           * Sets line dash
           * @param {CanvasRenderingContext2D} ctx Context to set the dash line on
           * @param {Array} dashArray array representing dashes
           */
          _setLineDash: function(ctx, dashArray) {
            if (!dashArray || dashArray.length === 0) {
              return;
            }
            if (1 & dashArray.length) {
              dashArray.push.apply(dashArray, dashArray);
            }
            ctx.setLineDash(dashArray);
          },
          /**
           * Renders controls and borders for the object
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {Object} [styleOverride] properties to override the object style
           */
          _renderControls: function(ctx, styleOverride) {
            var vpt = this.getViewportTransform(), matrix = this.calcTransformMatrix(), options, drawBorders, drawControls;
            styleOverride = styleOverride || {};
            drawBorders = typeof styleOverride.hasBorders !== "undefined" ? styleOverride.hasBorders : this.hasBorders;
            drawControls = typeof styleOverride.hasControls !== "undefined" ? styleOverride.hasControls : this.hasControls;
            matrix = fabric2.util.multiplyTransformMatrices(vpt, matrix);
            options = fabric2.util.qrDecompose(matrix);
            ctx.save();
            ctx.translate(options.translateX, options.translateY);
            ctx.lineWidth = 1 * this.borderScaleFactor;
            if (!this.group) {
              ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
            }
            ctx.rotate(degreesToRadians(options.angle));
            if (styleOverride.forActiveSelection || this.group) {
              drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);
            } else {
              drawBorders && this.drawBorders(ctx, styleOverride);
            }
            drawControls && this.drawControls(ctx, styleOverride);
            ctx.restore();
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _setShadow: function(ctx) {
            if (!this.shadow) {
              return;
            }
            var shadow = this.shadow, canvas = this.canvas, scaling, multX = canvas && canvas.viewportTransform[0] || 1, multY = canvas && canvas.viewportTransform[3] || 1;
            if (shadow.nonScaling) {
              scaling = { scaleX: 1, scaleY: 1 };
            } else {
              scaling = this.getObjectScaling();
            }
            if (canvas && canvas._isRetinaScaling()) {
              multX *= fabric2.devicePixelRatio;
              multY *= fabric2.devicePixelRatio;
            }
            ctx.shadowColor = shadow.color;
            ctx.shadowBlur = shadow.blur * fabric2.browserShadowBlurConstant * (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;
            ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;
            ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _removeShadow: function(ctx) {
            if (!this.shadow) {
              return;
            }
            ctx.shadowColor = "";
            ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {Object} filler fabric.Pattern or fabric.Gradient
           * @return {Object} offset.offsetX offset for text rendering
           * @return {Object} offset.offsetY offset for text rendering
           */
          _applyPatternGradientTransform: function(ctx, filler) {
            if (!filler || !filler.toLive) {
              return { offsetX: 0, offsetY: 0 };
            }
            var t2 = filler.gradientTransform || filler.patternTransform;
            var offsetX = -this.width / 2 + filler.offsetX || 0, offsetY = -this.height / 2 + filler.offsetY || 0;
            if (filler.gradientUnits === "percentage") {
              ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);
            } else {
              ctx.transform(1, 0, 0, 1, offsetX, offsetY);
            }
            if (t2) {
              ctx.transform(t2[0], t2[1], t2[2], t2[3], t2[4], t2[5]);
            }
            return { offsetX, offsetY };
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderPaintInOrder: function(ctx) {
            if (this.paintFirst === "stroke") {
              this._renderStroke(ctx);
              this._renderFill(ctx);
            } else {
              this._renderFill(ctx);
              this._renderStroke(ctx);
            }
          },
          /**
           * @private
           * function that actually render something on the context.
           * empty here to allow Obects to work on tests to benchmark fabric functionalites
           * not related to rendering
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function() {
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderFill: function(ctx) {
            if (!this.fill) {
              return;
            }
            ctx.save();
            this._setFillStyles(ctx, this);
            if (this.fillRule === "evenodd") {
              ctx.fill("evenodd");
            } else {
              ctx.fill();
            }
            ctx.restore();
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderStroke: function(ctx) {
            if (!this.stroke || this.strokeWidth === 0) {
              return;
            }
            if (this.shadow && !this.shadow.affectStroke) {
              this._removeShadow(ctx);
            }
            ctx.save();
            if (this.strokeUniform && this.group) {
              var scaling = this.getObjectScaling();
              ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);
            } else if (this.strokeUniform) {
              ctx.scale(1 / this.scaleX, 1 / this.scaleY);
            }
            this._setLineDash(ctx, this.strokeDashArray);
            this._setStrokeStyles(ctx, this);
            ctx.stroke();
            ctx.restore();
          },
          /**
           * This function try to patch the missing gradientTransform on canvas gradients.
           * transforming a context to transform the gradient, is going to transform the stroke too.
           * we want to transform the gradient but not the stroke operation, so we create
           * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
           * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size
           * is limited.
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {fabric.Gradient} filler a fabric gradient instance
           */
          _applyPatternForTransformedGradient: function(ctx, filler) {
            var dims = this._limitCacheSize(this._getCacheCanvasDimensions()), pCanvas = fabric2.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(), width = dims.x / this.scaleX / retinaScaling, height = dims.y / this.scaleY / retinaScaling;
            pCanvas.width = width;
            pCanvas.height = height;
            pCtx = pCanvas.getContext("2d");
            pCtx.beginPath();
            pCtx.moveTo(0, 0);
            pCtx.lineTo(width, 0);
            pCtx.lineTo(width, height);
            pCtx.lineTo(0, height);
            pCtx.closePath();
            pCtx.translate(width / 2, height / 2);
            pCtx.scale(
              dims.zoomX / this.scaleX / retinaScaling,
              dims.zoomY / this.scaleY / retinaScaling
            );
            this._applyPatternGradientTransform(pCtx, filler);
            pCtx.fillStyle = filler.toLive(ctx);
            pCtx.fill();
            ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);
            ctx.scale(
              retinaScaling * this.scaleX / dims.zoomX,
              retinaScaling * this.scaleY / dims.zoomY
            );
            ctx.strokeStyle = pCtx.createPattern(pCanvas, "no-repeat");
          },
          /**
           * This function is an helper for svg import. it returns the center of the object in the svg
           * untransformed coordinates
           * @private
           * @return {Object} center point from element coordinates
           */
          _findCenterFromElement: function() {
            return { x: this.left + this.width / 2, y: this.top + this.height / 2 };
          },
          /**
           * This function is an helper for svg import. it decompose the transformMatrix
           * and assign properties to object.
           * untransformed coordinates
           * @private
           * @chainable
           */
          _assignTransformMatrixProps: function() {
            if (this.transformMatrix) {
              var options = fabric2.util.qrDecompose(this.transformMatrix);
              this.flipX = false;
              this.flipY = false;
              this.set("scaleX", options.scaleX);
              this.set("scaleY", options.scaleY);
              this.angle = options.angle;
              this.skewX = options.skewX;
              this.skewY = 0;
            }
          },
          /**
           * This function is an helper for svg import. it removes the transform matrix
           * and set to object properties that fabricjs can handle
           * @private
           * @param {Object} preserveAspectRatioOptions
           * @return {thisArg}
           */
          _removeTransformMatrix: function(preserveAspectRatioOptions) {
            var center = this._findCenterFromElement();
            if (this.transformMatrix) {
              this._assignTransformMatrixProps();
              center = fabric2.util.transformPoint(center, this.transformMatrix);
            }
            this.transformMatrix = null;
            if (preserveAspectRatioOptions) {
              this.scaleX *= preserveAspectRatioOptions.scaleX;
              this.scaleY *= preserveAspectRatioOptions.scaleY;
              this.cropX = preserveAspectRatioOptions.cropX;
              this.cropY = preserveAspectRatioOptions.cropY;
              center.x += preserveAspectRatioOptions.offsetLeft;
              center.y += preserveAspectRatioOptions.offsetTop;
              this.width = preserveAspectRatioOptions.width;
              this.height = preserveAspectRatioOptions.height;
            }
            this.setPositionByOrigin(center, "center", "center");
          },
          /**
           * Clones an instance, using a callback method will work for every object.
           * @param {Function} callback Callback is invoked with a clone as a first argument
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           */
          clone: function(callback, propertiesToInclude) {
            var objectForm = this.toObject(propertiesToInclude);
            if (this.constructor.fromObject) {
              this.constructor.fromObject(objectForm, callback);
            } else {
              fabric2.Object._fromObject("Object", objectForm, callback);
            }
          },
          /**
           * Creates an instance of fabric.Image out of an object
           * makes use of toCanvasElement.
           * Once this method was based on toDataUrl and loadImage, so it also had a quality
           * and format option. toCanvasElement is faster and produce no loss of quality.
           * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.
           * toCanvasElement and then toBlob from the obtained canvas is also a good option.
           * This method is sync now, but still support the callback because we did not want to break.
           * When fabricJS 5.0 will be planned, this will probably be changed to not have a callback.
           * @param {Function} callback callback, invoked with an instance as a first argument
           * @param {Object} [options] for clone as image, passed to toDataURL
           * @param {Number} [options.multiplier=1] Multiplier to scale by
           * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
           * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
           * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
           * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
           * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
           * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
           * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
           * @return {fabric.Object} thisArg
           */
          cloneAsImage: function(callback, options) {
            var canvasEl = this.toCanvasElement(options);
            if (callback) {
              callback(new fabric2.Image(canvasEl));
            }
            return this;
          },
          /**
           * Converts an object into a HTMLCanvas element
           * @param {Object} options Options object
           * @param {Number} [options.multiplier=1] Multiplier to scale by
           * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
           * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
           * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
           * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
           * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
           * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
           * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
           * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object
           */
          toCanvasElement: function(options) {
            options || (options = {});
            var utils = fabric2.util, origParams = utils.saveObjectTransform(this), originalGroup = this.group, originalShadow = this.shadow, abs = Math.abs, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric2.devicePixelRatio : 1);
            delete this.group;
            if (options.withoutTransform) {
              utils.resetObjectTransform(this);
            }
            if (options.withoutShadow) {
              this.shadow = null;
            }
            var el = fabric2.util.createCanvasElement(), boundingRect = this.getBoundingRect(true, true), shadow = this.shadow, scaling, shadowOffset = { x: 0, y: 0 }, shadowBlur, width, height;
            if (shadow) {
              shadowBlur = shadow.blur;
              if (shadow.nonScaling) {
                scaling = { scaleX: 1, scaleY: 1 };
              } else {
                scaling = this.getObjectScaling();
              }
              shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.scaleX);
              shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.scaleY);
            }
            width = boundingRect.width + shadowOffset.x;
            height = boundingRect.height + shadowOffset.y;
            el.width = Math.ceil(width);
            el.height = Math.ceil(height);
            var canvas = new fabric2.StaticCanvas(el, {
              enableRetinaScaling: false,
              renderOnAddRemove: false,
              skipOffscreen: false
            });
            if (options.format === "jpeg") {
              canvas.backgroundColor = "#fff";
            }
            this.setPositionByOrigin(new fabric2.Point(canvas.width / 2, canvas.height / 2), "center", "center");
            var originalCanvas = this.canvas;
            canvas.add(this);
            var canvasEl = canvas.toCanvasElement(multiplier || 1, options);
            this.shadow = originalShadow;
            this.set("canvas", originalCanvas);
            if (originalGroup) {
              this.group = originalGroup;
            }
            this.set(origParams).setCoords();
            canvas._objects = [];
            canvas.dispose();
            canvas = null;
            return canvasEl;
          },
          /**
           * Converts an object into a data-url-like string
           * @param {Object} options Options object
           * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
           * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
           * @param {Number} [options.multiplier=1] Multiplier to scale by
           * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
           * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
           * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
           * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
           * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
           * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
           * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
           * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
           */
          toDataURL: function(options) {
            options || (options = {});
            return fabric2.util.toDataURL(this.toCanvasElement(options), options.format || "png", options.quality || 1);
          },
          /**
           * Returns true if specified type is identical to the type of an instance
           * @param {String} type Type to check against
           * @return {Boolean}
           */
          isType: function(type) {
            return this.type === type;
          },
          /**
           * Returns complexity of an instance
           * @return {Number} complexity of this instance (is 1 unless subclassed)
           */
          complexity: function() {
            return 1;
          },
          /**
           * Returns a JSON representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} JSON
           */
          toJSON: function(propertiesToInclude) {
            return this.toObject(propertiesToInclude);
          },
          /**
           * Sets "angle" of an instance with centered rotation
           * @param {Number} angle Angle value (in degrees)
           * @return {fabric.Object} thisArg
           * @chainable
           */
          rotate: function(angle) {
            var shouldCenterOrigin = (this.originX !== "center" || this.originY !== "center") && this.centeredRotation;
            if (shouldCenterOrigin) {
              this._setOriginToCenter();
            }
            this.set("angle", angle);
            if (shouldCenterOrigin) {
              this._resetOrigin();
            }
            return this;
          },
          /**
           * Centers object horizontally on canvas to which it was added last.
           * You might need to call `setCoords` on an object after centering, to update controls area.
           * @return {fabric.Object} thisArg
           * @chainable
           */
          centerH: function() {
            this.canvas && this.canvas.centerObjectH(this);
            return this;
          },
          /**
           * Centers object horizontally on current viewport of canvas to which it was added last.
           * You might need to call `setCoords` on an object after centering, to update controls area.
           * @return {fabric.Object} thisArg
           * @chainable
           */
          viewportCenterH: function() {
            this.canvas && this.canvas.viewportCenterObjectH(this);
            return this;
          },
          /**
           * Centers object vertically on canvas to which it was added last.
           * You might need to call `setCoords` on an object after centering, to update controls area.
           * @return {fabric.Object} thisArg
           * @chainable
           */
          centerV: function() {
            this.canvas && this.canvas.centerObjectV(this);
            return this;
          },
          /**
           * Centers object vertically on current viewport of canvas to which it was added last.
           * You might need to call `setCoords` on an object after centering, to update controls area.
           * @return {fabric.Object} thisArg
           * @chainable
           */
          viewportCenterV: function() {
            this.canvas && this.canvas.viewportCenterObjectV(this);
            return this;
          },
          /**
           * Centers object vertically and horizontally on canvas to which is was added last
           * You might need to call `setCoords` on an object after centering, to update controls area.
           * @return {fabric.Object} thisArg
           * @chainable
           */
          center: function() {
            this.canvas && this.canvas.centerObject(this);
            return this;
          },
          /**
           * Centers object on current viewport of canvas to which it was added last.
           * You might need to call `setCoords` on an object after centering, to update controls area.
           * @return {fabric.Object} thisArg
           * @chainable
           */
          viewportCenter: function() {
            this.canvas && this.canvas.viewportCenterObject(this);
            return this;
          },
          /**
           * Returns coordinates of a pointer relative to an object
           * @param {Event} e Event to operate upon
           * @param {Object} [pointer] Pointer to operate upon (instead of event)
           * @return {Object} Coordinates of a pointer (x, y)
           */
          getLocalPointer: function(e2, pointer) {
            pointer = pointer || this.canvas.getPointer(e2);
            var pClicked = new fabric2.Point(pointer.x, pointer.y), objectLeftTop = this._getLeftTopCoords();
            if (this.angle) {
              pClicked = fabric2.util.rotatePoint(
                pClicked,
                objectLeftTop,
                degreesToRadians(-this.angle)
              );
            }
            return {
              x: pClicked.x - objectLeftTop.x,
              y: pClicked.y - objectLeftTop.y
            };
          },
          /**
           * Sets canvas globalCompositeOperation for specific object
           * custom composition operation for the particular object can be specified using globalCompositeOperation property
           * @param {CanvasRenderingContext2D} ctx Rendering canvas context
           */
          _setupCompositeOperation: function(ctx) {
            if (this.globalCompositeOperation) {
              ctx.globalCompositeOperation = this.globalCompositeOperation;
            }
          }
        }
      );
      fabric2.util.createAccessors && fabric2.util.createAccessors(fabric2.Object);
      extend(fabric2.Object.prototype, fabric2.Observable);
      fabric2.Object.NUM_FRACTION_DIGITS = 2;
      fabric2.Object._fromObject = function(className, object, callback, extraParam) {
        var klass = fabric2[className];
        object = clone(object, true);
        fabric2.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {
          if (typeof patterns[0] !== "undefined") {
            object.fill = patterns[0];
          }
          if (typeof patterns[1] !== "undefined") {
            object.stroke = patterns[1];
          }
          fabric2.util.enlivenObjects([object.clipPath], function(enlivedProps) {
            object.clipPath = enlivedProps[0];
            var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);
            callback && callback(instance);
          });
        });
      };
      fabric2.Object.__uid = 0;
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      var degreesToRadians = fabric.util.degreesToRadians, originXOffset = {
        left: -0.5,
        center: 0,
        right: 0.5
      }, originYOffset = {
        top: -0.5,
        center: 0,
        bottom: 0.5
      };
      fabric.util.object.extend(
        fabric.Object.prototype,
        /** @lends fabric.Object.prototype */
        {
          /**
           * Translates the coordinates from a set of origin to another (based on the object's dimensions)
           * @param {fabric.Point} point The point which corresponds to the originX and originY params
           * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'
           * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'
           * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'
           * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'
           * @return {fabric.Point}
           */
          translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {
            var x = point.x, y2 = point.y, offsetX, offsetY, dim;
            if (typeof fromOriginX === "string") {
              fromOriginX = originXOffset[fromOriginX];
            } else {
              fromOriginX -= 0.5;
            }
            if (typeof toOriginX === "string") {
              toOriginX = originXOffset[toOriginX];
            } else {
              toOriginX -= 0.5;
            }
            offsetX = toOriginX - fromOriginX;
            if (typeof fromOriginY === "string") {
              fromOriginY = originYOffset[fromOriginY];
            } else {
              fromOriginY -= 0.5;
            }
            if (typeof toOriginY === "string") {
              toOriginY = originYOffset[toOriginY];
            } else {
              toOriginY -= 0.5;
            }
            offsetY = toOriginY - fromOriginY;
            if (offsetX || offsetY) {
              dim = this._getTransformedDimensions();
              x = point.x + offsetX * dim.x;
              y2 = point.y + offsetY * dim.y;
            }
            return new fabric.Point(x, y2);
          },
          /**
           * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
           * @param {fabric.Point} point The point which corresponds to the originX and originY params
           * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
           * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
           * @return {fabric.Point}
           */
          translateToCenterPoint: function(point, originX, originY) {
            var p2 = this.translateToGivenOrigin(point, originX, originY, "center", "center");
            if (this.angle) {
              return fabric.util.rotatePoint(p2, point, degreesToRadians(this.angle));
            }
            return p2;
          },
          /**
           * Translates the coordinates from center to origin coordinates (based on the object's dimensions)
           * @param {fabric.Point} center The point which corresponds to center of the object
           * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
           * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
           * @return {fabric.Point}
           */
          translateToOriginPoint: function(center, originX, originY) {
            var p2 = this.translateToGivenOrigin(center, "center", "center", originX, originY);
            if (this.angle) {
              return fabric.util.rotatePoint(p2, center, degreesToRadians(this.angle));
            }
            return p2;
          },
          /**
           * Returns the real center coordinates of the object
           * @return {fabric.Point}
           */
          getCenterPoint: function() {
            var leftTop = new fabric.Point(this.left, this.top);
            return this.translateToCenterPoint(leftTop, this.originX, this.originY);
          },
          /**
           * Returns the coordinates of the object based on center coordinates
           * @param {fabric.Point} point The point which corresponds to the originX and originY params
           * @return {fabric.Point}
           */
          // getOriginPoint: function(center) {
          //   return this.translateToOriginPoint(center, this.originX, this.originY);
          // },
          /**
           * Returns the coordinates of the object as if it has a different origin
           * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
           * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
           * @return {fabric.Point}
           */
          getPointByOrigin: function(originX, originY) {
            var center = this.getCenterPoint();
            return this.translateToOriginPoint(center, originX, originY);
          },
          /**
           * Returns the point in local coordinates
           * @param {fabric.Point} point The point relative to the global coordinate system
           * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
           * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
           * @return {fabric.Point}
           */
          toLocalPoint: function(point, originX, originY) {
            var center = this.getCenterPoint(), p2, p22;
            if (typeof originX !== "undefined" && typeof originY !== "undefined") {
              p2 = this.translateToGivenOrigin(center, "center", "center", originX, originY);
            } else {
              p2 = new fabric.Point(this.left, this.top);
            }
            p22 = new fabric.Point(point.x, point.y);
            if (this.angle) {
              p22 = fabric.util.rotatePoint(p22, center, -degreesToRadians(this.angle));
            }
            return p22.subtractEquals(p2);
          },
          /**
           * Returns the point in global coordinates
           * @param {fabric.Point} The point relative to the local coordinate system
           * @return {fabric.Point}
           */
          // toGlobalPoint: function(point) {
          //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));
          // },
          /**
           * Sets the position of the object taking into consideration the object's origin
           * @param {fabric.Point} pos The new position of the object
           * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
           * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
           * @return {void}
           */
          setPositionByOrigin: function(pos, originX, originY) {
            var center = this.translateToCenterPoint(pos, originX, originY), position = this.translateToOriginPoint(center, this.originX, this.originY);
            this.set("left", position.x);
            this.set("top", position.y);
          },
          /**
           * @param {String} to One of 'left', 'center', 'right'
           */
          adjustPosition: function(to) {
            var angle = degreesToRadians(this.angle), hypotFull = this.getScaledWidth(), xFull = fabric.util.cos(angle) * hypotFull, yFull = fabric.util.sin(angle) * hypotFull, offsetFrom, offsetTo;
            if (typeof this.originX === "string") {
              offsetFrom = originXOffset[this.originX];
            } else {
              offsetFrom = this.originX - 0.5;
            }
            if (typeof to === "string") {
              offsetTo = originXOffset[to];
            } else {
              offsetTo = to - 0.5;
            }
            this.left += xFull * (offsetTo - offsetFrom);
            this.top += yFull * (offsetTo - offsetFrom);
            this.setCoords();
            this.originX = to;
          },
          /**
           * Sets the origin/position of the object to it's center point
           * @private
           * @return {void}
           */
          _setOriginToCenter: function() {
            this._originalOriginX = this.originX;
            this._originalOriginY = this.originY;
            var center = this.getCenterPoint();
            this.originX = "center";
            this.originY = "center";
            this.left = center.x;
            this.top = center.y;
          },
          /**
           * Resets the origin/position of the object to it's original origin
           * @private
           * @return {void}
           */
          _resetOrigin: function() {
            var originPoint = this.translateToOriginPoint(
              this.getCenterPoint(),
              this._originalOriginX,
              this._originalOriginY
            );
            this.originX = this._originalOriginX;
            this.originY = this._originalOriginY;
            this.left = originPoint.x;
            this.top = originPoint.y;
            this._originalOriginX = null;
            this._originalOriginY = null;
          },
          /**
           * @private
           */
          _getLeftTopCoords: function() {
            return this.translateToOriginPoint(this.getCenterPoint(), "left", "top");
          }
        }
      );
    })();
    (function() {
      function arrayFromCoords(coords) {
        return [
          new fabric.Point(coords.tl.x, coords.tl.y),
          new fabric.Point(coords.tr.x, coords.tr.y),
          new fabric.Point(coords.br.x, coords.br.y),
          new fabric.Point(coords.bl.x, coords.bl.y)
        ];
      }
      var util = fabric.util, degreesToRadians = util.degreesToRadians, multiplyMatrices = util.multiplyTransformMatrices, transformPoint = util.transformPoint;
      util.object.extend(
        fabric.Object.prototype,
        /** @lends fabric.Object.prototype */
        {
          /**
           * Describe object's corner position in canvas element coordinates.
           * properties are depending on control keys and padding the main controls.
           * each property is an object with x, y and corner.
           * The `corner` property contains in a similar manner the 4 points of the
           * interactive area of the corner.
           * The coordinates depends from the controls positionHandler and are used
           * to draw and locate controls
           * @memberOf fabric.Object.prototype
           */
          oCoords: null,
          /**
           * Describe object's corner position in canvas object absolute coordinates
           * properties are tl,tr,bl,br and describe the four main corner.
           * each property is an object with x, y, instance of Fabric.Point.
           * The coordinates depends from this properties: width, height, scaleX, scaleY
           * skewX, skewY, angle, strokeWidth, top, left.
           * Those coordinates are useful to understand where an object is. They get updated
           * with oCoords but they do not need to be updated when zoom or panning change.
           * The coordinates get updated with @method setCoords.
           * You can calculate them without updating with @method calcACoords();
           * @memberOf fabric.Object.prototype
           */
          aCoords: null,
          /**
           * Describe object's corner position in canvas element coordinates.
           * includes padding. Used of object detection.
           * set and refreshed with setCoords and calcCoords.
           * @memberOf fabric.Object.prototype
           */
          lineCoords: null,
          /**
           * storage for object transform matrix
           */
          ownMatrixCache: null,
          /**
           * storage for object full transform matrix
           */
          matrixCache: null,
          /**
           * custom controls interface
           * controls are added by default_controls.js
           */
          controls: {},
          /**
           * return correct set of coordinates for intersection
           * this will return either aCoords or lineCoords.
           * @param {Boolean} absolute will return aCoords if true or lineCoords
           * @return {Object} {tl, tr, br, bl} points
           */
          _getCoords: function(absolute, calculate) {
            if (calculate) {
              return absolute ? this.calcACoords() : this.calcLineCoords();
            }
            if (!this.aCoords || !this.lineCoords) {
              this.setCoords(true);
            }
            return absolute ? this.aCoords : this.lineCoords;
          },
          /**
           * return correct set of coordinates for intersection
           * this will return either aCoords or lineCoords.
           * The coords are returned in an array.
           * @return {Array} [tl, tr, br, bl] of points
           */
          getCoords: function(absolute, calculate) {
            return arrayFromCoords(this._getCoords(absolute, calculate));
          },
          /**
           * Checks if object intersects with an area formed by 2 points
           * @param {Object} pointTL top-left point of area
           * @param {Object} pointBR bottom-right point of area
           * @param {Boolean} [absolute] use coordinates without viewportTransform
           * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
           * @return {Boolean} true if object intersects with an area formed by 2 points
           */
          intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {
            var coords = this.getCoords(absolute, calculate), intersection = fabric.Intersection.intersectPolygonRectangle(
              coords,
              pointTL,
              pointBR
            );
            return intersection.status === "Intersection";
          },
          /**
           * Checks if object intersects with another object
           * @param {Object} other Object to test
           * @param {Boolean} [absolute] use coordinates without viewportTransform
           * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
           * @return {Boolean} true if object intersects with another object
           */
          intersectsWithObject: function(other, absolute, calculate) {
            var intersection = fabric.Intersection.intersectPolygonPolygon(
              this.getCoords(absolute, calculate),
              other.getCoords(absolute, calculate)
            );
            return intersection.status === "Intersection" || other.isContainedWithinObject(this, absolute, calculate) || this.isContainedWithinObject(other, absolute, calculate);
          },
          /**
           * Checks if object is fully contained within area of another object
           * @param {Object} other Object to test
           * @param {Boolean} [absolute] use coordinates without viewportTransform
           * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
           * @return {Boolean} true if object is fully contained within area of another object
           */
          isContainedWithinObject: function(other, absolute, calculate) {
            var points = this.getCoords(absolute, calculate), otherCoords = absolute ? other.aCoords : other.lineCoords, i2 = 0, lines = other._getImageLines(otherCoords);
            for (; i2 < 4; i2++) {
              if (!other.containsPoint(points[i2], lines)) {
                return false;
              }
            }
            return true;
          },
          /**
           * Checks if object is fully contained within area formed by 2 points
           * @param {Object} pointTL top-left point of area
           * @param {Object} pointBR bottom-right point of area
           * @param {Boolean} [absolute] use coordinates without viewportTransform
           * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
           * @return {Boolean} true if object is fully contained within area formed by 2 points
           */
          isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {
            var boundingRect = this.getBoundingRect(absolute, calculate);
            return boundingRect.left >= pointTL.x && boundingRect.left + boundingRect.width <= pointBR.x && boundingRect.top >= pointTL.y && boundingRect.top + boundingRect.height <= pointBR.y;
          },
          /**
           * Checks if point is inside the object
           * @param {fabric.Point} point Point to check against
           * @param {Object} [lines] object returned from @method _getImageLines
           * @param {Boolean} [absolute] use coordinates without viewportTransform
           * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
           * @return {Boolean} true if point is inside the object
           */
          containsPoint: function(point, lines, absolute, calculate) {
            var coords = this._getCoords(absolute, calculate), lines = lines || this._getImageLines(coords), xPoints = this._findCrossPoints(point, lines);
            return xPoints !== 0 && xPoints % 2 === 1;
          },
          /**
           * Checks if object is contained within the canvas with current viewportTransform
           * the check is done stopping at first point that appears on screen
           * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords
           * @return {Boolean} true if object is fully or partially contained within canvas
           */
          isOnScreen: function(calculate) {
            if (!this.canvas) {
              return false;
            }
            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
            var points = this.getCoords(true, calculate);
            if (points.some(function(point) {
              return point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y;
            })) {
              return true;
            }
            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
              return true;
            }
            return this._containsCenterOfCanvas(pointTL, pointBR, calculate);
          },
          /**
           * Checks if the object contains the midpoint between canvas extremities
           * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen
           * @private
           * @param {Fabric.Point} pointTL Top Left point
           * @param {Fabric.Point} pointBR Top Right point
           * @param {Boolean} calculate use coordinates of current position instead of .oCoords
           * @return {Boolean} true if the object contains the point
           */
          _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {
            var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };
            if (this.containsPoint(centerPoint, null, true, calculate)) {
              return true;
            }
            return false;
          },
          /**
           * Checks if object is partially contained within the canvas with current viewportTransform
           * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
           * @return {Boolean} true if object is partially contained within canvas
           */
          isPartiallyOnScreen: function(calculate) {
            if (!this.canvas) {
              return false;
            }
            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
              return true;
            }
            var allPointsAreOutside = this.getCoords(true, calculate).every(function(point) {
              return (point.x >= pointBR.x || point.x <= pointTL.x) && (point.y >= pointBR.y || point.y <= pointTL.y);
            });
            return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);
          },
          /**
           * Method that returns an object with the object edges in it, given the coordinates of the corners
           * @private
           * @param {Object} oCoords Coordinates of the object corners
           */
          _getImageLines: function(oCoords) {
            var lines = {
              topline: {
                o: oCoords.tl,
                d: oCoords.tr
              },
              rightline: {
                o: oCoords.tr,
                d: oCoords.br
              },
              bottomline: {
                o: oCoords.br,
                d: oCoords.bl
              },
              leftline: {
                o: oCoords.bl,
                d: oCoords.tl
              }
            };
            return lines;
          },
          /**
           * Helper method to determine how many cross points are between the 4 object edges
           * and the horizontal line determined by a point on canvas
           * @private
           * @param {fabric.Point} point Point to check
           * @param {Object} lines Coordinates of the object being evaluated
           */
          // remove yi, not used but left code here just in case.
          _findCrossPoints: function(point, lines) {
            var b1, b2, a1, a2, xi, xcount = 0, iLine;
            for (var lineKey in lines) {
              iLine = lines[lineKey];
              if (iLine.o.y < point.y && iLine.d.y < point.y) {
                continue;
              }
              if (iLine.o.y >= point.y && iLine.d.y >= point.y) {
                continue;
              }
              if (iLine.o.x === iLine.d.x && iLine.o.x >= point.x) {
                xi = iLine.o.x;
              } else {
                b1 = 0;
                b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);
                a1 = point.y - b1 * point.x;
                a2 = iLine.o.y - b2 * iLine.o.x;
                xi = -(a1 - a2) / (b1 - b2);
              }
              if (xi >= point.x) {
                xcount += 1;
              }
              if (xcount === 2) {
                break;
              }
            }
            return xcount;
          },
          /**
           * Returns coordinates of object's bounding rectangle (left, top, width, height)
           * the box is intended as aligned to axis of canvas.
           * @param {Boolean} [absolute] use coordinates without viewportTransform
           * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords
           * @return {Object} Object with left, top, width, height properties
           */
          getBoundingRect: function(absolute, calculate) {
            var coords = this.getCoords(absolute, calculate);
            return util.makeBoundingBoxFromPoints(coords);
          },
          /**
           * Returns width of an object's bounding box counting transformations
           * before 2.0 it was named getWidth();
           * @return {Number} width value
           */
          getScaledWidth: function() {
            return this._getTransformedDimensions().x;
          },
          /**
           * Returns height of an object bounding box counting transformations
           * before 2.0 it was named getHeight();
           * @return {Number} height value
           */
          getScaledHeight: function() {
            return this._getTransformedDimensions().y;
          },
          /**
           * Makes sure the scale is valid and modifies it if necessary
           * @private
           * @param {Number} value
           * @return {Number}
           */
          _constrainScale: function(value) {
            if (Math.abs(value) < this.minScaleLimit) {
              if (value < 0) {
                return -this.minScaleLimit;
              } else {
                return this.minScaleLimit;
              }
            } else if (value === 0) {
              return 1e-4;
            }
            return value;
          },
          /**
           * Scales an object (equally by x and y)
           * @param {Number} value Scale factor
           * @return {fabric.Object} thisArg
           * @chainable
           */
          scale: function(value) {
            this._set("scaleX", value);
            this._set("scaleY", value);
            return this.setCoords();
          },
          /**
           * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
           * @param {Number} value New width value
           * @param {Boolean} absolute ignore viewport
           * @return {fabric.Object} thisArg
           * @chainable
           */
          scaleToWidth: function(value, absolute) {
            var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();
            return this.scale(value / this.width / boundingRectFactor);
          },
          /**
           * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
           * @param {Number} value New height value
           * @param {Boolean} absolute ignore viewport
           * @return {fabric.Object} thisArg
           * @chainable
           */
          scaleToHeight: function(value, absolute) {
            var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();
            return this.scale(value / this.height / boundingRectFactor);
          },
          /**
           * Calculates and returns the .coords of an object.
           * unused by the library, only for the end dev.
           * @return {Object} Object with tl, tr, br, bl ....
           * @chainable
           * @deprecated
           */
          calcCoords: function(absolute) {
            if (absolute) {
              return this.calcACoords();
            }
            return this.calcOCoords();
          },
          calcLineCoords: function() {
            var vpt = this.getViewportTransform(), padding = this.padding, angle = degreesToRadians(this.angle), cos = util.cos(angle), sin = util.sin(angle), cosP = cos * padding, sinP = sin * padding, cosPSinP = cosP + sinP, cosPMinusSinP = cosP - sinP, aCoords = this.calcACoords();
            var lineCoords = {
              tl: transformPoint(aCoords.tl, vpt),
              tr: transformPoint(aCoords.tr, vpt),
              bl: transformPoint(aCoords.bl, vpt),
              br: transformPoint(aCoords.br, vpt)
            };
            if (padding) {
              lineCoords.tl.x -= cosPMinusSinP;
              lineCoords.tl.y -= cosPSinP;
              lineCoords.tr.x += cosPSinP;
              lineCoords.tr.y -= cosPMinusSinP;
              lineCoords.bl.x -= cosPSinP;
              lineCoords.bl.y += cosPMinusSinP;
              lineCoords.br.x += cosPMinusSinP;
              lineCoords.br.y += cosPSinP;
            }
            return lineCoords;
          },
          calcOCoords: function() {
            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), vpt = this.getViewportTransform(), startMatrix = multiplyMatrices(vpt, translateMatrix), finalMatrix = multiplyMatrices(startMatrix, rotateMatrix), finalMatrix = multiplyMatrices(finalMatrix, [1 / vpt[0], 0, 0, 1 / vpt[3], 0, 0]), dim = this._calculateCurrentDimensions(), coords = {};
            this.forEachControl(function(control, key, fabricObject) {
              coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);
            });
            return coords;
          },
          calcACoords: function() {
            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix), dim = this._getTransformedDimensions(), w2 = dim.x / 2, h2 = dim.y / 2;
            return {
              // corners
              tl: transformPoint({ x: -w2, y: -h2 }, finalMatrix),
              tr: transformPoint({ x: w2, y: -h2 }, finalMatrix),
              bl: transformPoint({ x: -w2, y: h2 }, finalMatrix),
              br: transformPoint({ x: w2, y: h2 }, finalMatrix)
            };
          },
          /**
           * Sets corner and controls position coordinates based on current angle, width and height, left and top.
           * oCoords are used to find the corners
           * aCoords are used to quickly find an object on the canvas
           * lineCoords are used to quickly find object during pointer events.
           * See {@link https://github.com/kangax/fabric.js/wiki/When-to-call-setCoords|When-to-call-setCoords}
           * @param {Boolean} [skipCorners] skip calculation of oCoords.
           * @return {fabric.Object} thisArg
           * @chainable
           */
          setCoords: function(skipCorners) {
            this.aCoords = this.calcACoords();
            this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();
            if (skipCorners) {
              return this;
            }
            this.oCoords = this.calcOCoords();
            this._setCornerCoords && this._setCornerCoords();
            return this;
          },
          /**
           * calculate rotation matrix of an object
           * @return {Array} rotation matrix for the object
           */
          _calcRotateMatrix: function() {
            return util.calcRotateMatrix(this);
          },
          /**
           * calculate the translation matrix for an object transform
           * @return {Array} rotation matrix for the object
           */
          _calcTranslateMatrix: function() {
            var center = this.getCenterPoint();
            return [1, 0, 0, 1, center.x, center.y];
          },
          transformMatrixKey: function(skipGroup) {
            var sep = "_", prefix = "";
            if (!skipGroup && this.group) {
              prefix = this.group.transformMatrixKey(skipGroup) + sep;
            }
            ;
            return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY + sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY + sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;
          },
          /**
           * calculate transform matrix that represents the current transformations from the
           * object's properties.
           * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations
           * There are some situation in which this is useful to avoid the fake rotation.
           * @return {Array} transform matrix for the object
           */
          calcTransformMatrix: function(skipGroup) {
            var matrix = this.calcOwnMatrix();
            if (skipGroup || !this.group) {
              return matrix;
            }
            var key = this.transformMatrixKey(skipGroup), cache = this.matrixCache || (this.matrixCache = {});
            if (cache.key === key) {
              return cache.value;
            }
            if (this.group) {
              matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);
            }
            cache.key = key;
            cache.value = matrix;
            return matrix;
          },
          /**
           * calculate transform matrix that represents the current transformations from the
           * object's properties, this matrix does not include the group transformation
           * @return {Array} transform matrix for the object
           */
          calcOwnMatrix: function() {
            var key = this.transformMatrixKey(true), cache = this.ownMatrixCache || (this.ownMatrixCache = {});
            if (cache.key === key) {
              return cache.value;
            }
            var tMatrix = this._calcTranslateMatrix(), options = {
              angle: this.angle,
              translateX: tMatrix[4],
              translateY: tMatrix[5],
              scaleX: this.scaleX,
              scaleY: this.scaleY,
              skewX: this.skewX,
              skewY: this.skewY,
              flipX: this.flipX,
              flipY: this.flipY
            };
            cache.key = key;
            cache.value = util.composeMatrix(options);
            return cache.value;
          },
          /*
           * Calculate object dimensions from its properties
           * @private
           * @deprecated since 3.4.0, please use fabric.util._calcDimensionsTransformMatrix
           * not including or including flipX, flipY to emulate the flipping boolean
           * @return {Object} .x width dimension
           * @return {Object} .y height dimension
           */
          _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {
            return util.calcDimensionsMatrix({
              skewX,
              skewY,
              scaleX: this.scaleX * (flipping && this.flipX ? -1 : 1),
              scaleY: this.scaleY * (flipping && this.flipY ? -1 : 1)
            });
          },
          /*
           * Calculate object dimensions from its properties
           * @private
           * @return {Object} .x width dimension
           * @return {Object} .y height dimension
           */
          _getNonTransformedDimensions: function() {
            var strokeWidth = this.strokeWidth, w2 = this.width + strokeWidth, h2 = this.height + strokeWidth;
            return { x: w2, y: h2 };
          },
          /*
           * Calculate object bounding box dimensions from its properties scale, skew.
           * @param {Number} skewX, a value to override current skewX
           * @param {Number} skewY, a value to override current skewY
           * @private
           * @return {Object} .x width dimension
           * @return {Object} .y height dimension
           */
          _getTransformedDimensions: function(skewX, skewY) {
            if (typeof skewX === "undefined") {
              skewX = this.skewX;
            }
            if (typeof skewY === "undefined") {
              skewY = this.skewY;
            }
            var dimensions, dimX, dimY, noSkew = skewX === 0 && skewY === 0;
            if (this.strokeUniform) {
              dimX = this.width;
              dimY = this.height;
            } else {
              dimensions = this._getNonTransformedDimensions();
              dimX = dimensions.x;
              dimY = dimensions.y;
            }
            if (noSkew) {
              return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);
            }
            var bbox = util.sizeAfterTransform(dimX, dimY, {
              scaleX: this.scaleX,
              scaleY: this.scaleY,
              skewX,
              skewY
            });
            return this._finalizeDimensions(bbox.x, bbox.y);
          },
          /*
           * Calculate object bounding box dimensions from its properties scale, skew.
           * @param Number width width of the bbox
           * @param Number height height of the bbox
           * @private
           * @return {Object} .x finalized width dimension
           * @return {Object} .y finalized height dimension
           */
          _finalizeDimensions: function(width, height) {
            return this.strokeUniform ? { x: width + this.strokeWidth, y: height + this.strokeWidth } : { x: width, y: height };
          },
          /*
           * Calculate object dimensions for controls box, including padding and canvas zoom.
           * and active selection
           * private
           */
          _calculateCurrentDimensions: function() {
            var vpt = this.getViewportTransform(), dim = this._getTransformedDimensions(), p2 = transformPoint(dim, vpt, true);
            return p2.scalarAdd(2 * this.padding);
          }
        }
      );
    })();
    fabric.util.object.extend(
      fabric.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Moves an object to the bottom of the stack of drawn objects
         * @return {fabric.Object} thisArg
         * @chainable
         */
        sendToBack: function() {
          if (this.group) {
            fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);
          } else if (this.canvas) {
            this.canvas.sendToBack(this);
          }
          return this;
        },
        /**
         * Moves an object to the top of the stack of drawn objects
         * @return {fabric.Object} thisArg
         * @chainable
         */
        bringToFront: function() {
          if (this.group) {
            fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);
          } else if (this.canvas) {
            this.canvas.bringToFront(this);
          }
          return this;
        },
        /**
         * Moves an object down in stack of drawn objects
         * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
         * @return {fabric.Object} thisArg
         * @chainable
         */
        sendBackwards: function(intersecting) {
          if (this.group) {
            fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);
          } else if (this.canvas) {
            this.canvas.sendBackwards(this, intersecting);
          }
          return this;
        },
        /**
         * Moves an object up in stack of drawn objects
         * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
         * @return {fabric.Object} thisArg
         * @chainable
         */
        bringForward: function(intersecting) {
          if (this.group) {
            fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);
          } else if (this.canvas) {
            this.canvas.bringForward(this, intersecting);
          }
          return this;
        },
        /**
         * Moves an object to specified level in stack of drawn objects
         * @param {Number} index New position of object
         * @return {fabric.Object} thisArg
         * @chainable
         */
        moveTo: function(index) {
          if (this.group && this.group.type !== "activeSelection") {
            fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);
          } else if (this.canvas) {
            this.canvas.moveTo(this, index);
          }
          return this;
        }
      }
    );
    (function() {
      function getSvgColorString(prop, value) {
        if (!value) {
          return prop + ": none; ";
        } else if (value.toLive) {
          return prop + ": url(#SVGID_" + value.id + "); ";
        } else {
          var color = new fabric.Color(value), str = prop + ": " + color.toRgb() + "; ", opacity = color.getAlpha();
          if (opacity !== 1) {
            str += prop + "-opacity: " + opacity.toString() + "; ";
          }
          return str;
        }
      }
      var toFixed = fabric.util.toFixed;
      fabric.util.object.extend(
        fabric.Object.prototype,
        /** @lends fabric.Object.prototype */
        {
          /**
           * Returns styles-string for svg-export
           * @param {Boolean} skipShadow a boolean to skip shadow filter output
           * @return {String}
           */
          getSvgStyles: function(skipShadow) {
            var fillRule = this.fillRule ? this.fillRule : "nonzero", strokeWidth = this.strokeWidth ? this.strokeWidth : "0", strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(" ") : "none", strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : "0", strokeLineCap = this.strokeLineCap ? this.strokeLineCap : "butt", strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : "miter", strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : "4", opacity = typeof this.opacity !== "undefined" ? this.opacity : "1", visibility = this.visible ? "" : " visibility: hidden;", filter = skipShadow ? "" : this.getSvgFilter(), fill = getSvgColorString("fill", this.fill), stroke = getSvgColorString("stroke", this.stroke);
            return [
              stroke,
              "stroke-width: ",
              strokeWidth,
              "; ",
              "stroke-dasharray: ",
              strokeDashArray,
              "; ",
              "stroke-linecap: ",
              strokeLineCap,
              "; ",
              "stroke-dashoffset: ",
              strokeDashOffset,
              "; ",
              "stroke-linejoin: ",
              strokeLineJoin,
              "; ",
              "stroke-miterlimit: ",
              strokeMiterLimit,
              "; ",
              fill,
              "fill-rule: ",
              fillRule,
              "; ",
              "opacity: ",
              opacity,
              ";",
              filter,
              visibility
            ].join("");
          },
          /**
           * Returns styles-string for svg-export
           * @param {Object} style the object from which to retrieve style properties
           * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.
           * @return {String}
           */
          getSvgSpanStyles: function(style, useWhiteSpace) {
            var term = "; ";
            var fontFamily = style.fontFamily ? "font-family: " + (style.fontFamily.indexOf("'") === -1 && style.fontFamily.indexOf('"') === -1 ? "'" + style.fontFamily + "'" : style.fontFamily) + term : "";
            var strokeWidth = style.strokeWidth ? "stroke-width: " + style.strokeWidth + term : "", fontFamily = fontFamily, fontSize = style.fontSize ? "font-size: " + style.fontSize + "px" + term : "", fontStyle = style.fontStyle ? "font-style: " + style.fontStyle + term : "", fontWeight = style.fontWeight ? "font-weight: " + style.fontWeight + term : "", fill = style.fill ? getSvgColorString("fill", style.fill) : "", stroke = style.stroke ? getSvgColorString("stroke", style.stroke) : "", textDecoration = this.getSvgTextDecoration(style), deltaY = style.deltaY ? "baseline-shift: " + -style.deltaY + "; " : "";
            if (textDecoration) {
              textDecoration = "text-decoration: " + textDecoration + term;
            }
            return [
              stroke,
              strokeWidth,
              fontFamily,
              fontSize,
              fontStyle,
              fontWeight,
              textDecoration,
              fill,
              deltaY,
              useWhiteSpace ? "white-space: pre; " : ""
            ].join("");
          },
          /**
           * Returns text-decoration property for svg-export
           * @param {Object} style the object from which to retrieve style properties
           * @return {String}
           */
          getSvgTextDecoration: function(style) {
            return ["overline", "underline", "line-through"].filter(function(decoration) {
              return style[decoration.replace("-", "")];
            }).join(" ");
          },
          /**
           * Returns filter for svg shadow
           * @return {String}
           */
          getSvgFilter: function() {
            return this.shadow ? "filter: url(#SVGID_" + this.shadow.id + ");" : "";
          },
          /**
           * Returns id attribute for svg output
           * @return {String}
           */
          getSvgCommons: function() {
            return [
              this.id ? 'id="' + this.id + '" ' : "",
              this.clipPath ? 'clip-path="url(#' + this.clipPath.clipPathId + ')" ' : ""
            ].join("");
          },
          /**
           * Returns transform-string for svg-export
           * @param {Boolean} use the full transform or the single object one.
           * @return {String}
           */
          getSvgTransform: function(full, additionalTransform) {
            var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(), svgTransform = 'transform="' + fabric.util.matrixToSVG(transform);
            return svgTransform + (additionalTransform || "") + '" ';
          },
          _setSVGBg: function(textBgRects) {
            if (this.backgroundColor) {
              var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
              textBgRects.push(
                "		<rect ",
                this._getFillAttributes(this.backgroundColor),
                ' x="',
                toFixed(-this.width / 2, NUM_FRACTION_DIGITS),
                '" y="',
                toFixed(-this.height / 2, NUM_FRACTION_DIGITS),
                '" width="',
                toFixed(this.width, NUM_FRACTION_DIGITS),
                '" height="',
                toFixed(this.height, NUM_FRACTION_DIGITS),
                '"></rect>\n'
              );
            }
          },
          /**
           * Returns svg representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          toSVG: function(reviver) {
            return this._createBaseSVGMarkup(this._toSVG(reviver), { reviver });
          },
          /**
           * Returns svg clipPath representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          toClipPathSVG: function(reviver) {
            return "	" + this._createBaseClipPathSVGMarkup(this._toSVG(reviver), { reviver });
          },
          /**
           * @private
           */
          _createBaseClipPathSVGMarkup: function(objectMarkup, options) {
            options = options || {};
            var reviver = options.reviver, additionalTransform = options.additionalTransform || "", commonPieces = [
              this.getSvgTransform(true, additionalTransform),
              this.getSvgCommons()
            ].join(""), index = objectMarkup.indexOf("COMMON_PARTS");
            objectMarkup[index] = commonPieces;
            return reviver ? reviver(objectMarkup.join("")) : objectMarkup.join("");
          },
          /**
           * @private
           */
          _createBaseSVGMarkup: function(objectMarkup, options) {
            options = options || {};
            var noStyle = options.noStyle, reviver = options.reviver, styleInfo = noStyle ? "" : 'style="' + this.getSvgStyles() + '" ', shadowInfo = options.withShadow ? 'style="' + this.getSvgFilter() + '" ' : "", clipPath = this.clipPath, vectorEffect = this.strokeUniform ? 'vector-effect="non-scaling-stroke" ' : "", absoluteClipPath = clipPath && clipPath.absolutePositioned, stroke = this.stroke, fill = this.fill, shadow = this.shadow, commonPieces, markup = [], clipPathMarkup, index = objectMarkup.indexOf("COMMON_PARTS"), additionalTransform = options.additionalTransform;
            if (clipPath) {
              clipPath.clipPathId = "CLIPPATH_" + fabric.Object.__uid++;
              clipPathMarkup = '<clipPath id="' + clipPath.clipPathId + '" >\n' + clipPath.toClipPathSVG(reviver) + "</clipPath>\n";
            }
            if (absoluteClipPath) {
              markup.push(
                "<g ",
                shadowInfo,
                this.getSvgCommons(),
                " >\n"
              );
            }
            markup.push(
              "<g ",
              this.getSvgTransform(false),
              !absoluteClipPath ? shadowInfo + this.getSvgCommons() : "",
              " >\n"
            );
            commonPieces = [
              styleInfo,
              vectorEffect,
              noStyle ? "" : this.addPaintOrder(),
              " ",
              additionalTransform ? 'transform="' + additionalTransform + '" ' : ""
            ].join("");
            objectMarkup[index] = commonPieces;
            if (fill && fill.toLive) {
              markup.push(fill.toSVG(this));
            }
            if (stroke && stroke.toLive) {
              markup.push(stroke.toSVG(this));
            }
            if (shadow) {
              markup.push(shadow.toSVG(this));
            }
            if (clipPath) {
              markup.push(clipPathMarkup);
            }
            markup.push(objectMarkup.join(""));
            markup.push("</g>\n");
            absoluteClipPath && markup.push("</g>\n");
            return reviver ? reviver(markup.join("")) : markup.join("");
          },
          addPaintOrder: function() {
            return this.paintFirst !== "fill" ? ' paint-order="' + this.paintFirst + '" ' : "";
          }
        }
      );
    })();
    (function() {
      var extend = fabric.util.object.extend, originalSet = "stateProperties";
      function saveProps(origin, destination, props) {
        var tmpObj = {}, deep = true;
        props.forEach(function(prop) {
          tmpObj[prop] = origin[prop];
        });
        extend(origin[destination], tmpObj, deep);
      }
      function _isEqual(origValue, currentValue, firstPass) {
        if (origValue === currentValue) {
          return true;
        } else if (Array.isArray(origValue)) {
          if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {
            return false;
          }
          for (var i2 = 0, len = origValue.length; i2 < len; i2++) {
            if (!_isEqual(origValue[i2], currentValue[i2])) {
              return false;
            }
          }
          return true;
        } else if (origValue && typeof origValue === "object") {
          var keys = Object.keys(origValue), key;
          if (!currentValue || typeof currentValue !== "object" || !firstPass && keys.length !== Object.keys(currentValue).length) {
            return false;
          }
          for (var i2 = 0, len = keys.length; i2 < len; i2++) {
            key = keys[i2];
            if (key === "canvas" || key === "group") {
              continue;
            }
            if (!_isEqual(origValue[key], currentValue[key])) {
              return false;
            }
          }
          return true;
        }
      }
      fabric.util.object.extend(
        fabric.Object.prototype,
        /** @lends fabric.Object.prototype */
        {
          /**
           * Returns true if object state (one of its state properties) was changed
           * @param {String} [propertySet] optional name for the set of property we want to save
           * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called
           */
          hasStateChanged: function(propertySet) {
            propertySet = propertySet || originalSet;
            var dashedPropertySet = "_" + propertySet;
            if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {
              return true;
            }
            return !_isEqual(this[dashedPropertySet], this, true);
          },
          /**
           * Saves state of an object
           * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
           * @return {fabric.Object} thisArg
           */
          saveState: function(options) {
            var propertySet = options && options.propertySet || originalSet, destination = "_" + propertySet;
            if (!this[destination]) {
              return this.setupState(options);
            }
            saveProps(this, destination, this[propertySet]);
            if (options && options.stateProperties) {
              saveProps(this, destination, options.stateProperties);
            }
            return this;
          },
          /**
           * Setups state of an object
           * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
           * @return {fabric.Object} thisArg
           */
          setupState: function(options) {
            options = options || {};
            var propertySet = options.propertySet || originalSet;
            options.propertySet = propertySet;
            this["_" + propertySet] = {};
            this.saveState(options);
            return this;
          }
        }
      );
    })();
    (function() {
      var degreesToRadians = fabric.util.degreesToRadians;
      fabric.util.object.extend(
        fabric.Object.prototype,
        /** @lends fabric.Object.prototype */
        {
          /**
           * Determines which corner has been clicked
           * @private
           * @param {Object} pointer The pointer indicating the mouse position
           * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
           */
          _findTargetCorner: function(pointer, forTouch) {
            if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {
              return false;
            }
            var ex = pointer.x, ey = pointer.y, xPoints, lines, keys = Object.keys(this.oCoords), j2 = keys.length - 1, i2;
            this.__corner = 0;
            for (; j2 >= 0; j2--) {
              i2 = keys[j2];
              if (!this.isControlVisible(i2)) {
                continue;
              }
              lines = this._getImageLines(forTouch ? this.oCoords[i2].touchCorner : this.oCoords[i2].corner);
              xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);
              if (xPoints !== 0 && xPoints % 2 === 1) {
                this.__corner = i2;
                return i2;
              }
            }
            return false;
          },
          /**
           * Calls a function for each control. The function gets called,
           * with the control, the object that is calling the iterator and the control's key
           * @param {Function} fn function to iterate over the controls over
           */
          forEachControl: function(fn) {
            for (var i2 in this.controls) {
              fn(this.controls[i2], i2, this);
            }
            ;
          },
          /**
           * Sets the coordinates of the draggable boxes in the corners of
           * the image used to scale/rotate it.
           * note: if we would switch to ROUND corner area, all of this would disappear.
           * everything would resolve to a single point and a pythagorean theorem for the distance
           * @private
           */
          _setCornerCoords: function() {
            var coords = this.oCoords;
            for (var control in coords) {
              var controlObject = this.controls[control];
              coords[control].corner = controlObject.calcCornerCoords(
                this.angle,
                this.cornerSize,
                coords[control].x,
                coords[control].y,
                false
              );
              coords[control].touchCorner = controlObject.calcCornerCoords(
                this.angle,
                this.touchCornerSize,
                coords[control].x,
                coords[control].y,
                true
              );
            }
          },
          /**
           * Draws a colored layer behind the object, inside its selection borders.
           * Requires public options: padding, selectionBackgroundColor
           * this function is called when the context is transformed
           * has checks to be skipped when the object is on a staticCanvas
           * @param {CanvasRenderingContext2D} ctx Context to draw on
           * @return {fabric.Object} thisArg
           * @chainable
           */
          drawSelectionBackground: function(ctx) {
            if (!this.selectionBackgroundColor || this.canvas && !this.canvas.interactive || this.canvas && this.canvas._activeObject !== this) {
              return this;
            }
            ctx.save();
            var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(), vpt = this.canvas.viewportTransform;
            ctx.translate(center.x, center.y);
            ctx.scale(1 / vpt[0], 1 / vpt[3]);
            ctx.rotate(degreesToRadians(this.angle));
            ctx.fillStyle = this.selectionBackgroundColor;
            ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);
            ctx.restore();
            return this;
          },
          /**
           * Draws borders of an object's bounding box.
           * Requires public properties: width, height
           * Requires public options: padding, borderColor
           * @param {CanvasRenderingContext2D} ctx Context to draw on
           * @param {Object} styleOverride object to override the object style
           * @return {fabric.Object} thisArg
           * @chainable
           */
          drawBorders: function(ctx, styleOverride) {
            styleOverride = styleOverride || {};
            var wh = this._calculateCurrentDimensions(), strokeWidth = this.borderScaleFactor, width = wh.x + strokeWidth, height = wh.y + strokeWidth, hasControls = typeof styleOverride.hasControls !== "undefined" ? styleOverride.hasControls : this.hasControls, shouldStroke = false;
            ctx.save();
            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);
            ctx.strokeRect(
              -width / 2,
              -height / 2,
              width,
              height
            );
            if (hasControls) {
              ctx.beginPath();
              this.forEachControl(function(control, key, fabricObject) {
                if (control.withConnection && control.getVisibility(fabricObject, key)) {
                  shouldStroke = true;
                  ctx.moveTo(control.x * width, control.y * height);
                  ctx.lineTo(
                    control.x * width + control.offsetX,
                    control.y * height + control.offsetY
                  );
                }
              });
              if (shouldStroke) {
                ctx.stroke();
              }
            }
            ctx.restore();
            return this;
          },
          /**
           * Draws borders of an object's bounding box when it is inside a group.
           * Requires public properties: width, height
           * Requires public options: padding, borderColor
           * @param {CanvasRenderingContext2D} ctx Context to draw on
           * @param {object} options object representing current object parameters
           * @param {Object} styleOverride object to override the object style
           * @return {fabric.Object} thisArg
           * @chainable
           */
          drawBordersInGroup: function(ctx, options, styleOverride) {
            styleOverride = styleOverride || {};
            var bbox = fabric.util.sizeAfterTransform(this.width, this.height, options), strokeWidth = this.strokeWidth, strokeUniform = this.strokeUniform, borderScaleFactor = this.borderScaleFactor, width = bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor, height = bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;
            ctx.save();
            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);
            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
            ctx.strokeRect(
              -width / 2,
              -height / 2,
              width,
              height
            );
            ctx.restore();
            return this;
          },
          /**
           * Draws corners of an object's bounding box.
           * Requires public properties: width, height
           * Requires public options: cornerSize, padding
           * @param {CanvasRenderingContext2D} ctx Context to draw on
           * @param {Object} styleOverride object to override the object style
           * @return {fabric.Object} thisArg
           * @chainable
           */
          drawControls: function(ctx, styleOverride) {
            styleOverride = styleOverride || {};
            ctx.save();
            var retinaScaling = this.canvas.getRetinaScaling(), matrix, p2;
            ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);
            ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;
            if (!this.transparentCorners) {
              ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;
            }
            this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray);
            this.setCoords();
            if (this.group) {
              matrix = this.group.calcTransformMatrix();
            }
            this.forEachControl(function(control, key, fabricObject) {
              p2 = fabricObject.oCoords[key];
              if (control.getVisibility(fabricObject, key)) {
                if (matrix) {
                  p2 = fabric.util.transformPoint(p2, matrix);
                }
                control.render(ctx, p2.x, p2.y, styleOverride, fabricObject);
              }
            });
            ctx.restore();
            return this;
          },
          /**
           * Returns true if the specified control is visible, false otherwise.
           * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
           * @returns {Boolean} true if the specified control is visible, false otherwise
           */
          isControlVisible: function(controlKey) {
            return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);
          },
          /**
           * Sets the visibility of the specified control.
           * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
           * @param {Boolean} visible true to set the specified control visible, false otherwise
           * @return {fabric.Object} thisArg
           * @chainable
           */
          setControlVisible: function(controlKey, visible) {
            if (!this._controlsVisibility) {
              this._controlsVisibility = {};
            }
            this._controlsVisibility[controlKey] = visible;
            return this;
          },
          /**
           * Sets the visibility state of object controls.
           * @param {Object} [options] Options object
           * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it
           * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it
           * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it
           * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it
           * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it
           * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it
           * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it
           * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it
           * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it
           * @return {fabric.Object} thisArg
           * @chainable
           */
          setControlsVisibility: function(options) {
            options || (options = {});
            for (var p2 in options) {
              this.setControlVisible(p2, options[p2]);
            }
            return this;
          },
          /**
           * This callback function is called every time _discardActiveObject or _setActiveObject
           * try to to deselect this object. If the function returns true, the process is cancelled
           * @param {Object} [options] options sent from the upper functions
           * @param {Event} [options.e] event if the process is generated by an event
           */
          onDeselect: function() {
          },
          /**
           * This callback function is called every time _discardActiveObject or _setActiveObject
           * try to to select this object. If the function returns true, the process is cancelled
           * @param {Object} [options] options sent from the upper functions
           * @param {Event} [options.e] event if the process is generated by an event
           */
          onSelect: function() {
          }
        }
      );
    })();
    fabric.util.object.extend(
      fabric.StaticCanvas.prototype,
      /** @lends fabric.StaticCanvas.prototype */
      {
        /**
         * Animation duration (in ms) for fx* methods
         * @type Number
         * @default
         */
        FX_DURATION: 500,
        /**
         * Centers object horizontally with animation.
         * @param {fabric.Object} object Object to center
         * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
         * @param {Function} [callbacks.onComplete] Invoked on completion
         * @param {Function} [callbacks.onChange] Invoked on every step of animation
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        fxCenterObjectH: function(object, callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric.util.animate({
            startValue: object.left,
            endValue: this.getCenter().left,
            duration: this.FX_DURATION,
            onChange: function(value) {
              object.set("left", value);
              _this.requestRenderAll();
              onChange();
            },
            onComplete: function() {
              object.setCoords();
              onComplete();
            }
          });
          return this;
        },
        /**
         * Centers object vertically with animation.
         * @param {fabric.Object} object Object to center
         * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
         * @param {Function} [callbacks.onComplete] Invoked on completion
         * @param {Function} [callbacks.onChange] Invoked on every step of animation
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        fxCenterObjectV: function(object, callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric.util.animate({
            startValue: object.top,
            endValue: this.getCenter().top,
            duration: this.FX_DURATION,
            onChange: function(value) {
              object.set("top", value);
              _this.requestRenderAll();
              onChange();
            },
            onComplete: function() {
              object.setCoords();
              onComplete();
            }
          });
          return this;
        },
        /**
         * Same as `fabric.Canvas#remove` but animated
         * @param {fabric.Object} object Object to remove
         * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
         * @param {Function} [callbacks.onComplete] Invoked on completion
         * @param {Function} [callbacks.onChange] Invoked on every step of animation
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        fxRemove: function(object, callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric.util.animate({
            startValue: object.opacity,
            endValue: 0,
            duration: this.FX_DURATION,
            onChange: function(value) {
              object.set("opacity", value);
              _this.requestRenderAll();
              onChange();
            },
            onComplete: function() {
              _this.remove(object);
              onComplete();
            }
          });
          return this;
        }
      }
    );
    fabric.util.object.extend(
      fabric.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * Animates object's properties
         * @param {String|Object} property Property to animate (if string) or properties to animate (if object)
         * @param {Number|Object} value Value to animate property to (if string was given first) or options object
         * @return {fabric.Object} thisArg
         * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}
         * @chainable
         *
         * As object — multiple properties
         *
         * object.animate({ left: ..., top: ... });
         * object.animate({ left: ..., top: ... }, { duration: ... });
         *
         * As string — one property
         *
         * object.animate('left', ...);
         * object.animate('left', { duration: ... });
         *
         */
        animate: function() {
          if (arguments[0] && typeof arguments[0] === "object") {
            var propsToAnimate = [], prop, skipCallbacks;
            for (prop in arguments[0]) {
              propsToAnimate.push(prop);
            }
            for (var i2 = 0, len = propsToAnimate.length; i2 < len; i2++) {
              prop = propsToAnimate[i2];
              skipCallbacks = i2 !== len - 1;
              this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);
            }
          } else {
            this._animate.apply(this, arguments);
          }
          return this;
        },
        /**
         * @private
         * @param {String} property Property to animate
         * @param {String} to Value to animate to
         * @param {Object} [options] Options object
         * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked
         */
        _animate: function(property, to, options, skipCallbacks) {
          var _this = this, propPair;
          to = to.toString();
          if (!options) {
            options = {};
          } else {
            options = fabric.util.object.clone(options);
          }
          if (~property.indexOf(".")) {
            propPair = property.split(".");
          }
          var propIsColor = _this.colorProperties.indexOf(property) > -1 || propPair && _this.colorProperties.indexOf(propPair[1]) > -1;
          var currentValue = propPair ? this.get(propPair[0])[propPair[1]] : this.get(property);
          if (!("from" in options)) {
            options.from = currentValue;
          }
          if (!propIsColor) {
            if (~to.indexOf("=")) {
              to = currentValue + parseFloat(to.replace("=", ""));
            } else {
              to = parseFloat(to);
            }
          }
          var _options = {
            startValue: options.from,
            endValue: to,
            byValue: options.by,
            easing: options.easing,
            duration: options.duration,
            abort: options.abort && function(value, valueProgress, timeProgress) {
              return options.abort.call(_this, value, valueProgress, timeProgress);
            },
            onChange: function(value, valueProgress, timeProgress) {
              if (propPair) {
                _this[propPair[0]][propPair[1]] = value;
              } else {
                _this.set(property, value);
              }
              if (skipCallbacks) {
                return;
              }
              options.onChange && options.onChange(value, valueProgress, timeProgress);
            },
            onComplete: function(value, valueProgress, timeProgress) {
              if (skipCallbacks) {
                return;
              }
              _this.setCoords();
              options.onComplete && options.onComplete(value, valueProgress, timeProgress);
            }
          };
          if (propIsColor) {
            return fabric.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);
          } else {
            return fabric.util.animate(_options);
          }
        }
      }
    );
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend, clone = fabric2.util.object.clone, coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 };
      if (fabric2.Line) {
        fabric2.warn("fabric.Line is already defined");
        return;
      }
      fabric2.Line = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Line.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "line",
          /**
           * x value or first line edge
           * @type Number
           * @default
           */
          x1: 0,
          /**
           * y value or first line edge
           * @type Number
           * @default
           */
          y1: 0,
          /**
           * x value or second line edge
           * @type Number
           * @default
           */
          x2: 0,
          /**
           * y value or second line edge
           * @type Number
           * @default
           */
          y2: 0,
          cacheProperties: fabric2.Object.prototype.cacheProperties.concat("x1", "x2", "y1", "y2"),
          /**
           * Constructor
           * @param {Array} [points] Array of points
           * @param {Object} [options] Options object
           * @return {fabric.Line} thisArg
           */
          initialize: function(points, options) {
            if (!points) {
              points = [0, 0, 0, 0];
            }
            this.callSuper("initialize", options);
            this.set("x1", points[0]);
            this.set("y1", points[1]);
            this.set("x2", points[2]);
            this.set("y2", points[3]);
            this._setWidthHeight(options);
          },
          /**
           * @private
           * @param {Object} [options] Options
           */
          _setWidthHeight: function(options) {
            options || (options = {});
            this.width = Math.abs(this.x2 - this.x1);
            this.height = Math.abs(this.y2 - this.y1);
            this.left = "left" in options ? options.left : this._getLeftToOriginX();
            this.top = "top" in options ? options.top : this._getTopToOriginY();
          },
          /**
           * @private
           * @param {String} key
           * @param {*} value
           */
          _set: function(key, value) {
            this.callSuper("_set", key, value);
            if (typeof coordProps[key] !== "undefined") {
              this._setWidthHeight();
            }
            return this;
          },
          /**
           * @private
           * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.
           */
          _getLeftToOriginX: makeEdgeToOriginGetter(
            {
              // property names
              origin: "originX",
              axis1: "x1",
              axis2: "x2",
              dimension: "width"
            },
            {
              // possible values of origin
              nearest: "left",
              center: "center",
              farthest: "right"
            }
          ),
          /**
           * @private
           * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.
           */
          _getTopToOriginY: makeEdgeToOriginGetter(
            {
              // property names
              origin: "originY",
              axis1: "y1",
              axis2: "y2",
              dimension: "height"
            },
            {
              // possible values of origin
              nearest: "top",
              center: "center",
              farthest: "bottom"
            }
          ),
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            ctx.beginPath();
            var p2 = this.calcLinePoints();
            ctx.moveTo(p2.x1, p2.y1);
            ctx.lineTo(p2.x2, p2.y2);
            ctx.lineWidth = this.strokeWidth;
            var origStrokeStyle = ctx.strokeStyle;
            ctx.strokeStyle = this.stroke || ctx.fillStyle;
            this.stroke && this._renderStroke(ctx);
            ctx.strokeStyle = origStrokeStyle;
          },
          /**
           * This function is an helper for svg import. it returns the center of the object in the svg
           * untransformed coordinates
           * @private
           * @return {Object} center point from element coordinates
           */
          _findCenterFromElement: function() {
            return {
              x: (this.x1 + this.x2) / 2,
              y: (this.y1 + this.y2) / 2
            };
          },
          /**
           * Returns object representation of an instance
           * @method toObject
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            return extend(this.callSuper("toObject", propertiesToInclude), this.calcLinePoints());
          },
          /*
           * Calculate object dimensions from its properties
           * @private
           */
          _getNonTransformedDimensions: function() {
            var dim = this.callSuper("_getNonTransformedDimensions");
            if (this.strokeLineCap === "butt") {
              if (this.width === 0) {
                dim.y -= this.strokeWidth;
              }
              if (this.height === 0) {
                dim.x -= this.strokeWidth;
              }
            }
            return dim;
          },
          /**
           * Recalculates line points given width and height
           * @private
           */
          calcLinePoints: function() {
            var xMult = this.x1 <= this.x2 ? -1 : 1, yMult = this.y1 <= this.y2 ? -1 : 1, x1 = xMult * this.width * 0.5, y1 = yMult * this.height * 0.5, x2 = xMult * this.width * -0.5, y2 = yMult * this.height * -0.5;
            return {
              x1,
              x2,
              y1,
              y2
            };
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            var p2 = this.calcLinePoints();
            return [
              "<line ",
              "COMMON_PARTS",
              'x1="',
              p2.x1,
              '" y1="',
              p2.y1,
              '" x2="',
              p2.x2,
              '" y2="',
              p2.y2,
              '" />\n'
            ];
          }
          /* _TO_SVG_END_ */
        }
      );
      fabric2.Line.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" "));
      fabric2.Line.fromElement = function(element, callback, options) {
        options = options || {};
        var parsedAttributes = fabric2.parseAttributes(element, fabric2.Line.ATTRIBUTE_NAMES), points = [
          parsedAttributes.x1 || 0,
          parsedAttributes.y1 || 0,
          parsedAttributes.x2 || 0,
          parsedAttributes.y2 || 0
        ];
        callback(new fabric2.Line(points, extend(parsedAttributes, options)));
      };
      fabric2.Line.fromObject = function(object, callback) {
        function _callback(instance) {
          delete instance.points;
          callback && callback(instance);
        }
        ;
        var options = clone(object, true);
        options.points = [object.x1, object.y1, object.x2, object.y2];
        fabric2.Object._fromObject("Line", options, _callback, "points");
      };
      function makeEdgeToOriginGetter(propertyNames, originValues) {
        var origin = propertyNames.origin, axis1 = propertyNames.axis1, axis2 = propertyNames.axis2, dimension = propertyNames.dimension, nearest = originValues.nearest, center = originValues.center, farthest = originValues.farthest;
        return function() {
          switch (this.get(origin)) {
            case nearest:
              return Math.min(this.get(axis1), this.get(axis2));
            case center:
              return Math.min(this.get(axis1), this.get(axis2)) + 0.5 * this.get(dimension);
            case farthest:
              return Math.max(this.get(axis1), this.get(axis2));
          }
        };
      }
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), pi = Math.PI;
      if (fabric2.Circle) {
        fabric2.warn("fabric.Circle is already defined.");
        return;
      }
      fabric2.Circle = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Circle.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "circle",
          /**
           * Radius of this circle
           * @type Number
           * @default
           */
          radius: 0,
          /**
           * Start angle of the circle, moving clockwise
           * deprecated type, this should be in degree, this was an oversight.
           * probably will change to degrees in next major version
           * @type Number
           * @default 0
           */
          startAngle: 0,
          /**
           * End angle of the circle
           * deprecated type, this should be in degree, this was an oversight.
           * probably will change to degrees in next major version
           * @type Number
           * @default 2Pi
           */
          endAngle: pi * 2,
          cacheProperties: fabric2.Object.prototype.cacheProperties.concat("radius", "startAngle", "endAngle"),
          /**
           * @private
           * @param {String} key
           * @param {*} value
           * @return {fabric.Circle} thisArg
           */
          _set: function(key, value) {
            this.callSuper("_set", key, value);
            if (key === "radius") {
              this.setRadius(value);
            }
            return this;
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            return this.callSuper("toObject", ["radius", "startAngle", "endAngle"].concat(propertiesToInclude));
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            var svgString, x = 0, y2 = 0, angle = (this.endAngle - this.startAngle) % (2 * pi);
            if (angle === 0) {
              svgString = [
                "<circle ",
                "COMMON_PARTS",
                'cx="' + x + '" cy="' + y2 + '" ',
                'r="',
                this.radius,
                '" />\n'
              ];
            } else {
              var startX = fabric2.util.cos(this.startAngle) * this.radius, startY = fabric2.util.sin(this.startAngle) * this.radius, endX = fabric2.util.cos(this.endAngle) * this.radius, endY = fabric2.util.sin(this.endAngle) * this.radius, largeFlag = angle > pi ? "1" : "0";
              svgString = [
                '<path d="M ' + startX + " " + startY,
                " A " + this.radius + " " + this.radius,
                " 0 ",
                +largeFlag + " 1",
                " " + endX + " " + endY,
                '" ',
                "COMMON_PARTS",
                " />\n"
              ];
            }
            return svgString;
          },
          /* _TO_SVG_END_ */
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx context to render on
           */
          _render: function(ctx) {
            ctx.beginPath();
            ctx.arc(
              0,
              0,
              this.radius,
              this.startAngle,
              this.endAngle,
              false
            );
            this._renderPaintInOrder(ctx);
          },
          /**
           * Returns horizontal radius of an object (according to how an object is scaled)
           * @return {Number}
           */
          getRadiusX: function() {
            return this.get("radius") * this.get("scaleX");
          },
          /**
           * Returns vertical radius of an object (according to how an object is scaled)
           * @return {Number}
           */
          getRadiusY: function() {
            return this.get("radius") * this.get("scaleY");
          },
          /**
           * Sets radius of an object (and updates width accordingly)
           * @return {fabric.Circle} thisArg
           */
          setRadius: function(value) {
            this.radius = value;
            return this.set("width", value * 2).set("height", value * 2);
          }
        }
      );
      fabric2.Circle.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat("cx cy r".split(" "));
      fabric2.Circle.fromElement = function(element, callback) {
        var parsedAttributes = fabric2.parseAttributes(element, fabric2.Circle.ATTRIBUTE_NAMES);
        if (!isValidRadius(parsedAttributes)) {
          throw new Error("value of `r` attribute is required and can not be negative");
        }
        parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;
        parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;
        callback(new fabric2.Circle(parsedAttributes));
      };
      function isValidRadius(attributes) {
        return "radius" in attributes && attributes.radius >= 0;
      }
      fabric2.Circle.fromObject = function(object, callback) {
        fabric2.Object._fromObject("Circle", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      if (fabric2.Triangle) {
        fabric2.warn("fabric.Triangle is already defined");
        return;
      }
      fabric2.Triangle = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Triangle.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "triangle",
          /**
           * Width is set to 100 to compensate the old initialize code that was setting it to 100
           * @type Number
           * @default
           */
          width: 100,
          /**
           * Height is set to 100 to compensate the old initialize code that was setting it to 100
           * @type Number
           * @default
           */
          height: 100,
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            var widthBy2 = this.width / 2, heightBy2 = this.height / 2;
            ctx.beginPath();
            ctx.moveTo(-widthBy2, heightBy2);
            ctx.lineTo(0, -heightBy2);
            ctx.lineTo(widthBy2, heightBy2);
            ctx.closePath();
            this._renderPaintInOrder(ctx);
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            var widthBy2 = this.width / 2, heightBy2 = this.height / 2, points = [
              -widthBy2 + " " + heightBy2,
              "0 " + -heightBy2,
              widthBy2 + " " + heightBy2
            ].join(",");
            return [
              "<polygon ",
              "COMMON_PARTS",
              'points="',
              points,
              '" />'
            ];
          }
          /* _TO_SVG_END_ */
        }
      );
      fabric2.Triangle.fromObject = function(object, callback) {
        return fabric2.Object._fromObject("Triangle", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), piBy2 = Math.PI * 2;
      if (fabric2.Ellipse) {
        fabric2.warn("fabric.Ellipse is already defined.");
        return;
      }
      fabric2.Ellipse = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Ellipse.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "ellipse",
          /**
           * Horizontal radius
           * @type Number
           * @default
           */
          rx: 0,
          /**
           * Vertical radius
           * @type Number
           * @default
           */
          ry: 0,
          cacheProperties: fabric2.Object.prototype.cacheProperties.concat("rx", "ry"),
          /**
           * Constructor
           * @param {Object} [options] Options object
           * @return {fabric.Ellipse} thisArg
           */
          initialize: function(options) {
            this.callSuper("initialize", options);
            this.set("rx", options && options.rx || 0);
            this.set("ry", options && options.ry || 0);
          },
          /**
           * @private
           * @param {String} key
           * @param {*} value
           * @return {fabric.Ellipse} thisArg
           */
          _set: function(key, value) {
            this.callSuper("_set", key, value);
            switch (key) {
              case "rx":
                this.rx = value;
                this.set("width", value * 2);
                break;
              case "ry":
                this.ry = value;
                this.set("height", value * 2);
                break;
            }
            return this;
          },
          /**
           * Returns horizontal radius of an object (according to how an object is scaled)
           * @return {Number}
           */
          getRx: function() {
            return this.get("rx") * this.get("scaleX");
          },
          /**
           * Returns Vertical radius of an object (according to how an object is scaled)
           * @return {Number}
           */
          getRy: function() {
            return this.get("ry") * this.get("scaleY");
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            return this.callSuper("toObject", ["rx", "ry"].concat(propertiesToInclude));
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            return [
              "<ellipse ",
              "COMMON_PARTS",
              'cx="0" cy="0" ',
              'rx="',
              this.rx,
              '" ry="',
              this.ry,
              '" />\n'
            ];
          },
          /* _TO_SVG_END_ */
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx context to render on
           */
          _render: function(ctx) {
            ctx.beginPath();
            ctx.save();
            ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);
            ctx.arc(
              0,
              0,
              this.rx,
              0,
              piBy2,
              false
            );
            ctx.restore();
            this._renderPaintInOrder(ctx);
          }
        }
      );
      fabric2.Ellipse.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" "));
      fabric2.Ellipse.fromElement = function(element, callback) {
        var parsedAttributes = fabric2.parseAttributes(element, fabric2.Ellipse.ATTRIBUTE_NAMES);
        parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;
        parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;
        callback(new fabric2.Ellipse(parsedAttributes));
      };
      fabric2.Ellipse.fromObject = function(object, callback) {
        fabric2.Object._fromObject("Ellipse", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend;
      if (fabric2.Rect) {
        fabric2.warn("fabric.Rect is already defined");
        return;
      }
      fabric2.Rect = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Rect.prototype */
        {
          /**
           * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})
           * as well as for history (undo/redo) purposes
           * @type Array
           */
          stateProperties: fabric2.Object.prototype.stateProperties.concat("rx", "ry"),
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "rect",
          /**
           * Horizontal border radius
           * @type Number
           * @default
           */
          rx: 0,
          /**
           * Vertical border radius
           * @type Number
           * @default
           */
          ry: 0,
          cacheProperties: fabric2.Object.prototype.cacheProperties.concat("rx", "ry"),
          /**
           * Constructor
           * @param {Object} [options] Options object
           * @return {Object} thisArg
           */
          initialize: function(options) {
            this.callSuper("initialize", options);
            this._initRxRy();
          },
          /**
           * Initializes rx/ry attributes
           * @private
           */
          _initRxRy: function() {
            if (this.rx && !this.ry) {
              this.ry = this.rx;
            } else if (this.ry && !this.rx) {
              this.rx = this.ry;
            }
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0, ry = this.ry ? Math.min(this.ry, this.height / 2) : 0, w2 = this.width, h2 = this.height, x = -this.width / 2, y2 = -this.height / 2, isRounded = rx !== 0 || ry !== 0, k = 1 - 0.5522847498;
            ctx.beginPath();
            ctx.moveTo(x + rx, y2);
            ctx.lineTo(x + w2 - rx, y2);
            isRounded && ctx.bezierCurveTo(x + w2 - k * rx, y2, x + w2, y2 + k * ry, x + w2, y2 + ry);
            ctx.lineTo(x + w2, y2 + h2 - ry);
            isRounded && ctx.bezierCurveTo(x + w2, y2 + h2 - k * ry, x + w2 - k * rx, y2 + h2, x + w2 - rx, y2 + h2);
            ctx.lineTo(x + rx, y2 + h2);
            isRounded && ctx.bezierCurveTo(x + k * rx, y2 + h2, x, y2 + h2 - k * ry, x, y2 + h2 - ry);
            ctx.lineTo(x, y2 + ry);
            isRounded && ctx.bezierCurveTo(x, y2 + k * ry, x + k * rx, y2, x + rx, y2);
            ctx.closePath();
            this._renderPaintInOrder(ctx);
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            return this.callSuper("toObject", ["rx", "ry"].concat(propertiesToInclude));
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            var x = -this.width / 2, y2 = -this.height / 2;
            return [
              "<rect ",
              "COMMON_PARTS",
              'x="',
              x,
              '" y="',
              y2,
              '" rx="',
              this.rx,
              '" ry="',
              this.ry,
              '" width="',
              this.width,
              '" height="',
              this.height,
              '" />\n'
            ];
          }
          /* _TO_SVG_END_ */
        }
      );
      fabric2.Rect.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" "));
      fabric2.Rect.fromElement = function(element, callback, options) {
        if (!element) {
          return callback(null);
        }
        options = options || {};
        var parsedAttributes = fabric2.parseAttributes(element, fabric2.Rect.ATTRIBUTE_NAMES);
        parsedAttributes.left = parsedAttributes.left || 0;
        parsedAttributes.top = parsedAttributes.top || 0;
        parsedAttributes.height = parsedAttributes.height || 0;
        parsedAttributes.width = parsedAttributes.width || 0;
        var rect = new fabric2.Rect(extend(options ? fabric2.util.object.clone(options) : {}, parsedAttributes));
        rect.visible = rect.visible && rect.width > 0 && rect.height > 0;
        callback(rect);
      };
      fabric2.Rect.fromObject = function(object, callback) {
        return fabric2.Object._fromObject("Rect", object, callback);
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend, min = fabric2.util.array.min, max = fabric2.util.array.max, toFixed = fabric2.util.toFixed;
      if (fabric2.Polyline) {
        fabric2.warn("fabric.Polyline is already defined");
        return;
      }
      fabric2.Polyline = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Polyline.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "polyline",
          /**
           * Points array
           * @type Array
           * @default
           */
          points: null,
          cacheProperties: fabric2.Object.prototype.cacheProperties.concat("points"),
          /**
           * Constructor
           * @param {Array} points Array of points (where each point is an object with x and y)
           * @param {Object} [options] Options object
           * @return {fabric.Polyline} thisArg
           * @example
           * var poly = new fabric.Polyline([
           *     { x: 10, y: 10 },
           *     { x: 50, y: 30 },
           *     { x: 40, y: 70 },
           *     { x: 60, y: 50 },
           *     { x: 100, y: 150 },
           *     { x: 40, y: 100 }
           *   ], {
           *   stroke: 'red',
           *   left: 100,
           *   top: 100
           * });
           */
          initialize: function(points, options) {
            options = options || {};
            this.points = points || [];
            this.callSuper("initialize", options);
            this._setPositionDimensions(options);
          },
          _setPositionDimensions: function(options) {
            var calcDim = this._calcDimensions(options), correctLeftTop;
            this.width = calcDim.width;
            this.height = calcDim.height;
            if (!options.fromSVG) {
              correctLeftTop = this.translateToGivenOrigin(
                { x: calcDim.left - this.strokeWidth / 2, y: calcDim.top - this.strokeWidth / 2 },
                "left",
                "top",
                this.originX,
                this.originY
              );
            }
            if (typeof options.left === "undefined") {
              this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;
            }
            if (typeof options.top === "undefined") {
              this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;
            }
            this.pathOffset = {
              x: calcDim.left + this.width / 2,
              y: calcDim.top + this.height / 2
            };
          },
          /**
           * Calculate the polygon min and max point from points array,
           * returning an object with left, top, width, height to measure the
           * polygon size
           * @return {Object} object.left X coordinate of the polygon leftmost point
           * @return {Object} object.top Y coordinate of the polygon topmost point
           * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point
           * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point
           * @private
           */
          _calcDimensions: function() {
            var points = this.points, minX = min(points, "x") || 0, minY = min(points, "y") || 0, maxX = max(points, "x") || 0, maxY = max(points, "y") || 0, width = maxX - minX, height = maxY - minY;
            return {
              left: minX,
              top: minY,
              width,
              height
            };
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} Object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            return extend(this.callSuper("toObject", propertiesToInclude), {
              points: this.points.concat()
            });
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y, NUM_FRACTION_DIGITS = fabric2.Object.NUM_FRACTION_DIGITS;
            for (var i2 = 0, len = this.points.length; i2 < len; i2++) {
              points.push(
                toFixed(this.points[i2].x - diffX, NUM_FRACTION_DIGITS),
                ",",
                toFixed(this.points[i2].y - diffY, NUM_FRACTION_DIGITS),
                " "
              );
            }
            return [
              "<" + this.type + " ",
              "COMMON_PARTS",
              'points="',
              points.join(""),
              '" />\n'
            ];
          },
          /* _TO_SVG_END_ */
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          commonRender: function(ctx) {
            var point, len = this.points.length, x = this.pathOffset.x, y2 = this.pathOffset.y;
            if (!len || isNaN(this.points[len - 1].y)) {
              return false;
            }
            ctx.beginPath();
            ctx.moveTo(this.points[0].x - x, this.points[0].y - y2);
            for (var i2 = 0; i2 < len; i2++) {
              point = this.points[i2];
              ctx.lineTo(point.x - x, point.y - y2);
            }
            return true;
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            if (!this.commonRender(ctx)) {
              return;
            }
            this._renderPaintInOrder(ctx);
          },
          /**
           * Returns complexity of an instance
           * @return {Number} complexity of this instance
           */
          complexity: function() {
            return this.get("points").length;
          }
        }
      );
      fabric2.Polyline.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat();
      fabric2.Polyline.fromElementGenerator = function(_class) {
        return function(element, callback, options) {
          if (!element) {
            return callback(null);
          }
          options || (options = {});
          var points = fabric2.parsePointsAttribute(element.getAttribute("points")), parsedAttributes = fabric2.parseAttributes(element, fabric2[_class].ATTRIBUTE_NAMES);
          parsedAttributes.fromSVG = true;
          callback(new fabric2[_class](points, extend(parsedAttributes, options)));
        };
      };
      fabric2.Polyline.fromElement = fabric2.Polyline.fromElementGenerator("Polyline");
      fabric2.Polyline.fromObject = function(object, callback) {
        return fabric2.Object._fromObject("Polyline", object, callback, "points");
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      if (fabric2.Polygon) {
        fabric2.warn("fabric.Polygon is already defined");
        return;
      }
      fabric2.Polygon = fabric2.util.createClass(
        fabric2.Polyline,
        /** @lends fabric.Polygon.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "polygon",
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            if (!this.commonRender(ctx)) {
              return;
            }
            ctx.closePath();
            this._renderPaintInOrder(ctx);
          }
        }
      );
      fabric2.Polygon.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat();
      fabric2.Polygon.fromElement = fabric2.Polyline.fromElementGenerator("Polygon");
      fabric2.Polygon.fromObject = function(object, callback) {
        fabric2.Object._fromObject("Polygon", object, callback, "points");
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), min = fabric2.util.array.min, max = fabric2.util.array.max, extend = fabric2.util.object.extend, _toString = Object.prototype.toString, toFixed = fabric2.util.toFixed;
      if (fabric2.Path) {
        fabric2.warn("fabric.Path is already defined");
        return;
      }
      fabric2.Path = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Path.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "path",
          /**
           * Array of path points
           * @type Array
           * @default
           */
          path: null,
          cacheProperties: fabric2.Object.prototype.cacheProperties.concat("path", "fillRule"),
          stateProperties: fabric2.Object.prototype.stateProperties.concat("path"),
          /**
           * Constructor
           * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
           * @param {Object} [options] Options object
           * @return {fabric.Path} thisArg
           */
          initialize: function(path, options) {
            options = options || {};
            this.callSuper("initialize", options);
            if (!path) {
              path = [];
            }
            var fromArray = _toString.call(path) === "[object Array]";
            this.path = fabric2.util.makePathSimpler(
              fromArray ? path : fabric2.util.parsePath(path)
            );
            if (!this.path) {
              return;
            }
            fabric2.Polyline.prototype._setPositionDimensions.call(this, options);
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx context to render path on
           */
          _renderPathCommands: function(ctx) {
            var current, subpathStartX = 0, subpathStartY = 0, x = 0, y2 = 0, controlX = 0, controlY = 0, l2 = -this.pathOffset.x, t2 = -this.pathOffset.y;
            ctx.beginPath();
            for (var i2 = 0, len = this.path.length; i2 < len; ++i2) {
              current = this.path[i2];
              switch (current[0]) {
                case "L":
                  x = current[1];
                  y2 = current[2];
                  ctx.lineTo(x + l2, y2 + t2);
                  break;
                case "M":
                  x = current[1];
                  y2 = current[2];
                  subpathStartX = x;
                  subpathStartY = y2;
                  ctx.moveTo(x + l2, y2 + t2);
                  break;
                case "C":
                  x = current[5];
                  y2 = current[6];
                  controlX = current[3];
                  controlY = current[4];
                  ctx.bezierCurveTo(
                    current[1] + l2,
                    current[2] + t2,
                    controlX + l2,
                    controlY + t2,
                    x + l2,
                    y2 + t2
                  );
                  break;
                case "Q":
                  ctx.quadraticCurveTo(
                    current[1] + l2,
                    current[2] + t2,
                    current[3] + l2,
                    current[4] + t2
                  );
                  x = current[3];
                  y2 = current[4];
                  controlX = current[1];
                  controlY = current[2];
                  break;
                case "z":
                case "Z":
                  x = subpathStartX;
                  y2 = subpathStartY;
                  ctx.closePath();
                  break;
              }
            }
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx context to render path on
           */
          _render: function(ctx) {
            this._renderPathCommands(ctx);
            this._renderPaintInOrder(ctx);
          },
          /**
           * Returns string representation of an instance
           * @return {String} string representation of an instance
           */
          toString: function() {
            return "#<fabric.Path (" + this.complexity() + '): { "top": ' + this.top + ', "left": ' + this.left + " }>";
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            return extend(this.callSuper("toObject", propertiesToInclude), {
              path: this.path.map(function(item) {
                return item.slice();
              })
            });
          },
          /**
           * Returns dataless object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toDatalessObject: function(propertiesToInclude) {
            var o2 = this.toObject(["sourcePath"].concat(propertiesToInclude));
            if (o2.sourcePath) {
              delete o2.path;
            }
            return o2;
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            var path = fabric2.util.joinPath(this.path);
            return [
              "<path ",
              "COMMON_PARTS",
              'd="',
              path,
              '" stroke-linecap="round" ',
              "/>\n"
            ];
          },
          _getOffsetTransform: function() {
            var digits = fabric2.Object.NUM_FRACTION_DIGITS;
            return " translate(" + toFixed(-this.pathOffset.x, digits) + ", " + toFixed(-this.pathOffset.y, digits) + ")";
          },
          /**
           * Returns svg clipPath representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          toClipPathSVG: function(reviver) {
            var additionalTransform = this._getOffsetTransform();
            return "	" + this._createBaseClipPathSVGMarkup(
              this._toSVG(),
              { reviver, additionalTransform }
            );
          },
          /**
           * Returns svg representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          toSVG: function(reviver) {
            var additionalTransform = this._getOffsetTransform();
            return this._createBaseSVGMarkup(this._toSVG(), { reviver, additionalTransform });
          },
          /* _TO_SVG_END_ */
          /**
           * Returns number representation of an instance complexity
           * @return {Number} complexity of this instance
           */
          complexity: function() {
            return this.path.length;
          },
          /**
           * @private
           */
          _calcDimensions: function() {
            var aX = [], aY = [], current, subpathStartX = 0, subpathStartY = 0, x = 0, y2 = 0, bounds;
            for (var i2 = 0, len = this.path.length; i2 < len; ++i2) {
              current = this.path[i2];
              switch (current[0]) {
                case "L":
                  x = current[1];
                  y2 = current[2];
                  bounds = [];
                  break;
                case "M":
                  x = current[1];
                  y2 = current[2];
                  subpathStartX = x;
                  subpathStartY = y2;
                  bounds = [];
                  break;
                case "C":
                  bounds = fabric2.util.getBoundsOfCurve(
                    x,
                    y2,
                    current[1],
                    current[2],
                    current[3],
                    current[4],
                    current[5],
                    current[6]
                  );
                  x = current[5];
                  y2 = current[6];
                  break;
                case "Q":
                  bounds = fabric2.util.getBoundsOfCurve(
                    x,
                    y2,
                    current[1],
                    current[2],
                    current[1],
                    current[2],
                    current[3],
                    current[4]
                  );
                  x = current[3];
                  y2 = current[4];
                  break;
                case "z":
                case "Z":
                  x = subpathStartX;
                  y2 = subpathStartY;
                  break;
              }
              bounds.forEach(function(point) {
                aX.push(point.x);
                aY.push(point.y);
              });
              aX.push(x);
              aY.push(y2);
            }
            var minX = min(aX) || 0, minY = min(aY) || 0, maxX = max(aX) || 0, maxY = max(aY) || 0, deltaX = maxX - minX, deltaY = maxY - minY;
            return {
              left: minX,
              top: minY,
              width: deltaX,
              height: deltaY
            };
          }
        }
      );
      fabric2.Path.fromObject = function(object, callback) {
        if (typeof object.sourcePath === "string") {
          var pathUrl = object.sourcePath;
          fabric2.loadSVGFromURL(pathUrl, function(elements) {
            var path = elements[0];
            path.setOptions(object);
            callback && callback(path);
          });
        } else {
          fabric2.Object._fromObject("Path", object, callback, "path");
        }
      };
      fabric2.Path.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat(["d"]);
      fabric2.Path.fromElement = function(element, callback, options) {
        var parsedAttributes = fabric2.parseAttributes(element, fabric2.Path.ATTRIBUTE_NAMES);
        parsedAttributes.fromSVG = true;
        callback(new fabric2.Path(parsedAttributes.d, extend(parsedAttributes, options)));
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), min = fabric2.util.array.min, max = fabric2.util.array.max;
      if (fabric2.Group) {
        return;
      }
      fabric2.Group = fabric2.util.createClass(
        fabric2.Object,
        fabric2.Collection,
        /** @lends fabric.Group.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "group",
          /**
           * Width of stroke
           * @type Number
           * @default
           */
          strokeWidth: 0,
          /**
           * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets
           * @type Boolean
           * @default
           */
          subTargetCheck: false,
          /**
           * Groups are container, do not render anything on theyr own, ence no cache properties
           * @type Array
           * @default
           */
          cacheProperties: [],
          /**
           * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still
           * available setting this boolean to true.
           * @type Boolean
           * @since 2.0.0
           * @default
           */
          useSetOnGroup: false,
          /**
           * Constructor
           * @param {Object} objects Group objects
           * @param {Object} [options] Options object
           * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.
           * @return {Object} thisArg
           */
          initialize: function(objects, options, isAlreadyGrouped) {
            options = options || {};
            this._objects = [];
            isAlreadyGrouped && this.callSuper("initialize", options);
            this._objects = objects || [];
            for (var i2 = this._objects.length; i2--; ) {
              this._objects[i2].group = this;
            }
            if (!isAlreadyGrouped) {
              var center = options && options.centerPoint;
              if (options.originX !== void 0) {
                this.originX = options.originX;
              }
              if (options.originY !== void 0) {
                this.originY = options.originY;
              }
              center || this._calcBounds();
              this._updateObjectsCoords(center);
              delete options.centerPoint;
              this.callSuper("initialize", options);
            } else {
              this._updateObjectsACoords();
            }
            this.setCoords();
          },
          /**
           * @private
           */
          _updateObjectsACoords: function() {
            var skipControls = true;
            for (var i2 = this._objects.length; i2--; ) {
              this._objects[i2].setCoords(skipControls);
            }
          },
          /**
           * @private
           * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
           */
          _updateObjectsCoords: function(center) {
            var center = center || this.getCenterPoint();
            for (var i2 = this._objects.length; i2--; ) {
              this._updateObjectCoords(this._objects[i2], center);
            }
          },
          /**
           * @private
           * @param {Object} object
           * @param {fabric.Point} center, current center of group.
           */
          _updateObjectCoords: function(object, center) {
            var objectLeft = object.left, objectTop = object.top, skipControls = true;
            object.set({
              left: objectLeft - center.x,
              top: objectTop - center.y
            });
            object.group = this;
            object.setCoords(skipControls);
          },
          /**
           * Returns string represenation of a group
           * @return {String}
           */
          toString: function() {
            return "#<fabric.Group: (" + this.complexity() + ")>";
          },
          /**
           * Adds an object to a group; Then recalculates group's dimension, position.
           * @param {Object} object
           * @return {fabric.Group} thisArg
           * @chainable
           */
          addWithUpdate: function(object) {
            var nested = !!this.group;
            this._restoreObjectsState();
            fabric2.util.resetObjectTransform(this);
            if (object) {
              if (nested) {
                fabric2.util.removeTransformFromObject(object, this.group.calcTransformMatrix());
              }
              this._objects.push(object);
              object.group = this;
              object._set("canvas", this.canvas);
            }
            this._calcBounds();
            this._updateObjectsCoords();
            this.dirty = true;
            if (nested) {
              this.group.addWithUpdate();
            } else {
              this.setCoords();
            }
            return this;
          },
          /**
           * Removes an object from a group; Then recalculates group's dimension, position.
           * @param {Object} object
           * @return {fabric.Group} thisArg
           * @chainable
           */
          removeWithUpdate: function(object) {
            this._restoreObjectsState();
            fabric2.util.resetObjectTransform(this);
            this.remove(object);
            this._calcBounds();
            this._updateObjectsCoords();
            this.setCoords();
            this.dirty = true;
            return this;
          },
          /**
           * @private
           */
          _onObjectAdded: function(object) {
            this.dirty = true;
            object.group = this;
            object._set("canvas", this.canvas);
          },
          /**
           * @private
           */
          _onObjectRemoved: function(object) {
            this.dirty = true;
            delete object.group;
          },
          /**
           * @private
           */
          _set: function(key, value) {
            var i2 = this._objects.length;
            if (this.useSetOnGroup) {
              while (i2--) {
                this._objects[i2].setOnGroup(key, value);
              }
            }
            if (key === "canvas") {
              while (i2--) {
                this._objects[i2]._set(key, value);
              }
            }
            fabric2.Object.prototype._set.call(this, key, value);
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            var _includeDefaultValues = this.includeDefaultValues;
            var objsToObject = this._objects.filter(function(obj2) {
              return !obj2.excludeFromExport;
            }).map(function(obj2) {
              var originalDefaults = obj2.includeDefaultValues;
              obj2.includeDefaultValues = _includeDefaultValues;
              var _obj = obj2.toObject(propertiesToInclude);
              obj2.includeDefaultValues = originalDefaults;
              return _obj;
            });
            var obj = fabric2.Object.prototype.toObject.call(this, propertiesToInclude);
            obj.objects = objsToObject;
            return obj;
          },
          /**
           * Returns object representation of an instance, in dataless mode.
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} object representation of an instance
           */
          toDatalessObject: function(propertiesToInclude) {
            var objsToObject, sourcePath = this.sourcePath;
            if (sourcePath) {
              objsToObject = sourcePath;
            } else {
              var _includeDefaultValues = this.includeDefaultValues;
              objsToObject = this._objects.map(function(obj2) {
                var originalDefaults = obj2.includeDefaultValues;
                obj2.includeDefaultValues = _includeDefaultValues;
                var _obj = obj2.toDatalessObject(propertiesToInclude);
                obj2.includeDefaultValues = originalDefaults;
                return _obj;
              });
            }
            var obj = fabric2.Object.prototype.toDatalessObject.call(this, propertiesToInclude);
            obj.objects = objsToObject;
            return obj;
          },
          /**
           * Renders instance on a given context
           * @param {CanvasRenderingContext2D} ctx context to render instance on
           */
          render: function(ctx) {
            this._transformDone = true;
            this.callSuper("render", ctx);
            this._transformDone = false;
          },
          /**
           * Decide if the object should cache or not. Create its own cache level
           * needsItsOwnCache should be used when the object drawing method requires
           * a cache step. None of the fabric classes requires it.
           * Generally you do not cache objects in groups because the group is already cached.
           * @return {Boolean}
           */
          shouldCache: function() {
            var ownCache = fabric2.Object.prototype.shouldCache.call(this);
            if (ownCache) {
              for (var i2 = 0, len = this._objects.length; i2 < len; i2++) {
                if (this._objects[i2].willDrawShadow()) {
                  this.ownCaching = false;
                  return false;
                }
              }
            }
            return ownCache;
          },
          /**
           * Check if this object or a child object will cast a shadow
           * @return {Boolean}
           */
          willDrawShadow: function() {
            if (fabric2.Object.prototype.willDrawShadow.call(this)) {
              return true;
            }
            for (var i2 = 0, len = this._objects.length; i2 < len; i2++) {
              if (this._objects[i2].willDrawShadow()) {
                return true;
              }
            }
            return false;
          },
          /**
           * Check if this group or its parent group are caching, recursively up
           * @return {Boolean}
           */
          isOnACache: function() {
            return this.ownCaching || this.group && this.group.isOnACache();
          },
          /**
           * Execute the drawing operation for an object on a specified context
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          drawObject: function(ctx) {
            for (var i2 = 0, len = this._objects.length; i2 < len; i2++) {
              this._objects[i2].render(ctx);
            }
            this._drawClipPath(ctx);
          },
          /**
           * Check if cache is dirty
           */
          isCacheDirty: function(skipCanvas) {
            if (this.callSuper("isCacheDirty", skipCanvas)) {
              return true;
            }
            if (!this.statefullCache) {
              return false;
            }
            for (var i2 = 0, len = this._objects.length; i2 < len; i2++) {
              if (this._objects[i2].isCacheDirty(true)) {
                if (this._cacheCanvas) {
                  var x = this.cacheWidth / this.zoomX, y2 = this.cacheHeight / this.zoomY;
                  this._cacheContext.clearRect(-x / 2, -y2 / 2, x, y2);
                }
                return true;
              }
            }
            return false;
          },
          /**
           * Restores original state of each of group objects (original state is that which was before group was created).
           * if the nested boolean is true, the original state will be restored just for the
           * first group and not for all the group chain
           * @private
           * @param {Boolean} nested tell the function to restore object state up to the parent group and not more
           * @return {fabric.Group} thisArg
           * @chainable
           */
          _restoreObjectsState: function() {
            var groupMatrix = this.calcOwnMatrix();
            this._objects.forEach(function(object) {
              fabric2.util.addTransformToObject(object, groupMatrix);
              delete object.group;
              object.setCoords();
            });
            return this;
          },
          /**
           * Realises the transform from this group onto the supplied object
           * i.e. it tells you what would happen if the supplied object was in
           * the group, and then the group was destroyed. It mutates the supplied
           * object.
           * Warning: this method is not useful anymore, it has been kept to no break the api.
           * is not used in the fabricJS codebase
           * this method will be reduced to using the utility.
           * @private
           * @deprecated
           * @param {fabric.Object} object
           * @param {Array} parentMatrix parent transformation
           * @return {fabric.Object} transformedObject
           */
          realizeTransform: function(object, parentMatrix) {
            fabric2.util.addTransformToObject(object, parentMatrix);
            return object;
          },
          /**
           * Destroys a group (restoring state of its objects)
           * @return {fabric.Group} thisArg
           * @chainable
           */
          destroy: function() {
            this._objects.forEach(function(object) {
              object.set("dirty", true);
            });
            return this._restoreObjectsState();
          },
          /**
           * make a group an active selection, remove the group from canvas
           * the group has to be on canvas for this to work.
           * @return {fabric.ActiveSelection} thisArg
           * @chainable
           */
          toActiveSelection: function() {
            if (!this.canvas) {
              return;
            }
            var objects = this._objects, canvas = this.canvas;
            this._objects = [];
            var options = this.toObject();
            delete options.objects;
            var activeSelection = new fabric2.ActiveSelection([]);
            activeSelection.set(options);
            activeSelection.type = "activeSelection";
            canvas.remove(this);
            objects.forEach(function(object) {
              object.group = activeSelection;
              object.dirty = true;
              canvas.add(object);
            });
            activeSelection.canvas = canvas;
            activeSelection._objects = objects;
            canvas._activeObject = activeSelection;
            activeSelection.setCoords();
            return activeSelection;
          },
          /**
           * Destroys a group (restoring state of its objects)
           * @return {fabric.Group} thisArg
           * @chainable
           */
          ungroupOnCanvas: function() {
            return this._restoreObjectsState();
          },
          /**
           * Sets coordinates of all objects inside group
           * @return {fabric.Group} thisArg
           * @chainable
           */
          setObjectsCoords: function() {
            var skipControls = true;
            this.forEachObject(function(object) {
              object.setCoords(skipControls);
            });
            return this;
          },
          /**
           * @private
           */
          _calcBounds: function(onlyWidthHeight) {
            var aX = [], aY = [], o2, prop, coords, props = ["tr", "br", "bl", "tl"], i2 = 0, iLen = this._objects.length, j2, jLen = props.length;
            for (; i2 < iLen; ++i2) {
              o2 = this._objects[i2];
              coords = o2.calcACoords();
              for (j2 = 0; j2 < jLen; j2++) {
                prop = props[j2];
                aX.push(coords[prop].x);
                aY.push(coords[prop].y);
              }
              o2.aCoords = coords;
            }
            this._getBounds(aX, aY, onlyWidthHeight);
          },
          /**
           * @private
           */
          _getBounds: function(aX, aY, onlyWidthHeight) {
            var minXY = new fabric2.Point(min(aX), min(aY)), maxXY = new fabric2.Point(max(aX), max(aY)), top = minXY.y || 0, left = minXY.x || 0, width = maxXY.x - minXY.x || 0, height = maxXY.y - minXY.y || 0;
            this.width = width;
            this.height = height;
            if (!onlyWidthHeight) {
              this.setPositionByOrigin({ x: left, y: top }, "left", "top");
            }
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          _toSVG: function(reviver) {
            var svgString = ["<g ", "COMMON_PARTS", " >\n"];
            for (var i2 = 0, len = this._objects.length; i2 < len; i2++) {
              svgString.push("		", this._objects[i2].toSVG(reviver));
            }
            svgString.push("</g>\n");
            return svgString;
          },
          /**
           * Returns styles-string for svg-export, specific version for group
           * @return {String}
           */
          getSvgStyles: function() {
            var opacity = typeof this.opacity !== "undefined" && this.opacity !== 1 ? "opacity: " + this.opacity + ";" : "", visibility = this.visible ? "" : " visibility: hidden;";
            return [
              opacity,
              this.getSvgFilter(),
              visibility
            ].join("");
          },
          /**
           * Returns svg clipPath representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          toClipPathSVG: function(reviver) {
            var svgString = [];
            for (var i2 = 0, len = this._objects.length; i2 < len; i2++) {
              svgString.push("	", this._objects[i2].toClipPathSVG(reviver));
            }
            return this._createBaseClipPathSVGMarkup(svgString, { reviver });
          }
          /* _TO_SVG_END_ */
        }
      );
      fabric2.Group.fromObject = function(object, callback) {
        var objects = object.objects, options = fabric2.util.object.clone(object, true);
        delete options.objects;
        if (typeof objects === "string") {
          fabric2.loadSVGFromURL(objects, function(elements) {
            var group = fabric2.util.groupSVGElements(elements, object, objects);
            group.set(options);
            callback && callback(group);
          });
          return;
        }
        fabric2.util.enlivenObjects(objects, function(enlivenedObjects) {
          fabric2.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {
            var options2 = fabric2.util.object.clone(object, true);
            options2.clipPath = enlivedClipPath[0];
            delete options2.objects;
            callback && callback(new fabric2.Group(enlivenedObjects, options2, true));
          });
        });
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      if (fabric2.ActiveSelection) {
        return;
      }
      fabric2.ActiveSelection = fabric2.util.createClass(
        fabric2.Group,
        /** @lends fabric.ActiveSelection.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "activeSelection",
          /**
           * Constructor
           * @param {Object} objects ActiveSelection objects
           * @param {Object} [options] Options object
           * @return {Object} thisArg
           */
          initialize: function(objects, options) {
            options = options || {};
            this._objects = objects || [];
            for (var i2 = this._objects.length; i2--; ) {
              this._objects[i2].group = this;
            }
            if (options.originX) {
              this.originX = options.originX;
            }
            if (options.originY) {
              this.originY = options.originY;
            }
            this._calcBounds();
            this._updateObjectsCoords();
            fabric2.Object.prototype.initialize.call(this, options);
            this.setCoords();
          },
          /**
           * Change te activeSelection to a normal group,
           * High level function that automatically adds it to canvas as
           * active object. no events fired.
           * @since 2.0.0
           * @return {fabric.Group}
           */
          toGroup: function() {
            var objects = this._objects.concat();
            this._objects = [];
            var options = fabric2.Object.prototype.toObject.call(this);
            var newGroup = new fabric2.Group([]);
            delete options.type;
            newGroup.set(options);
            objects.forEach(function(object) {
              object.canvas.remove(object);
              object.group = newGroup;
            });
            newGroup._objects = objects;
            if (!this.canvas) {
              return newGroup;
            }
            var canvas = this.canvas;
            canvas.add(newGroup);
            canvas._activeObject = newGroup;
            newGroup.setCoords();
            return newGroup;
          },
          /**
           * If returns true, deselection is cancelled.
           * @since 2.0.0
           * @return {Boolean} [cancel]
           */
          onDeselect: function() {
            this.destroy();
            return false;
          },
          /**
           * Returns string representation of a group
           * @return {String}
           */
          toString: function() {
            return "#<fabric.ActiveSelection: (" + this.complexity() + ")>";
          },
          /**
           * Decide if the object should cache or not. Create its own cache level
           * objectCaching is a global flag, wins over everything
           * needsItsOwnCache should be used when the object drawing method requires
           * a cache step. None of the fabric classes requires it.
           * Generally you do not cache objects in groups because the group outside is cached.
           * @return {Boolean}
           */
          shouldCache: function() {
            return false;
          },
          /**
           * Check if this group or its parent group are caching, recursively up
           * @return {Boolean}
           */
          isOnACache: function() {
            return false;
          },
          /**
           * Renders controls and borders for the object
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {Object} [styleOverride] properties to override the object style
           * @param {Object} [childrenOverride] properties to override the children overrides
           */
          _renderControls: function(ctx, styleOverride, childrenOverride) {
            ctx.save();
            ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
            this.callSuper("_renderControls", ctx, styleOverride);
            childrenOverride = childrenOverride || {};
            if (typeof childrenOverride.hasControls === "undefined") {
              childrenOverride.hasControls = false;
            }
            childrenOverride.forActiveSelection = true;
            for (var i2 = 0, len = this._objects.length; i2 < len; i2++) {
              this._objects[i2]._renderControls(ctx, childrenOverride);
            }
            ctx.restore();
          }
        }
      );
      fabric2.ActiveSelection.fromObject = function(object, callback) {
        fabric2.util.enlivenObjects(object.objects, function(enlivenedObjects) {
          delete object.objects;
          callback && callback(new fabric2.ActiveSelection(enlivenedObjects, object, true));
        });
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var extend = fabric.util.object.extend;
      if (!global2.fabric) {
        global2.fabric = {};
      }
      if (global2.fabric.Image) {
        fabric.warn("fabric.Image is already defined.");
        return;
      }
      fabric.Image = fabric.util.createClass(
        fabric.Object,
        /** @lends fabric.Image.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "image",
          /**
           * Width of a stroke.
           * For image quality a stroke multiple of 2 gives better results.
           * @type Number
           * @default
           */
          strokeWidth: 0,
          /**
           * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.
           * This allows for relative urls as image src.
           * @since 2.7.0
           * @type Boolean
           * @default
           */
          srcFromAttribute: false,
          /**
           * private
           * contains last value of scaleX to detect
           * if the Image got resized after the last Render
           * @type Number
           */
          _lastScaleX: 1,
          /**
           * private
           * contains last value of scaleY to detect
           * if the Image got resized after the last Render
           * @type Number
           */
          _lastScaleY: 1,
          /**
           * private
           * contains last value of scaling applied by the apply filter chain
           * @type Number
           */
          _filterScalingX: 1,
          /**
           * private
           * contains last value of scaling applied by the apply filter chain
           * @type Number
           */
          _filterScalingY: 1,
          /**
           * minimum scale factor under which any resizeFilter is triggered to resize the image
           * 0 will disable the automatic resize. 1 will trigger automatically always.
           * number bigger than 1 are not implemented yet.
           * @type Number
           */
          minimumScaleTrigger: 0.5,
          /**
           * List of properties to consider when checking if
           * state of an object is changed ({@link fabric.Object#hasStateChanged})
           * as well as for history (undo/redo) purposes
           * @type Array
           */
          stateProperties: fabric.Object.prototype.stateProperties.concat("cropX", "cropY"),
          /**
           * List of properties to consider when checking if cache needs refresh
           * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
           * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
           * and refreshed at the next render
           * @type Array
           */
          cacheProperties: fabric.Object.prototype.cacheProperties.concat("cropX", "cropY"),
          /**
           * key used to retrieve the texture representing this image
           * @since 2.0.0
           * @type String
           * @default
           */
          cacheKey: "",
          /**
           * Image crop in pixels from original image size.
           * @since 2.0.0
           * @type Number
           * @default
           */
          cropX: 0,
          /**
           * Image crop in pixels from original image size.
           * @since 2.0.0
           * @type Number
           * @default
           */
          cropY: 0,
          /**
           * Indicates whether this canvas will use image smoothing when painting this image.
           * Also influence if the cacheCanvas for this image uses imageSmoothing
           * @since 4.0.0-beta.11
           * @type Boolean
           * @default
           */
          imageSmoothing: true,
          /**
           * Constructor
           * Image can be initialized with any canvas drawable or a string.
           * The string should be a url and will be loaded as an image.
           * Canvas and Image element work out of the box, while videos require extra code to work.
           * Please check video element events for seeking.
           * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} element Image element
           * @param {Object} [options] Options object
           * @param {function} [callback] callback function to call after eventual filters applied.
           * @return {fabric.Image} thisArg
           */
          initialize: function(element, options) {
            options || (options = {});
            this.filters = [];
            this.cacheKey = "texture" + fabric.Object.__uid++;
            this.callSuper("initialize", options);
            this._initElement(element, options);
          },
          /**
           * Returns image element which this instance if based on
           * @return {HTMLImageElement} Image element
           */
          getElement: function() {
            return this._element || {};
          },
          /**
           * Sets image element for this instance to a specified one.
           * If filters defined they are applied to new image.
           * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.
           * @param {HTMLImageElement} element
           * @param {Object} [options] Options object
           * @return {fabric.Image} thisArg
           * @chainable
           */
          setElement: function(element, options) {
            this.removeTexture(this.cacheKey);
            this.removeTexture(this.cacheKey + "_filtered");
            this._element = element;
            this._originalElement = element;
            this._initConfig(options);
            if (this.filters.length !== 0) {
              this.applyFilters();
            }
            if (this.resizeFilter) {
              this.applyResizeFilters();
            }
            return this;
          },
          /**
           * Delete a single texture if in webgl mode
           */
          removeTexture: function(key) {
            var backend = fabric.filterBackend;
            if (backend && backend.evictCachesForKey) {
              backend.evictCachesForKey(key);
            }
          },
          /**
           * Delete textures, reference to elements and eventually JSDOM cleanup
           */
          dispose: function() {
            this.removeTexture(this.cacheKey);
            this.removeTexture(this.cacheKey + "_filtered");
            this._cacheContext = void 0;
            ["_originalElement", "_element", "_filteredEl", "_cacheCanvas"].forEach((function(element) {
              fabric.util.cleanUpJsdomNode(this[element]);
              this[element] = void 0;
            }).bind(this));
          },
          /**
           * Get the crossOrigin value (of the corresponding image element)
           */
          getCrossOrigin: function() {
            return this._originalElement && (this._originalElement.crossOrigin || null);
          },
          /**
           * Returns original size of an image
           * @return {Object} Object with "width" and "height" properties
           */
          getOriginalSize: function() {
            var element = this.getElement();
            return {
              width: element.naturalWidth || element.width,
              height: element.naturalHeight || element.height
            };
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _stroke: function(ctx) {
            if (!this.stroke || this.strokeWidth === 0) {
              return;
            }
            var w2 = this.width / 2, h2 = this.height / 2;
            ctx.beginPath();
            ctx.moveTo(-w2, -h2);
            ctx.lineTo(w2, -h2);
            ctx.lineTo(w2, h2);
            ctx.lineTo(-w2, h2);
            ctx.lineTo(-w2, -h2);
            ctx.closePath();
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} Object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            var filters = [];
            this.filters.forEach(function(filterObj) {
              if (filterObj) {
                filters.push(filterObj.toObject());
              }
            });
            var object = extend(
              this.callSuper(
                "toObject",
                ["cropX", "cropY"].concat(propertiesToInclude)
              ),
              {
                src: this.getSrc(),
                crossOrigin: this.getCrossOrigin(),
                filters
              }
            );
            if (this.resizeFilter) {
              object.resizeFilter = this.resizeFilter.toObject();
            }
            return object;
          },
          /**
           * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.
           * @return {Boolean}
           */
          hasCrop: function() {
            return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;
          },
          /* _TO_SVG_START_ */
          /**
           * Returns svg representation of an instance
           * @return {Array} an array of strings with the specific svg representation
           * of the instance
           */
          _toSVG: function() {
            var svgString = [], imageMarkup = [], strokeSvg, element = this._element, x = -this.width / 2, y2 = -this.height / 2, clipPath = "", imageRendering = "";
            if (!element) {
              return [];
            }
            if (this.hasCrop()) {
              var clipPathId = fabric.Object.__uid++;
              svgString.push(
                '<clipPath id="imageCrop_' + clipPathId + '">\n',
                '	<rect x="' + x + '" y="' + y2 + '" width="' + this.width + '" height="' + this.height + '" />\n',
                "</clipPath>\n"
              );
              clipPath = ' clip-path="url(#imageCrop_' + clipPathId + ')" ';
            }
            if (!this.imageSmoothing) {
              imageRendering = '" image-rendering="optimizeSpeed';
            }
            imageMarkup.push(
              "	<image ",
              "COMMON_PARTS",
              'xlink:href="',
              this.getSvgSrc(true),
              '" x="',
              x - this.cropX,
              '" y="',
              y2 - this.cropY,
              // we're essentially moving origin of transformation from top/left corner to the center of the shape
              // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
              // so that object's center aligns with container's left/top
              '" width="',
              element.width || element.naturalWidth,
              '" height="',
              element.height || element.height,
              imageRendering,
              '"',
              clipPath,
              "></image>\n"
            );
            if (this.stroke || this.strokeDashArray) {
              var origFill = this.fill;
              this.fill = null;
              strokeSvg = [
                "	<rect ",
                'x="',
                x,
                '" y="',
                y2,
                '" width="',
                this.width,
                '" height="',
                this.height,
                '" style="',
                this.getSvgStyles(),
                '"/>\n'
              ];
              this.fill = origFill;
            }
            if (this.paintFirst !== "fill") {
              svgString = svgString.concat(strokeSvg, imageMarkup);
            } else {
              svgString = svgString.concat(imageMarkup, strokeSvg);
            }
            return svgString;
          },
          /* _TO_SVG_END_ */
          /**
           * Returns source of an image
           * @param {Boolean} filtered indicates if the src is needed for svg
           * @return {String} Source of an image
           */
          getSrc: function(filtered) {
            var element = filtered ? this._element : this._originalElement;
            if (element) {
              if (element.toDataURL) {
                return element.toDataURL();
              }
              if (this.srcFromAttribute) {
                return element.getAttribute("src");
              } else {
                return element.src;
              }
            } else {
              return this.src || "";
            }
          },
          /**
           * Sets source of an image
           * @param {String} src Source string (URL)
           * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)
           * @param {Object} [options] Options object
           * @param {String} [options.crossOrigin] crossOrigin value (one of "", "anonymous", "use-credentials")
           * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
           * @return {fabric.Image} thisArg
           * @chainable
           */
          setSrc: function(src, callback, options) {
            fabric.util.loadImage(src, function(img, isError) {
              this.setElement(img, options);
              this._setWidthHeight();
              callback && callback(this, isError);
            }, this, options && options.crossOrigin);
            return this;
          },
          /**
           * Returns string representation of an instance
           * @return {String} String representation of an instance
           */
          toString: function() {
            return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
          },
          applyResizeFilters: function() {
            var filter = this.resizeFilter, minimumScale = this.minimumScaleTrigger, objectScale = this.getTotalObjectScaling(), scaleX = objectScale.scaleX, scaleY = objectScale.scaleY, elementToFilter = this._filteredEl || this._originalElement;
            if (this.group) {
              this.set("dirty", true);
            }
            if (!filter || scaleX > minimumScale && scaleY > minimumScale) {
              this._element = elementToFilter;
              this._filterScalingX = 1;
              this._filterScalingY = 1;
              this._lastScaleX = scaleX;
              this._lastScaleY = scaleY;
              return;
            }
            if (!fabric.filterBackend) {
              fabric.filterBackend = fabric.initFilterBackend();
            }
            var canvasEl = fabric.util.createCanvasElement(), cacheKey = this._filteredEl ? this.cacheKey + "_filtered" : this.cacheKey, sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;
            canvasEl.width = sourceWidth;
            canvasEl.height = sourceHeight;
            this._element = canvasEl;
            this._lastScaleX = filter.scaleX = scaleX;
            this._lastScaleY = filter.scaleY = scaleY;
            fabric.filterBackend.applyFilters(
              [filter],
              elementToFilter,
              sourceWidth,
              sourceHeight,
              this._element,
              cacheKey
            );
            this._filterScalingX = canvasEl.width / this._originalElement.width;
            this._filterScalingY = canvasEl.height / this._originalElement.height;
          },
          /**
           * Applies filters assigned to this image (from "filters" array) or from filter param
           * @method applyFilters
           * @param {Array} filters to be applied
           * @param {Boolean} forResizing specify if the filter operation is a resize operation
           * @return {thisArg} return the fabric.Image object
           * @chainable
           */
          applyFilters: function(filters) {
            filters = filters || this.filters || [];
            filters = filters.filter(function(filter) {
              return filter && !filter.isNeutralState();
            });
            this.set("dirty", true);
            this.removeTexture(this.cacheKey + "_filtered");
            if (filters.length === 0) {
              this._element = this._originalElement;
              this._filteredEl = null;
              this._filterScalingX = 1;
              this._filterScalingY = 1;
              return this;
            }
            var imgElement = this._originalElement, sourceWidth = imgElement.naturalWidth || imgElement.width, sourceHeight = imgElement.naturalHeight || imgElement.height;
            if (this._element === this._originalElement) {
              var canvasEl = fabric.util.createCanvasElement();
              canvasEl.width = sourceWidth;
              canvasEl.height = sourceHeight;
              this._element = canvasEl;
              this._filteredEl = canvasEl;
            } else {
              this._element = this._filteredEl;
              this._filteredEl.getContext("2d").clearRect(0, 0, sourceWidth, sourceHeight);
              this._lastScaleX = 1;
              this._lastScaleY = 1;
            }
            if (!fabric.filterBackend) {
              fabric.filterBackend = fabric.initFilterBackend();
            }
            fabric.filterBackend.applyFilters(
              filters,
              this._originalElement,
              sourceWidth,
              sourceHeight,
              this._element,
              this.cacheKey
            );
            if (this._originalElement.width !== this._element.width || this._originalElement.height !== this._element.height) {
              this._filterScalingX = this._element.width / this._originalElement.width;
              this._filterScalingY = this._element.height / this._originalElement.height;
            }
            return this;
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            fabric.util.setImageSmoothing(ctx, this.imageSmoothing);
            if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {
              this.applyResizeFilters();
            }
            this._stroke(ctx);
            this._renderPaintInOrder(ctx);
          },
          /**
           * Paint the cached copy of the object on the target context.
           * it will set the imageSmoothing for the draw operation
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          drawCacheOnCanvas: function(ctx) {
            fabric.util.setImageSmoothing(ctx, this.imageSmoothing);
            fabric.Object.prototype.drawCacheOnCanvas.call(this, ctx);
          },
          /**
           * Decide if the object should cache or not. Create its own cache level
           * needsItsOwnCache should be used when the object drawing method requires
           * a cache step. None of the fabric classes requires it.
           * Generally you do not cache objects in groups because the group outside is cached.
           * This is the special image version where we would like to avoid caching where possible.
           * Essentially images do not benefit from caching. They may require caching, and in that
           * case we do it. Also caching an image usually ends in a loss of details.
           * A full performance audit should be done.
           * @return {Boolean}
           */
          shouldCache: function() {
            return this.needsItsOwnCache();
          },
          _renderFill: function(ctx) {
            var elementToDraw = this._element;
            if (!elementToDraw) {
              return;
            }
            var scaleX = this._filterScalingX, scaleY = this._filterScalingY, w2 = this.width, h2 = this.height, min = Math.min, max = Math.max, cropX = max(this.cropX, 0), cropY = max(this.cropY, 0), elWidth = elementToDraw.naturalWidth || elementToDraw.width, elHeight = elementToDraw.naturalHeight || elementToDraw.height, sX = cropX * scaleX, sY = cropY * scaleY, sW = min(w2 * scaleX, elWidth - sX), sH = min(h2 * scaleY, elHeight - sY), x = -w2 / 2, y2 = -h2 / 2, maxDestW = min(w2, elWidth / scaleX - cropX), maxDestH = min(h2, elHeight / scaleY - cropY);
            elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y2, maxDestW, maxDestH);
          },
          /**
           * needed to check if image needs resize
           * @private
           */
          _needsResize: function() {
            var scale = this.getTotalObjectScaling();
            return scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY;
          },
          /**
           * @private
           */
          _resetWidthHeight: function() {
            this.set(this.getOriginalSize());
          },
          /**
           * The Image class's initialization method. This method is automatically
           * called by the constructor.
           * @private
           * @param {HTMLImageElement|String} element The element representing the image
           * @param {Object} [options] Options object
           */
          _initElement: function(element, options) {
            this.setElement(fabric.util.getById(element), options);
            fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);
          },
          /**
           * @private
           * @param {Object} [options] Options object
           */
          _initConfig: function(options) {
            options || (options = {});
            this.setOptions(options);
            this._setWidthHeight(options);
          },
          /**
           * @private
           * @param {Array} filters to be initialized
           * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created
           */
          _initFilters: function(filters, callback) {
            if (filters && filters.length) {
              fabric.util.enlivenObjects(filters, function(enlivenedObjects) {
                callback && callback(enlivenedObjects);
              }, "fabric.Image.filters");
            } else {
              callback && callback();
            }
          },
          /**
           * @private
           * Set the width and the height of the image object, using the element or the
           * options.
           * @param {Object} [options] Object with width/height properties
           */
          _setWidthHeight: function(options) {
            options || (options = {});
            var el = this.getElement();
            this.width = options.width || el.naturalWidth || el.width || 0;
            this.height = options.height || el.naturalHeight || el.height || 0;
          },
          /**
           * Calculate offset for center and scale factor for the image in order to respect
           * the preserveAspectRatio attribute
           * @private
           * @return {Object}
           */
          parsePreserveAspectRatioAttribute: function() {
            var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ""), rWidth = this._element.width, rHeight = this._element.height, scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0, offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };
            if (pAR && (pAR.alignX !== "none" || pAR.alignY !== "none")) {
              if (pAR.meetOrSlice === "meet") {
                scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);
                offset = (pWidth - rWidth * scaleX) / 2;
                if (pAR.alignX === "Min") {
                  offsetLeft = -offset;
                }
                if (pAR.alignX === "Max") {
                  offsetLeft = offset;
                }
                offset = (pHeight - rHeight * scaleY) / 2;
                if (pAR.alignY === "Min") {
                  offsetTop = -offset;
                }
                if (pAR.alignY === "Max") {
                  offsetTop = offset;
                }
              }
              if (pAR.meetOrSlice === "slice") {
                scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);
                offset = rWidth - pWidth / scaleX;
                if (pAR.alignX === "Mid") {
                  cropX = offset / 2;
                }
                if (pAR.alignX === "Max") {
                  cropX = offset;
                }
                offset = rHeight - pHeight / scaleY;
                if (pAR.alignY === "Mid") {
                  cropY = offset / 2;
                }
                if (pAR.alignY === "Max") {
                  cropY = offset;
                }
                rWidth = pWidth / scaleX;
                rHeight = pHeight / scaleY;
              }
            } else {
              scaleX = pWidth / rWidth;
              scaleY = pHeight / rHeight;
            }
            return {
              width: rWidth,
              height: rHeight,
              scaleX,
              scaleY,
              offsetLeft,
              offsetTop,
              cropX,
              cropY
            };
          }
        }
      );
      fabric.Image.CSS_CANVAS = "canvas-img";
      fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;
      fabric.Image.fromObject = function(_object, callback) {
        var object = fabric.util.object.clone(_object);
        fabric.util.loadImage(object.src, function(img, isError) {
          if (isError) {
            callback && callback(null, true);
            return;
          }
          fabric.Image.prototype._initFilters.call(object, object.filters, function(filters) {
            object.filters = filters || [];
            fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {
              object.resizeFilter = resizeFilters[0];
              fabric.util.enlivenObjects([object.clipPath], function(enlivedProps) {
                object.clipPath = enlivedProps[0];
                var image = new fabric.Image(img, object);
                callback(image, false);
              });
            });
          });
        }, null, object.crossOrigin);
      };
      fabric.Image.fromURL = function(url, callback, imgOptions) {
        fabric.util.loadImage(url, function(img, isError) {
          callback && callback(new fabric.Image(img, imgOptions), isError);
        }, null, imgOptions && imgOptions.crossOrigin);
      };
      fabric.Image.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(
        "x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" ")
      );
      fabric.Image.fromElement = function(element, callback, options) {
        var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);
        fabric.Image.fromURL(
          parsedAttributes["xlink:href"],
          callback,
          extend(options ? fabric.util.object.clone(options) : {}, parsedAttributes)
        );
      };
    })(typeof exports !== "undefined" ? exports : exports);
    fabric.util.object.extend(
      fabric.Object.prototype,
      /** @lends fabric.Object.prototype */
      {
        /**
         * @private
         * @return {Number} angle value
         */
        _getAngleValueForStraighten: function() {
          var angle = this.angle % 360;
          if (angle > 0) {
            return Math.round((angle - 1) / 90) * 90;
          }
          return Math.round(angle / 90) * 90;
        },
        /**
         * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)
         * @return {fabric.Object} thisArg
         * @chainable
         */
        straighten: function() {
          this.rotate(this._getAngleValueForStraighten());
          return this;
        },
        /**
         * Same as {@link fabric.Object.prototype.straighten} but with animation
         * @param {Object} callbacks Object with callback functions
         * @param {Function} [callbacks.onComplete] Invoked on completion
         * @param {Function} [callbacks.onChange] Invoked on every step of animation
         * @return {fabric.Object} thisArg
         * @chainable
         */
        fxStraighten: function(callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric.util.animate({
            startValue: this.get("angle"),
            endValue: this._getAngleValueForStraighten(),
            duration: this.FX_DURATION,
            onChange: function(value) {
              _this.rotate(value);
              onChange();
            },
            onComplete: function() {
              _this.setCoords();
              onComplete();
            }
          });
          return this;
        }
      }
    );
    fabric.util.object.extend(
      fabric.StaticCanvas.prototype,
      /** @lends fabric.StaticCanvas.prototype */
      {
        /**
         * Straightens object, then rerenders canvas
         * @param {fabric.Object} object Object to straighten
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        straightenObject: function(object) {
          object.straighten();
          this.requestRenderAll();
          return this;
        },
        /**
         * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated
         * @param {fabric.Object} object Object to straighten
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        fxStraightenObject: function(object) {
          object.fxStraighten({
            onChange: this.requestRenderAllBound
          });
          return this;
        }
      }
    );
    (function() {
      "use strict";
      function testPrecision(gl, precision) {
        var fragmentSource = "precision " + precision + " float;\nvoid main(){}";
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fragmentSource);
        gl.compileShader(fragmentShader);
        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
          return false;
        }
        return true;
      }
      fabric.isWebglSupported = function(tileSize) {
        if (fabric.isLikelyNode) {
          return false;
        }
        tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;
        var canvas = document.createElement("canvas");
        var gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        var isSupported = false;
        if (gl) {
          fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
          isSupported = fabric.maxTextureSize >= tileSize;
          var precisions = ["highp", "mediump", "lowp"];
          for (var i2 = 0; i2 < 3; i2++) {
            if (testPrecision(gl, precisions[i2])) {
              fabric.webGlPrecision = precisions[i2];
              break;
            }
            ;
          }
        }
        this.isSupported = isSupported;
        return isSupported;
      };
      fabric.WebglFilterBackend = WebglFilterBackend;
      function WebglFilterBackend(options) {
        if (options && options.tileSize) {
          this.tileSize = options.tileSize;
        }
        this.setupGLContext(this.tileSize, this.tileSize);
        this.captureGPUInfo();
      }
      ;
      WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */
      {
        tileSize: 2048,
        /**
         * Experimental. This object is a sort of repository of help layers used to avoid
         * of recreating them during frequent filtering. If you are previewing a filter with
         * a slider you probably do not want to create help layers every filter step.
         * in this object there will be appended some canvases, created once, resized sometimes
         * cleared never. Clearing is left to the developer.
         **/
        resources: {},
        /**
         * Setup a WebGL context suitable for filtering, and bind any needed event handlers.
         */
        setupGLContext: function(width, height) {
          this.dispose();
          this.createWebGLCanvas(width, height);
          this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);
          this.chooseFastestCopyGLTo2DMethod(width, height);
        },
        /**
         * Pick a method to copy data from GL context to 2d canvas.  In some browsers using
         * putImageData is faster than drawImage for that specific operation.
         */
        chooseFastestCopyGLTo2DMethod: function(width, height) {
          var canMeasurePerf = typeof window.performance !== "undefined", canUseImageData;
          try {
            new ImageData(1, 1);
            canUseImageData = true;
          } catch (e2) {
            canUseImageData = false;
          }
          var canUseArrayBuffer = typeof ArrayBuffer !== "undefined";
          var canUseUint8Clamped = typeof Uint8ClampedArray !== "undefined";
          if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {
            return;
          }
          var targetCanvas = fabric.util.createCanvasElement();
          var imageBuffer = new ArrayBuffer(width * height * 4);
          if (fabric.forceGLPutImageData) {
            this.imageBuffer = imageBuffer;
            this.copyGLTo2D = copyGLTo2DPutImageData;
            return;
          }
          var testContext = {
            imageBuffer,
            destinationWidth: width,
            destinationHeight: height,
            targetCanvas
          };
          var startTime, drawImageTime, putImageDataTime;
          targetCanvas.width = width;
          targetCanvas.height = height;
          startTime = window.performance.now();
          copyGLTo2DDrawImage.call(testContext, this.gl, testContext);
          drawImageTime = window.performance.now() - startTime;
          startTime = window.performance.now();
          copyGLTo2DPutImageData.call(testContext, this.gl, testContext);
          putImageDataTime = window.performance.now() - startTime;
          if (drawImageTime > putImageDataTime) {
            this.imageBuffer = imageBuffer;
            this.copyGLTo2D = copyGLTo2DPutImageData;
          } else {
            this.copyGLTo2D = copyGLTo2DDrawImage;
          }
        },
        /**
         * Create a canvas element and associated WebGL context and attaches them as
         * class properties to the GLFilterBackend class.
         */
        createWebGLCanvas: function(width, height) {
          var canvas = fabric.util.createCanvasElement();
          canvas.width = width;
          canvas.height = height;
          var glOptions = {
            alpha: true,
            premultipliedAlpha: false,
            depth: false,
            stencil: false,
            antialias: false
          }, gl = canvas.getContext("webgl", glOptions);
          if (!gl) {
            gl = canvas.getContext("experimental-webgl", glOptions);
          }
          if (!gl) {
            return;
          }
          gl.clearColor(0, 0, 0, 0);
          this.canvas = canvas;
          this.gl = gl;
        },
        /**
         * Attempts to apply the requested filters to the source provided, drawing the filtered output
         * to the provided target canvas.
         *
         * @param {Array} filters The filters to apply.
         * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.
         * @param {Number} width The width of the source input.
         * @param {Number} height The height of the source input.
         * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
         * @param {String|undefined} cacheKey A key used to cache resources related to the source. If
         * omitted, caching will be skipped.
         */
        applyFilters: function(filters, source, width, height, targetCanvas, cacheKey) {
          var gl = this.gl;
          var cachedTexture;
          if (cacheKey) {
            cachedTexture = this.getCachedTexture(cacheKey, source);
          }
          var pipelineState = {
            originalWidth: source.width || source.originalWidth,
            originalHeight: source.height || source.originalHeight,
            sourceWidth: width,
            sourceHeight: height,
            destinationWidth: width,
            destinationHeight: height,
            context: gl,
            sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),
            targetTexture: this.createTexture(gl, width, height),
            originalTexture: cachedTexture || this.createTexture(gl, width, height, !cachedTexture && source),
            passes: filters.length,
            webgl: true,
            aPosition: this.aPosition,
            programCache: this.programCache,
            pass: 0,
            filterBackend: this,
            targetCanvas
          };
          var tempFbo = gl.createFramebuffer();
          gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);
          filters.forEach(function(filter) {
            filter && filter.applyTo(pipelineState);
          });
          resizeCanvasIfNeeded(pipelineState);
          this.copyGLTo2D(gl, pipelineState);
          gl.bindTexture(gl.TEXTURE_2D, null);
          gl.deleteTexture(pipelineState.sourceTexture);
          gl.deleteTexture(pipelineState.targetTexture);
          gl.deleteFramebuffer(tempFbo);
          targetCanvas.getContext("2d").setTransform(1, 0, 0, 1, 0, 0);
          return pipelineState;
        },
        /**
         * Detach event listeners, remove references, and clean up caches.
         */
        dispose: function() {
          if (this.canvas) {
            this.canvas = null;
            this.gl = null;
          }
          this.clearWebGLCaches();
        },
        /**
         * Wipe out WebGL-related caches.
         */
        clearWebGLCaches: function() {
          this.programCache = {};
          this.textureCache = {};
        },
        /**
         * Create a WebGL texture object.
         *
         * Accepts specific dimensions to initialize the texture to or a source image.
         *
         * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.
         * @param {Number} width The width to initialize the texture at.
         * @param {Number} height The height to initialize the texture.
         * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.
         * @returns {WebGLTexture}
         */
        createTexture: function(gl, width, height, textureImageSource) {
          var texture = gl.createTexture();
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
          if (textureImageSource) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);
          } else {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
          }
          return texture;
        },
        /**
         * Can be optionally used to get a texture from the cache array
         *
         * If an existing texture is not found, a new texture is created and cached.
         *
         * @param {String} uniqueId A cache key to use to find an existing texture.
         * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the
         * texture cache entry if one does not already exist.
         */
        getCachedTexture: function(uniqueId, textureImageSource) {
          if (this.textureCache[uniqueId]) {
            return this.textureCache[uniqueId];
          } else {
            var texture = this.createTexture(
              this.gl,
              textureImageSource.width,
              textureImageSource.height,
              textureImageSource
            );
            this.textureCache[uniqueId] = texture;
            return texture;
          }
        },
        /**
         * Clear out cached resources related to a source image that has been
         * filtered previously.
         *
         * @param {String} cacheKey The cache key provided when the source image was filtered.
         */
        evictCachesForKey: function(cacheKey) {
          if (this.textureCache[cacheKey]) {
            this.gl.deleteTexture(this.textureCache[cacheKey]);
            delete this.textureCache[cacheKey];
          }
        },
        copyGLTo2D: copyGLTo2DDrawImage,
        /**
         * Attempt to extract GPU information strings from a WebGL context.
         *
         * Useful information when debugging or blacklisting specific GPUs.
         *
         * @returns {Object} A GPU info object with renderer and vendor strings.
         */
        captureGPUInfo: function() {
          if (this.gpuInfo) {
            return this.gpuInfo;
          }
          var gl = this.gl, gpuInfo = { renderer: "", vendor: "" };
          if (!gl) {
            return gpuInfo;
          }
          var ext = gl.getExtension("WEBGL_debug_renderer_info");
          if (ext) {
            var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);
            var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);
            if (renderer) {
              gpuInfo.renderer = renderer.toLowerCase();
            }
            if (vendor) {
              gpuInfo.vendor = vendor.toLowerCase();
            }
          }
          this.gpuInfo = gpuInfo;
          return gpuInfo;
        }
      };
    })();
    function resizeCanvasIfNeeded(pipelineState) {
      var targetCanvas = pipelineState.targetCanvas, width = targetCanvas.width, height = targetCanvas.height, dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight;
      if (width !== dWidth || height !== dHeight) {
        targetCanvas.width = dWidth;
        targetCanvas.height = dHeight;
      }
    }
    function copyGLTo2DDrawImage(gl, pipelineState) {
      var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext("2d");
      ctx.translate(0, targetCanvas.height);
      ctx.scale(1, -1);
      var sourceY = glCanvas.height - targetCanvas.height;
      ctx.drawImage(
        glCanvas,
        0,
        sourceY,
        targetCanvas.width,
        targetCanvas.height,
        0,
        0,
        targetCanvas.width,
        targetCanvas.height
      );
    }
    function copyGLTo2DPutImageData(gl, pipelineState) {
      var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext("2d"), dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight, numBytes = dWidth * dHeight * 4;
      var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);
      var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);
      gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);
      var imgData = new ImageData(u8Clamped, dWidth, dHeight);
      ctx.putImageData(imgData, 0, 0);
    }
    (function() {
      "use strict";
      var noop = function() {
      };
      fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;
      function Canvas2dFilterBackend() {
      }
      ;
      Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */
      {
        evictCachesForKey: noop,
        dispose: noop,
        clearWebGLCaches: noop,
        /**
         * Experimental. This object is a sort of repository of help layers used to avoid
         * of recreating them during frequent filtering. If you are previewing a filter with
         * a slider you probably do not want to create help layers every filter step.
         * in this object there will be appended some canvases, created once, resized sometimes
         * cleared never. Clearing is left to the developer.
         **/
        resources: {},
        /**
         * Apply a set of filters against a source image and draw the filtered output
         * to the provided destination canvas.
         *
         * @param {EnhancedFilter} filters The filter to apply.
         * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.
         * @param {Number} sourceWidth The width of the source input.
         * @param {Number} sourceHeight The height of the source input.
         * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
         */
        applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {
          var ctx = targetCanvas.getContext("2d");
          ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);
          var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
          var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
          var pipelineState = {
            sourceWidth,
            sourceHeight,
            imageData,
            originalEl: sourceElement,
            originalImageData,
            canvasEl: targetCanvas,
            ctx,
            filterBackend: this
          };
          filters.forEach(function(filter) {
            filter.applyTo(pipelineState);
          });
          if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {
            targetCanvas.width = pipelineState.imageData.width;
            targetCanvas.height = pipelineState.imageData.height;
          }
          ctx.putImageData(pipelineState.imageData, 0, 0);
          return pipelineState;
        }
      };
    })();
    fabric.Image = fabric.Image || {};
    fabric.Image.filters = fabric.Image.filters || {};
    fabric.Image.filters.BaseFilter = fabric.util.createClass(
      /** @lends fabric.Image.filters.BaseFilter.prototype */
      {
        /**
         * Filter type
         * @param {String} type
         * @default
         */
        type: "BaseFilter",
        /**
         * Array of attributes to send with buffers. do not modify
         * @private
         */
        vertexSource: "attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",
        fragmentSource: "precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",
        /**
         * Constructor
         * @param {Object} [options] Options object
         */
        initialize: function(options) {
          if (options) {
            this.setOptions(options);
          }
        },
        /**
         * Sets filter's properties from options
         * @param {Object} [options] Options object
         */
        setOptions: function(options) {
          for (var prop in options) {
            this[prop] = options[prop];
          }
        },
        /**
         * Compile this filter's shader program.
         *
         * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.
         * @param {String} fragmentSource fragmentShader source for compilation
         * @param {String} vertexSource vertexShader source for compilation
         */
        createProgram: function(gl, fragmentSource, vertexSource) {
          fragmentSource = fragmentSource || this.fragmentSource;
          vertexSource = vertexSource || this.vertexSource;
          if (fabric.webGlPrecision !== "highp") {
            fragmentSource = fragmentSource.replace(
              /precision highp float/g,
              "precision " + fabric.webGlPrecision + " float"
            );
          }
          var vertexShader = gl.createShader(gl.VERTEX_SHADER);
          gl.shaderSource(vertexShader, vertexSource);
          gl.compileShader(vertexShader);
          if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            throw new Error(
              // eslint-disable-next-line prefer-template
              "Vertex shader compile error for " + this.type + ": " + gl.getShaderInfoLog(vertexShader)
            );
          }
          var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
          gl.shaderSource(fragmentShader, fragmentSource);
          gl.compileShader(fragmentShader);
          if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            throw new Error(
              // eslint-disable-next-line prefer-template
              "Fragment shader compile error for " + this.type + ": " + gl.getShaderInfoLog(fragmentShader)
            );
          }
          var program = gl.createProgram();
          gl.attachShader(program, vertexShader);
          gl.attachShader(program, fragmentShader);
          gl.linkProgram(program);
          if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            throw new Error(
              // eslint-disable-next-line prefer-template
              'Shader link error for "${this.type}" ' + gl.getProgramInfoLog(program)
            );
          }
          var attributeLocations = this.getAttributeLocations(gl, program);
          var uniformLocations = this.getUniformLocations(gl, program) || {};
          uniformLocations.uStepW = gl.getUniformLocation(program, "uStepW");
          uniformLocations.uStepH = gl.getUniformLocation(program, "uStepH");
          return {
            program,
            attributeLocations,
            uniformLocations
          };
        },
        /**
         * Return a map of attribute names to WebGLAttributeLocation objects.
         *
         * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
         * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.
         * @returns {Object} A map of attribute names to attribute locations.
         */
        getAttributeLocations: function(gl, program) {
          return {
            aPosition: gl.getAttribLocation(program, "aPosition")
          };
        },
        /**
         * Return a map of uniform names to WebGLUniformLocation objects.
         *
         * Intended to be overridden by subclasses.
         *
         * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
         * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.
         * @returns {Object} A map of uniform names to uniform locations.
         */
        getUniformLocations: function() {
          return {};
        },
        /**
         * Send attribute data from this filter to its shader program on the GPU.
         *
         * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
         * @param {Object} attributeLocations A map of shader attribute names to their locations.
         */
        sendAttributeData: function(gl, attributeLocations, aPositionData) {
          var attributeLocation = attributeLocations.aPosition;
          var buffer = gl.createBuffer();
          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
          gl.enableVertexAttribArray(attributeLocation);
          gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);
          gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);
        },
        _setupFrameBuffer: function(options) {
          var gl = options.context, width, height;
          if (options.passes > 1) {
            width = options.destinationWidth;
            height = options.destinationHeight;
            if (options.sourceWidth !== width || options.sourceHeight !== height) {
              gl.deleteTexture(options.targetTexture);
              options.targetTexture = options.filterBackend.createTexture(gl, width, height);
            }
            gl.framebufferTexture2D(
              gl.FRAMEBUFFER,
              gl.COLOR_ATTACHMENT0,
              gl.TEXTURE_2D,
              options.targetTexture,
              0
            );
          } else {
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.finish();
          }
        },
        _swapTextures: function(options) {
          options.passes--;
          options.pass++;
          var temp = options.targetTexture;
          options.targetTexture = options.sourceTexture;
          options.sourceTexture = temp;
        },
        /**
         * Generic isNeutral implementation for one parameter based filters.
         * Used only in image applyFilters to discard filters that will not have an effect
         * on the image
         * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )
         * @param {Object} options
         **/
        isNeutralState: function() {
          var main = this.mainParameter, _class = fabric.Image.filters[this.type].prototype;
          if (main) {
            if (Array.isArray(_class[main])) {
              for (var i2 = _class[main].length; i2--; ) {
                if (this[main][i2] !== _class[main][i2]) {
                  return false;
                }
              }
              return true;
            } else {
              return _class[main] === this[main];
            }
          } else {
            return false;
          }
        },
        /**
         * Apply this filter to the input image data provided.
         *
         * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
         *
         * @param {Object} options
         * @param {Number} options.passes The number of filters remaining to be executed
         * @param {Boolean} options.webgl Whether to use webgl to render the filter.
         * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
         * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        applyTo: function(options) {
          if (options.webgl) {
            this._setupFrameBuffer(options);
            this.applyToWebGL(options);
            this._swapTextures(options);
          } else {
            this.applyTo2d(options);
          }
        },
        /**
         * Retrieves the cached shader.
         * @param {Object} options
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        retrieveShader: function(options) {
          if (!options.programCache.hasOwnProperty(this.type)) {
            options.programCache[this.type] = this.createProgram(options.context);
          }
          return options.programCache[this.type];
        },
        /**
         * Apply this filter using webgl.
         *
         * @param {Object} options
         * @param {Number} options.passes The number of filters remaining to be executed
         * @param {Boolean} options.webgl Whether to use webgl to render the filter.
         * @param {WebGLTexture} options.originalTexture The texture of the original input image.
         * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
         * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
         * @param {WebGLRenderingContext} options.context The GL context used for rendering.
         * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
         */
        applyToWebGL: function(options) {
          var gl = options.context;
          var shader = this.retrieveShader(options);
          if (options.pass === 0 && options.originalTexture) {
            gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);
          } else {
            gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);
          }
          gl.useProgram(shader.program);
          this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);
          gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);
          gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);
          this.sendUniformData(gl, shader.uniformLocations);
          gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        },
        bindAdditionalTexture: function(gl, texture, textureUnit) {
          gl.activeTexture(textureUnit);
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.activeTexture(gl.TEXTURE0);
        },
        unbindAdditionalTexture: function(gl, textureUnit) {
          gl.activeTexture(textureUnit);
          gl.bindTexture(gl.TEXTURE_2D, null);
          gl.activeTexture(gl.TEXTURE0);
        },
        getMainParameter: function() {
          return this[this.mainParameter];
        },
        setMainParameter: function(value) {
          this[this.mainParameter] = value;
        },
        /**
         * Send uniform data from this filter to its shader program on the GPU.
         *
         * Intended to be overridden by subclasses.
         *
         * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
         * @param {Object} uniformLocations A map of shader uniform names to their locations.
         */
        sendUniformData: function() {
        },
        /**
         * If needed by a 2d filter, this functions can create an helper canvas to be used
         * remember that options.targetCanvas is available for use till end of chain.
         */
        createHelpLayer: function(options) {
          if (!options.helpLayer) {
            var helpLayer = document.createElement("canvas");
            helpLayer.width = options.sourceWidth;
            helpLayer.height = options.sourceHeight;
            options.helpLayer = helpLayer;
          }
        },
        /**
         * Returns object representation of an instance
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
          var object = { type: this.type }, mainP = this.mainParameter;
          if (mainP) {
            object[mainP] = this[mainP];
          }
          return object;
        },
        /**
         * Returns a JSON representation of an instance
         * @return {Object} JSON
         */
        toJSON: function() {
          return this.toObject();
        }
      }
    );
    fabric.Image.filters.BaseFilter.fromObject = function(object, callback) {
      var filter = new fabric.Image.filters[object.type](object);
      callback && callback(filter);
      return filter;
    };
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.ColorMatrix = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.ColorMatrix.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "ColorMatrix",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",
          /**
           * Colormatrix for pixels.
           * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
           * outside the -1, 1 range.
           * 0.0039215686 is the part of 1 that get translated to 1 in 2d
           * @param {Array} matrix array of 20 numbers.
           * @default
           */
          matrix: [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ],
          mainParameter: "matrix",
          /**
           * Lock the colormatrix on the color part, skipping alpha, manly for non webgl scenario
           * to save some calculation
           */
          colorsOnly: true,
          /**
           * Constructor
           * @param {Object} [options] Options object
           */
          initialize: function(options) {
            this.callSuper("initialize", options);
            this.matrix = this.matrix.slice(0);
          },
          /**
           * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8Array to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, iLen = data.length, m2 = this.matrix, r2, g2, b2, a2, i2, colorsOnly = this.colorsOnly;
            for (i2 = 0; i2 < iLen; i2 += 4) {
              r2 = data[i2];
              g2 = data[i2 + 1];
              b2 = data[i2 + 2];
              if (colorsOnly) {
                data[i2] = r2 * m2[0] + g2 * m2[1] + b2 * m2[2] + m2[4] * 255;
                data[i2 + 1] = r2 * m2[5] + g2 * m2[6] + b2 * m2[7] + m2[9] * 255;
                data[i2 + 2] = r2 * m2[10] + g2 * m2[11] + b2 * m2[12] + m2[14] * 255;
              } else {
                a2 = data[i2 + 3];
                data[i2] = r2 * m2[0] + g2 * m2[1] + b2 * m2[2] + a2 * m2[3] + m2[4] * 255;
                data[i2 + 1] = r2 * m2[5] + g2 * m2[6] + b2 * m2[7] + a2 * m2[8] + m2[9] * 255;
                data[i2 + 2] = r2 * m2[10] + g2 * m2[11] + b2 * m2[12] + a2 * m2[13] + m2[14] * 255;
                data[i2 + 3] = r2 * m2[15] + g2 * m2[16] + b2 * m2[17] + a2 * m2[18] + m2[19] * 255;
              }
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uColorMatrix: gl.getUniformLocation(program, "uColorMatrix"),
              uConstants: gl.getUniformLocation(program, "uConstants")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            var m2 = this.matrix, matrix = [
              m2[0],
              m2[1],
              m2[2],
              m2[3],
              m2[5],
              m2[6],
              m2[7],
              m2[8],
              m2[10],
              m2[11],
              m2[12],
              m2[13],
              m2[15],
              m2[16],
              m2[17],
              m2[18]
            ], constants = [m2[4], m2[9], m2[14], m2[19]];
            gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);
            gl.uniform4fv(uniformLocations.uConstants, constants);
          }
        }
      );
      fabric2.Image.filters.ColorMatrix.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Brightness = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Brightness.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Brightness",
          /**
           * Fragment source for the brightness program
           */
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",
          /**
           * Brightness value, from -1 to 1.
           * translated to -255 to 255 for 2d
           * 0.0039215686 is the part of 1 that get translated to 1 in 2d
           * @param {Number} brightness
           * @default
           */
          brightness: 0,
          /**
           * Describe the property that is the filter parameter
           * @param {String} m
           * @default
           */
          mainParameter: "brightness",
          /**
          * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
          *
          * @param {Object} options
          * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
          */
          applyTo2d: function(options) {
            if (this.brightness === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, i2, len = data.length, brightness = Math.round(this.brightness * 255);
            for (i2 = 0; i2 < len; i2 += 4) {
              data[i2] = data[i2] + brightness;
              data[i2 + 1] = data[i2 + 1] + brightness;
              data[i2 + 2] = data[i2 + 2] + brightness;
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uBrightness: gl.getUniformLocation(program, "uBrightness")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uBrightness, this.brightness);
          }
        }
      );
      fabric2.Image.filters.Brightness.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend, filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Convolute = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Convolute.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Convolute",
          /*
           * Opaque value (true/false)
           */
          opaque: false,
          /*
           * matrix for the filter, max 9x9
           */
          matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],
          /**
           * Fragment source for the brightness program
           */
          fragmentSource: {
            Convolute_3_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_3_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
            Convolute_5_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_5_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
            Convolute_7_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_7_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
            Convolute_9_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_9_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"
          },
          /**
           * Constructor
           * @memberOf fabric.Image.filters.Convolute.prototype
           * @param {Object} [options] Options object
           * @param {Boolean} [options.opaque=false] Opaque value (true/false)
           * @param {Array} [options.matrix] Filter matrix
           */
          /**
          * Retrieves the cached shader.
          * @param {Object} options
          * @param {WebGLRenderingContext} options.context The GL context used for rendering.
          * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
          */
          retrieveShader: function(options) {
            var size = Math.sqrt(this.matrix.length);
            var cacheKey = this.type + "_" + size + "_" + (this.opaque ? 1 : 0);
            var shaderSource = this.fragmentSource[cacheKey];
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          /**
           * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, weights = this.matrix, side = Math.round(Math.sqrt(weights.length)), halfSide = Math.floor(side / 2), sw = imageData.width, sh = imageData.height, output = options.ctx.createImageData(sw, sh), dst = output.data, alphaFac = this.opaque ? 1 : 0, r2, g2, b2, a2, dstOff, scx, scy, srcOff, wt, x, y2, cx, cy;
            for (y2 = 0; y2 < sh; y2++) {
              for (x = 0; x < sw; x++) {
                dstOff = (y2 * sw + x) * 4;
                r2 = 0;
                g2 = 0;
                b2 = 0;
                a2 = 0;
                for (cy = 0; cy < side; cy++) {
                  for (cx = 0; cx < side; cx++) {
                    scy = y2 + cy - halfSide;
                    scx = x + cx - halfSide;
                    if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {
                      continue;
                    }
                    srcOff = (scy * sw + scx) * 4;
                    wt = weights[cy * side + cx];
                    r2 += data[srcOff] * wt;
                    g2 += data[srcOff + 1] * wt;
                    b2 += data[srcOff + 2] * wt;
                    if (!alphaFac) {
                      a2 += data[srcOff + 3] * wt;
                    }
                  }
                }
                dst[dstOff] = r2;
                dst[dstOff + 1] = g2;
                dst[dstOff + 2] = b2;
                if (!alphaFac) {
                  dst[dstOff + 3] = a2;
                } else {
                  dst[dstOff + 3] = data[dstOff + 3];
                }
              }
            }
            options.imageData = output;
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uMatrix: gl.getUniformLocation(program, "uMatrix"),
              uOpaque: gl.getUniformLocation(program, "uOpaque"),
              uHalfSize: gl.getUniformLocation(program, "uHalfSize"),
              uSize: gl.getUniformLocation(program, "uSize")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1fv(uniformLocations.uMatrix, this.matrix);
          },
          /**
           * Returns object representation of an instance
           * @return {Object} Object representation of an instance
           */
          toObject: function() {
            return extend(this.callSuper("toObject"), {
              opaque: this.opaque,
              matrix: this.matrix
            });
          }
        }
      );
      fabric2.Image.filters.Convolute.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Grayscale = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Grayscale.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Grayscale",
          fragmentSource: {
            average: "precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",
            lightness: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",
            luminosity: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"
          },
          /**
           * Grayscale mode, between 'average', 'lightness', 'luminosity'
           * @param {String} type
           * @default
           */
          mode: "average",
          mainParameter: "mode",
          /**
           * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8Array to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, i2, len = data.length, value, mode = this.mode;
            for (i2 = 0; i2 < len; i2 += 4) {
              if (mode === "average") {
                value = (data[i2] + data[i2 + 1] + data[i2 + 2]) / 3;
              } else if (mode === "lightness") {
                value = (Math.min(data[i2], data[i2 + 1], data[i2 + 2]) + Math.max(data[i2], data[i2 + 1], data[i2 + 2])) / 2;
              } else if (mode === "luminosity") {
                value = 0.21 * data[i2] + 0.72 * data[i2 + 1] + 0.07 * data[i2 + 2];
              }
              data[i2] = value;
              data[i2 + 1] = value;
              data[i2 + 2] = value;
            }
          },
          /**
           * Retrieves the cached shader.
           * @param {Object} options
           * @param {WebGLRenderingContext} options.context The GL context used for rendering.
           * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
           */
          retrieveShader: function(options) {
            var cacheKey = this.type + "_" + this.mode;
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              var shaderSource = this.fragmentSource[this.mode];
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uMode: gl.getUniformLocation(program, "uMode")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            var mode = 1;
            gl.uniform1i(uniformLocations.uMode, mode);
          },
          /**
           * Grayscale filter isNeutralState implementation
           * The filter is never neutral
           * on the image
           **/
          isNeutralState: function() {
            return false;
          }
        }
      );
      fabric2.Image.filters.Grayscale.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Invert = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Invert.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Invert",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",
          /**
           * Filter invert. if false, does nothing
           * @param {Boolean} invert
           * @default
           */
          invert: true,
          mainParameter: "invert",
          /**
           * Apply the Invert operation to a Uint8Array representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8Array to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, i2, len = data.length;
            for (i2 = 0; i2 < len; i2 += 4) {
              data[i2] = 255 - data[i2];
              data[i2 + 1] = 255 - data[i2 + 1];
              data[i2 + 2] = 255 - data[i2 + 2];
            }
          },
          /**
           * Invert filter isNeutralState implementation
           * Used only in image applyFilters to discard filters that will not have an effect
           * on the image
           * @param {Object} options
           **/
          isNeutralState: function() {
            return !this.invert;
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uInvert: gl.getUniformLocation(program, "uInvert")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1i(uniformLocations.uInvert, this.invert);
          }
        }
      );
      fabric2.Image.filters.Invert.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend, filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Noise = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Noise.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Noise",
          /**
           * Fragment source for the noise program
           */
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",
          /**
           * Describe the property that is the filter parameter
           * @param {String} m
           * @default
           */
          mainParameter: "noise",
          /**
           * Noise value, from
           * @param {Number} noise
           * @default
           */
          noise: 0,
          /**
           * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
           */
          applyTo2d: function(options) {
            if (this.noise === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, i2, len = data.length, noise = this.noise, rand;
            for (i2 = 0, len = data.length; i2 < len; i2 += 4) {
              rand = (0.5 - Math.random()) * noise;
              data[i2] += rand;
              data[i2 + 1] += rand;
              data[i2 + 2] += rand;
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uNoise: gl.getUniformLocation(program, "uNoise"),
              uSeed: gl.getUniformLocation(program, "uSeed")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uNoise, this.noise / 255);
            gl.uniform1f(uniformLocations.uSeed, Math.random());
          },
          /**
           * Returns object representation of an instance
           * @return {Object} Object representation of an instance
           */
          toObject: function() {
            return extend(this.callSuper("toObject"), {
              noise: this.noise
            });
          }
        }
      );
      fabric2.Image.filters.Noise.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Pixelate = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Pixelate.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Pixelate",
          blocksize: 4,
          mainParameter: "blocksize",
          /**
           * Fragment source for the Pixelate program
           */
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",
          /**
           * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, iLen = imageData.height, jLen = imageData.width, index, i2, j2, r2, g2, b2, a2, _i, _j, _iLen, _jLen;
            for (i2 = 0; i2 < iLen; i2 += this.blocksize) {
              for (j2 = 0; j2 < jLen; j2 += this.blocksize) {
                index = i2 * 4 * jLen + j2 * 4;
                r2 = data[index];
                g2 = data[index + 1];
                b2 = data[index + 2];
                a2 = data[index + 3];
                _iLen = Math.min(i2 + this.blocksize, iLen);
                _jLen = Math.min(j2 + this.blocksize, jLen);
                for (_i = i2; _i < _iLen; _i++) {
                  for (_j = j2; _j < _jLen; _j++) {
                    index = _i * 4 * jLen + _j * 4;
                    data[index] = r2;
                    data[index + 1] = g2;
                    data[index + 2] = b2;
                    data[index + 3] = a2;
                  }
                }
              }
            }
          },
          /**
           * Indicate when the filter is not gonna apply changes to the image
           **/
          isNeutralState: function() {
            return this.blocksize === 1;
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uBlocksize: gl.getUniformLocation(program, "uBlocksize"),
              uStepW: gl.getUniformLocation(program, "uStepW"),
              uStepH: gl.getUniformLocation(program, "uStepH")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);
          }
        }
      );
      fabric2.Image.filters.Pixelate.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), extend = fabric2.util.object.extend, filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.RemoveColor = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.RemoveColor.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "RemoveColor",
          /**
           * Color to remove, in any format understood by fabric.Color.
           * @param {String} type
           * @default
           */
          color: "#FFFFFF",
          /**
           * Fragment source for the brightness program
           */
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",
          /**
           * distance to actual color, as value up or down from each r,g,b
           * between 0 and 1
           **/
          distance: 0.02,
          /**
           * For color to remove inside distance, use alpha channel for a smoother deletion
           * NOT IMPLEMENTED YET
           **/
          useAlpha: false,
          /**
           * Constructor
           * @memberOf fabric.Image.filters.RemoveWhite.prototype
           * @param {Object} [options] Options object
           * @param {Number} [options.color=#RRGGBB] Threshold value
           * @param {Number} [options.distance=10] Distance value
           */
          /**
           * Applies filter to canvas element
           * @param {Object} canvasEl Canvas element to apply filter to
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, i2, distance = this.distance * 255, r2, g2, b2, source = new fabric2.Color(this.color).getSource(), lowC = [
              source[0] - distance,
              source[1] - distance,
              source[2] - distance
            ], highC = [
              source[0] + distance,
              source[1] + distance,
              source[2] + distance
            ];
            for (i2 = 0; i2 < data.length; i2 += 4) {
              r2 = data[i2];
              g2 = data[i2 + 1];
              b2 = data[i2 + 2];
              if (r2 > lowC[0] && g2 > lowC[1] && b2 > lowC[2] && r2 < highC[0] && g2 < highC[1] && b2 < highC[2]) {
                data[i2 + 3] = 0;
              }
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uLow: gl.getUniformLocation(program, "uLow"),
              uHigh: gl.getUniformLocation(program, "uHigh")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            var source = new fabric2.Color(this.color).getSource(), distance = parseFloat(this.distance), lowC = [
              0 + source[0] / 255 - distance,
              0 + source[1] / 255 - distance,
              0 + source[2] / 255 - distance,
              1
            ], highC = [
              source[0] / 255 + distance,
              source[1] / 255 + distance,
              source[2] / 255 + distance,
              1
            ];
            gl.uniform4fv(uniformLocations.uLow, lowC);
            gl.uniform4fv(uniformLocations.uHigh, highC);
          },
          /**
           * Returns object representation of an instance
           * @return {Object} Object representation of an instance
           */
          toObject: function() {
            return extend(this.callSuper("toObject"), {
              color: this.color,
              distance: this.distance
            });
          }
        }
      );
      fabric2.Image.filters.RemoveColor.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      var matrices = {
        Brownie: [
          0.5997,
          0.34553,
          -0.27082,
          0,
          0.186,
          -0.0377,
          0.86095,
          0.15059,
          0,
          -0.1449,
          0.24113,
          -0.07441,
          0.44972,
          0,
          -0.02965,
          0,
          0,
          0,
          1,
          0
        ],
        Vintage: [
          0.62793,
          0.32021,
          -0.03965,
          0,
          0.03784,
          0.02578,
          0.64411,
          0.03259,
          0,
          0.02926,
          0.0466,
          -0.08512,
          0.52416,
          0,
          0.02023,
          0,
          0,
          0,
          1,
          0
        ],
        Kodachrome: [
          1.12855,
          -0.39673,
          -0.03992,
          0,
          0.24991,
          -0.16404,
          1.08352,
          -0.05498,
          0,
          0.09698,
          -0.16786,
          -0.56034,
          1.60148,
          0,
          0.13972,
          0,
          0,
          0,
          1,
          0
        ],
        Technicolor: [
          1.91252,
          -0.85453,
          -0.09155,
          0,
          0.04624,
          -0.30878,
          1.76589,
          -0.10601,
          0,
          -0.27589,
          -0.2311,
          -0.75018,
          1.84759,
          0,
          0.12137,
          0,
          0,
          0,
          1,
          0
        ],
        Polaroid: [
          1.438,
          -0.062,
          -0.062,
          0,
          0,
          -0.122,
          1.378,
          -0.122,
          0,
          0,
          -0.016,
          -0.016,
          1.483,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        Sepia: [
          0.393,
          0.769,
          0.189,
          0,
          0,
          0.349,
          0.686,
          0.168,
          0,
          0,
          0.272,
          0.534,
          0.131,
          0,
          0,
          0,
          0,
          0,
          1,
          0
        ],
        BlackWhite: [
          1.5,
          1.5,
          1.5,
          0,
          -1,
          1.5,
          1.5,
          1.5,
          0,
          -1,
          1.5,
          1.5,
          1.5,
          0,
          -1,
          0,
          0,
          0,
          1,
          0
        ]
      };
      for (var key in matrices) {
        filters[key] = createClass(
          filters.ColorMatrix,
          /** @lends fabric.Image.filters.Sepia.prototype */
          {
            /**
             * Filter type
             * @param {String} type
             * @default
             */
            type: key,
            /**
             * Colormatrix for the effect
             * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
             * outside the -1, 1 range.
             * @param {Array} matrix array of 20 numbers.
             * @default
             */
            matrix: matrices[key],
            /**
             * Lock the matrix export for this kind of static, parameter less filters.
             */
            mainParameter: false,
            /**
             * Lock the colormatrix on the color part, skipping alpha
             */
            colorsOnly: true
          }
        );
        fabric2.Image.filters[key].fromObject = fabric2.Image.filters.BaseFilter.fromObject;
      }
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric, filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.BlendColor = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Blend.prototype */
        {
          type: "BlendColor",
          /**
           * Color to make the blend operation with. default to a reddish color since black or white
           * gives always strong result.
           **/
          color: "#F95C63",
          /**
           * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
           * darken, lighten, overlay, exclusion, tint.
           **/
          mode: "multiply",
          /**
           * alpha value. represent the strength of the blend color operation.
           **/
          alpha: 1,
          /**
           * Fragment source for the Multiply program
           */
          fragmentSource: {
            multiply: "gl_FragColor.rgb *= uColor.rgb;\n",
            screen: "gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",
            add: "gl_FragColor.rgb += uColor.rgb;\n",
            diff: "gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",
            subtract: "gl_FragColor.rgb -= uColor.rgb;\n",
            lighten: "gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",
            darken: "gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",
            exclusion: "gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",
            overlay: "if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",
            tint: "gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"
          },
          /**
           * build the fragment source for the filters, joining the common part with
           * the specific one.
           * @param {String} mode the mode of the filter, a key of this.fragmentSource
           * @return {String} the source to be compiled
           * @private
           */
          buildSource: function(mode) {
            return "precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n" + this.fragmentSource[mode] + "}\n}";
          },
          /**
           * Retrieves the cached shader.
           * @param {Object} options
           * @param {WebGLRenderingContext} options.context The GL context used for rendering.
           * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
           */
          retrieveShader: function(options) {
            var cacheKey = this.type + "_" + this.mode, shaderSource;
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              shaderSource = this.buildSource(this.mode);
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          /**
           * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, iLen = data.length, tr, tg, tb, r2, g2, b2, source, alpha1 = 1 - this.alpha;
            source = new fabric2.Color(this.color).getSource();
            tr = source[0] * this.alpha;
            tg = source[1] * this.alpha;
            tb = source[2] * this.alpha;
            for (var i2 = 0; i2 < iLen; i2 += 4) {
              r2 = data[i2];
              g2 = data[i2 + 1];
              b2 = data[i2 + 2];
              switch (this.mode) {
                case "multiply":
                  data[i2] = r2 * tr / 255;
                  data[i2 + 1] = g2 * tg / 255;
                  data[i2 + 2] = b2 * tb / 255;
                  break;
                case "screen":
                  data[i2] = 255 - (255 - r2) * (255 - tr) / 255;
                  data[i2 + 1] = 255 - (255 - g2) * (255 - tg) / 255;
                  data[i2 + 2] = 255 - (255 - b2) * (255 - tb) / 255;
                  break;
                case "add":
                  data[i2] = r2 + tr;
                  data[i2 + 1] = g2 + tg;
                  data[i2 + 2] = b2 + tb;
                  break;
                case "diff":
                case "difference":
                  data[i2] = Math.abs(r2 - tr);
                  data[i2 + 1] = Math.abs(g2 - tg);
                  data[i2 + 2] = Math.abs(b2 - tb);
                  break;
                case "subtract":
                  data[i2] = r2 - tr;
                  data[i2 + 1] = g2 - tg;
                  data[i2 + 2] = b2 - tb;
                  break;
                case "darken":
                  data[i2] = Math.min(r2, tr);
                  data[i2 + 1] = Math.min(g2, tg);
                  data[i2 + 2] = Math.min(b2, tb);
                  break;
                case "lighten":
                  data[i2] = Math.max(r2, tr);
                  data[i2 + 1] = Math.max(g2, tg);
                  data[i2 + 2] = Math.max(b2, tb);
                  break;
                case "overlay":
                  data[i2] = tr < 128 ? 2 * r2 * tr / 255 : 255 - 2 * (255 - r2) * (255 - tr) / 255;
                  data[i2 + 1] = tg < 128 ? 2 * g2 * tg / 255 : 255 - 2 * (255 - g2) * (255 - tg) / 255;
                  data[i2 + 2] = tb < 128 ? 2 * b2 * tb / 255 : 255 - 2 * (255 - b2) * (255 - tb) / 255;
                  break;
                case "exclusion":
                  data[i2] = tr + r2 - 2 * tr * r2 / 255;
                  data[i2 + 1] = tg + g2 - 2 * tg * g2 / 255;
                  data[i2 + 2] = tb + b2 - 2 * tb * b2 / 255;
                  break;
                case "tint":
                  data[i2] = tr + r2 * alpha1;
                  data[i2 + 1] = tg + g2 * alpha1;
                  data[i2 + 2] = tb + b2 * alpha1;
              }
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uColor: gl.getUniformLocation(program, "uColor")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            var source = new fabric2.Color(this.color).getSource();
            source[0] = this.alpha * source[0] / 255;
            source[1] = this.alpha * source[1] / 255;
            source[2] = this.alpha * source[2] / 255;
            source[3] = this.alpha;
            gl.uniform4fv(uniformLocations.uColor, source);
          },
          /**
           * Returns object representation of an instance
           * @return {Object} Object representation of an instance
           */
          toObject: function() {
            return {
              type: this.type,
              color: this.color,
              mode: this.mode,
              alpha: this.alpha
            };
          }
        }
      );
      fabric2.Image.filters.BlendColor.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric, filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.BlendImage = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.BlendImage.prototype */
        {
          type: "BlendImage",
          /**
           * Color to make the blend operation with. default to a reddish color since black or white
           * gives always strong result.
           **/
          image: null,
          /**
           * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
           * darken, lighten, overlay, exclusion, tint.
           **/
          mode: "multiply",
          /**
           * alpha value. represent the strength of the blend image operation.
           * not implemented.
           **/
          alpha: 1,
          vertexSource: "attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",
          /**
           * Fragment source for the Multiply program
           */
          fragmentSource: {
            multiply: "precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",
            mask: "precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"
          },
          /**
           * Retrieves the cached shader.
           * @param {Object} options
           * @param {WebGLRenderingContext} options.context The GL context used for rendering.
           * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
           */
          retrieveShader: function(options) {
            var cacheKey = this.type + "_" + this.mode;
            var shaderSource = this.fragmentSource[this.mode];
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          applyToWebGL: function(options) {
            var gl = options.context, texture = this.createTexture(options.filterBackend, this.image);
            this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);
            this.callSuper("applyToWebGL", options);
            this.unbindAdditionalTexture(gl, gl.TEXTURE1);
          },
          createTexture: function(backend, image) {
            return backend.getCachedTexture(image.cacheKey, image._element);
          },
          /**
           * Calculate a transformMatrix to adapt the image to blend over
           * @param {Object} options
           * @param {WebGLRenderingContext} options.context The GL context used for rendering.
           * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
           */
          calculateMatrix: function() {
            var image = this.image, width = image._element.width, height = image._element.height;
            return [
              1 / image.scaleX,
              0,
              0,
              0,
              1 / image.scaleY,
              0,
              -image.left / width,
              -image.top / height,
              1
            ];
          },
          /**
           * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, resources = options.filterBackend.resources, data = imageData.data, iLen = data.length, width = imageData.width, height = imageData.height, tr, tg, tb, ta, r2, g2, b2, a2, canvas1, context, image = this.image, blendData;
            if (!resources.blendImage) {
              resources.blendImage = fabric2.util.createCanvasElement();
            }
            canvas1 = resources.blendImage;
            context = canvas1.getContext("2d");
            if (canvas1.width !== width || canvas1.height !== height) {
              canvas1.width = width;
              canvas1.height = height;
            } else {
              context.clearRect(0, 0, width, height);
            }
            context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);
            context.drawImage(image._element, 0, 0, width, height);
            blendData = context.getImageData(0, 0, width, height).data;
            for (var i2 = 0; i2 < iLen; i2 += 4) {
              r2 = data[i2];
              g2 = data[i2 + 1];
              b2 = data[i2 + 2];
              a2 = data[i2 + 3];
              tr = blendData[i2];
              tg = blendData[i2 + 1];
              tb = blendData[i2 + 2];
              ta = blendData[i2 + 3];
              switch (this.mode) {
                case "multiply":
                  data[i2] = r2 * tr / 255;
                  data[i2 + 1] = g2 * tg / 255;
                  data[i2 + 2] = b2 * tb / 255;
                  data[i2 + 3] = a2 * ta / 255;
                  break;
                case "mask":
                  data[i2 + 3] = ta;
                  break;
              }
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uTransformMatrix: gl.getUniformLocation(program, "uTransformMatrix"),
              uImage: gl.getUniformLocation(program, "uImage")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            var matrix = this.calculateMatrix();
            gl.uniform1i(uniformLocations.uImage, 1);
            gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);
          },
          /**
           * Returns object representation of an instance
           * @return {Object} Object representation of an instance
           */
          toObject: function() {
            return {
              type: this.type,
              image: this.image && this.image.toObject(),
              mode: this.mode,
              alpha: this.alpha
            };
          }
        }
      );
      fabric2.Image.filters.BlendImage.fromObject = function(object, callback) {
        fabric2.Image.fromObject(object.image, function(image) {
          var options = fabric2.util.object.clone(object);
          options.image = image;
          callback(new fabric2.Image.filters.BlendImage(options));
        });
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), pow = Math.pow, floor = Math.floor, sqrt = Math.sqrt, abs = Math.abs, round = Math.round, sin = Math.sin, ceil = Math.ceil, filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Resize = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Resize.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Resize",
          /**
           * Resize type
           * for webgl resizeType is just lanczos, for canvas2d can be:
           * bilinear, hermite, sliceHack, lanczos.
           * @param {String} resizeType
           * @default
           */
          resizeType: "hermite",
          /**
           * Scale factor for resizing, x axis
           * @param {Number} scaleX
           * @default
           */
          scaleX: 1,
          /**
           * Scale factor for resizing, y axis
           * @param {Number} scaleY
           * @default
           */
          scaleY: 1,
          /**
           * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos
           * @param {Number} lanczosLobes
           * @default
           */
          lanczosLobes: 3,
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uDelta: gl.getUniformLocation(program, "uDelta"),
              uTaps: gl.getUniformLocation(program, "uTaps")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);
            gl.uniform1fv(uniformLocations.uTaps, this.taps);
          },
          /**
           * Retrieves the cached shader.
           * @param {Object} options
           * @param {WebGLRenderingContext} options.context The GL context used for rendering.
           * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
           */
          retrieveShader: function(options) {
            var filterWindow = this.getFilterWindow(), cacheKey = this.type + "_" + filterWindow;
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              var fragmentShader = this.generateShader(filterWindow);
              options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);
            }
            return options.programCache[cacheKey];
          },
          getFilterWindow: function() {
            var scale = this.tempScale;
            return Math.ceil(this.lanczosLobes / scale);
          },
          getTaps: function() {
            var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale, filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);
            for (var i2 = 1; i2 <= filterWindow; i2++) {
              taps[i2 - 1] = lobeFunction(i2 * scale);
            }
            return taps;
          },
          /**
           * Generate vertex and shader sources from the necessary steps numbers
           * @param {Number} filterWindow
           */
          generateShader: function(filterWindow) {
            var offsets = new Array(filterWindow), fragmentShader = this.fragmentSourceTOP, filterWindow;
            for (var i2 = 1; i2 <= filterWindow; i2++) {
              offsets[i2 - 1] = i2 + ".0 * uDelta";
            }
            fragmentShader += "uniform float uTaps[" + filterWindow + "];\n";
            fragmentShader += "void main() {\n";
            fragmentShader += "  vec4 color = texture2D(uTexture, vTexCoord);\n";
            fragmentShader += "  float sum = 1.0;\n";
            offsets.forEach(function(offset, i3) {
              fragmentShader += "  color += texture2D(uTexture, vTexCoord + " + offset + ") * uTaps[" + i3 + "];\n";
              fragmentShader += "  color += texture2D(uTexture, vTexCoord - " + offset + ") * uTaps[" + i3 + "];\n";
              fragmentShader += "  sum += 2.0 * uTaps[" + i3 + "];\n";
            });
            fragmentShader += "  gl_FragColor = color / sum;\n";
            fragmentShader += "}";
            return fragmentShader;
          },
          fragmentSourceTOP: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",
          /**
           * Apply the resize filter to the image
           * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
           *
           * @param {Object} options
           * @param {Number} options.passes The number of filters remaining to be executed
           * @param {Boolean} options.webgl Whether to use webgl to render the filter.
           * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
           * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
           * @param {WebGLRenderingContext} options.context The GL context used for rendering.
           * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
           */
          applyTo: function(options) {
            if (options.webgl) {
              options.passes++;
              this.width = options.sourceWidth;
              this.horizontal = true;
              this.dW = Math.round(this.width * this.scaleX);
              this.dH = options.sourceHeight;
              this.tempScale = this.dW / this.width;
              this.taps = this.getTaps();
              options.destinationWidth = this.dW;
              this._setupFrameBuffer(options);
              this.applyToWebGL(options);
              this._swapTextures(options);
              options.sourceWidth = options.destinationWidth;
              this.height = options.sourceHeight;
              this.horizontal = false;
              this.dH = Math.round(this.height * this.scaleY);
              this.tempScale = this.dH / this.height;
              this.taps = this.getTaps();
              options.destinationHeight = this.dH;
              this._setupFrameBuffer(options);
              this.applyToWebGL(options);
              this._swapTextures(options);
              options.sourceHeight = options.destinationHeight;
            } else {
              this.applyTo2d(options);
            }
          },
          isNeutralState: function() {
            return this.scaleX === 1 && this.scaleY === 1;
          },
          lanczosCreate: function(lobes) {
            return function(x) {
              if (x >= lobes || x <= -lobes) {
                return 0;
              }
              if (x < 11920929e-14 && x > -11920929e-14) {
                return 1;
              }
              x *= Math.PI;
              var xx = x / lobes;
              return sin(x) / x * sin(xx) / xx;
            };
          },
          /**
           * Applies filter to canvas element
           * @memberOf fabric.Image.filters.Resize.prototype
           * @param {Object} canvasEl Canvas element to apply filter to
           * @param {Number} scaleX
           * @param {Number} scaleY
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, scaleX = this.scaleX, scaleY = this.scaleY;
            this.rcpScaleX = 1 / scaleX;
            this.rcpScaleY = 1 / scaleY;
            var oW = imageData.width, oH = imageData.height, dW = round(oW * scaleX), dH = round(oH * scaleY), newData;
            if (this.resizeType === "sliceHack") {
              newData = this.sliceByTwo(options, oW, oH, dW, dH);
            } else if (this.resizeType === "hermite") {
              newData = this.hermiteFastResize(options, oW, oH, dW, dH);
            } else if (this.resizeType === "bilinear") {
              newData = this.bilinearFiltering(options, oW, oH, dW, dH);
            } else if (this.resizeType === "lanczos") {
              newData = this.lanczosResize(options, oW, oH, dW, dH);
            }
            options.imageData = newData;
          },
          /**
           * Filter sliceByTwo
           * @param {Object} canvasEl Canvas element to apply filter to
           * @param {Number} oW Original Width
           * @param {Number} oH Original Height
           * @param {Number} dW Destination Width
           * @param {Number} dH Destination Height
           * @returns {ImageData}
           */
          sliceByTwo: function(options, oW, oH, dW, dH) {
            var imageData = options.imageData, mult = 0.5, doneW = false, doneH = false, stepW = oW * mult, stepH = oH * mult, resources = fabric2.filterBackend.resources, tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;
            if (!resources.sliceByTwo) {
              resources.sliceByTwo = document.createElement("canvas");
            }
            tmpCanvas = resources.sliceByTwo;
            if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {
              tmpCanvas.width = oW * 1.5;
              tmpCanvas.height = oH;
            }
            ctx = tmpCanvas.getContext("2d");
            ctx.clearRect(0, 0, oW * 1.5, oH);
            ctx.putImageData(imageData, 0, 0);
            dW = floor(dW);
            dH = floor(dH);
            while (!doneW || !doneH) {
              oW = stepW;
              oH = stepH;
              if (dW < floor(stepW * mult)) {
                stepW = floor(stepW * mult);
              } else {
                stepW = dW;
                doneW = true;
              }
              if (dH < floor(stepH * mult)) {
                stepH = floor(stepH * mult);
              } else {
                stepH = dH;
                doneH = true;
              }
              ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);
              sX = dX;
              sY = dY;
              dY += stepH;
            }
            return ctx.getImageData(sX, sY, dW, dH);
          },
          /**
           * Filter lanczosResize
           * @param {Object} canvasEl Canvas element to apply filter to
           * @param {Number} oW Original Width
           * @param {Number} oH Original Height
           * @param {Number} dW Destination Width
           * @param {Number} dH Destination Height
           * @returns {ImageData}
           */
          lanczosResize: function(options, oW, oH, dW, dH) {
            function process(u2) {
              var v2, i2, weight, idx, a2, red, green, blue, alpha, fX, fY;
              center.x = (u2 + 0.5) * ratioX;
              icenter.x = floor(center.x);
              for (v2 = 0; v2 < dH; v2++) {
                center.y = (v2 + 0.5) * ratioY;
                icenter.y = floor(center.y);
                a2 = 0;
                red = 0;
                green = 0;
                blue = 0;
                alpha = 0;
                for (i2 = icenter.x - range2X; i2 <= icenter.x + range2X; i2++) {
                  if (i2 < 0 || i2 >= oW) {
                    continue;
                  }
                  fX = floor(1e3 * abs(i2 - center.x));
                  if (!cacheLanc[fX]) {
                    cacheLanc[fX] = {};
                  }
                  for (var j2 = icenter.y - range2Y; j2 <= icenter.y + range2Y; j2++) {
                    if (j2 < 0 || j2 >= oH) {
                      continue;
                    }
                    fY = floor(1e3 * abs(j2 - center.y));
                    if (!cacheLanc[fX][fY]) {
                      cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1e3);
                    }
                    weight = cacheLanc[fX][fY];
                    if (weight > 0) {
                      idx = (j2 * oW + i2) * 4;
                      a2 += weight;
                      red += weight * srcData[idx];
                      green += weight * srcData[idx + 1];
                      blue += weight * srcData[idx + 2];
                      alpha += weight * srcData[idx + 3];
                    }
                  }
                }
                idx = (v2 * dW + u2) * 4;
                destData[idx] = red / a2;
                destData[idx + 1] = green / a2;
                destData[idx + 2] = blue / a2;
                destData[idx + 3] = alpha / a2;
              }
              if (++u2 < dW) {
                return process(u2);
              } else {
                return destImg;
              }
            }
            var srcData = options.imageData.data, destImg = options.ctx.createImageData(dW, dH), destData = destImg.data, lanczos = this.lanczosCreate(this.lanczosLobes), ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY, range2X = ceil(ratioX * this.lanczosLobes / 2), range2Y = ceil(ratioY * this.lanczosLobes / 2), cacheLanc = {}, center = {}, icenter = {};
            return process(0);
          },
          /**
           * bilinearFiltering
           * @param {Object} canvasEl Canvas element to apply filter to
           * @param {Number} oW Original Width
           * @param {Number} oH Original Height
           * @param {Number} dW Destination Width
           * @param {Number} dH Destination Height
           * @returns {ImageData}
           */
          bilinearFiltering: function(options, oW, oH, dW, dH) {
            var a2, b2, c2, d2, x, y2, i2, j2, xDiff, yDiff, chnl, color, offset = 0, origPix, ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, w4 = 4 * (oW - 1), img = options.imageData, pixels = img.data, destImage = options.ctx.createImageData(dW, dH), destPixels = destImage.data;
            for (i2 = 0; i2 < dH; i2++) {
              for (j2 = 0; j2 < dW; j2++) {
                x = floor(ratioX * j2);
                y2 = floor(ratioY * i2);
                xDiff = ratioX * j2 - x;
                yDiff = ratioY * i2 - y2;
                origPix = 4 * (y2 * oW + x);
                for (chnl = 0; chnl < 4; chnl++) {
                  a2 = pixels[origPix + chnl];
                  b2 = pixels[origPix + 4 + chnl];
                  c2 = pixels[origPix + w4 + chnl];
                  d2 = pixels[origPix + w4 + 4 + chnl];
                  color = a2 * (1 - xDiff) * (1 - yDiff) + b2 * xDiff * (1 - yDiff) + c2 * yDiff * (1 - xDiff) + d2 * xDiff * yDiff;
                  destPixels[offset++] = color;
                }
              }
            }
            return destImage;
          },
          /**
           * hermiteFastResize
           * @param {Object} canvasEl Canvas element to apply filter to
           * @param {Number} oW Original Width
           * @param {Number} oH Original Height
           * @param {Number} dW Destination Width
           * @param {Number} dH Destination Height
           * @returns {ImageData}
           */
          hermiteFastResize: function(options, oW, oH, dW, dH) {
            var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY, ratioWHalf = ceil(ratioW / 2), ratioHHalf = ceil(ratioH / 2), img = options.imageData, data = img.data, img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;
            for (var j2 = 0; j2 < dH; j2++) {
              for (var i2 = 0; i2 < dW; i2++) {
                var x2 = (i2 + j2 * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0, gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j2 + 0.5) * ratioH;
                for (var yy = floor(j2 * ratioH); yy < (j2 + 1) * ratioH; yy++) {
                  var dy = abs(centerY - (yy + 0.5)) / ratioHHalf, centerX = (i2 + 0.5) * ratioW, w0 = dy * dy;
                  for (var xx = floor(i2 * ratioW); xx < (i2 + 1) * ratioW; xx++) {
                    var dx = abs(centerX - (xx + 0.5)) / ratioWHalf, w2 = sqrt(w0 + dx * dx);
                    if (w2 > 1 && w2 < -1) {
                      continue;
                    }
                    weight = 2 * w2 * w2 * w2 - 3 * w2 * w2 + 1;
                    if (weight > 0) {
                      dx = 4 * (xx + yy * oW);
                      gxA += weight * data[dx + 3];
                      weightsAlpha += weight;
                      if (data[dx + 3] < 255) {
                        weight = weight * data[dx + 3] / 250;
                      }
                      gxR += weight * data[dx];
                      gxG += weight * data[dx + 1];
                      gxB += weight * data[dx + 2];
                      weights += weight;
                    }
                  }
                }
                data2[x2] = gxR / weights;
                data2[x2 + 1] = gxG / weights;
                data2[x2 + 2] = gxB / weights;
                data2[x2 + 3] = gxA / weightsAlpha;
              }
            }
            return img2;
          },
          /**
           * Returns object representation of an instance
           * @return {Object} Object representation of an instance
           */
          toObject: function() {
            return {
              type: this.type,
              scaleX: this.scaleX,
              scaleY: this.scaleY,
              resizeType: this.resizeType,
              lanczosLobes: this.lanczosLobes
            };
          }
        }
      );
      fabric2.Image.filters.Resize.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Contrast = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Contrast.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Contrast",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",
          /**
           * contrast value, range from -1 to 1.
           * @param {Number} contrast
           * @default 0
           */
          contrast: 0,
          mainParameter: "contrast",
          /**
           * Constructor
           * @memberOf fabric.Image.filters.Contrast.prototype
           * @param {Object} [options] Options object
           * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)
           */
          /**
            * Apply the Contrast operation to a Uint8Array representing the pixels of an image.
            *
            * @param {Object} options
            * @param {ImageData} options.imageData The Uint8Array to be filtered.
            */
          applyTo2d: function(options) {
            if (this.contrast === 0) {
              return;
            }
            var imageData = options.imageData, i2, len, data = imageData.data, len = data.length, contrast = Math.floor(this.contrast * 255), contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));
            for (i2 = 0; i2 < len; i2 += 4) {
              data[i2] = contrastF * (data[i2] - 128) + 128;
              data[i2 + 1] = contrastF * (data[i2 + 1] - 128) + 128;
              data[i2 + 2] = contrastF * (data[i2 + 2] - 128) + 128;
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uContrast: gl.getUniformLocation(program, "uContrast")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uContrast, this.contrast);
          }
        }
      );
      fabric2.Image.filters.Contrast.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Saturation = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Saturation.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Saturation",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",
          /**
           * Saturation value, from -1 to 1.
           * Increases/decreases the color saturation.
           * A value of 0 has no effect.
           * 
           * @param {Number} saturation
           * @default
           */
          saturation: 0,
          mainParameter: "saturation",
          /**
           * Constructor
           * @memberOf fabric.Image.filters.Saturate.prototype
           * @param {Object} [options] Options object
           * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)
           */
          /**
           * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
           */
          applyTo2d: function(options) {
            if (this.saturation === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, len = data.length, adjust = -this.saturation, i2, max;
            for (i2 = 0; i2 < len; i2 += 4) {
              max = Math.max(data[i2], data[i2 + 1], data[i2 + 2]);
              data[i2] += max !== data[i2] ? (max - data[i2]) * adjust : 0;
              data[i2 + 1] += max !== data[i2 + 1] ? (max - data[i2 + 1]) * adjust : 0;
              data[i2 + 2] += max !== data[i2 + 2] ? (max - data[i2 + 2]) * adjust : 0;
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uSaturation: gl.getUniformLocation(program, "uSaturation")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uSaturation, -this.saturation);
          }
        }
      );
      fabric2.Image.filters.Saturation.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Vibrance = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Vibrance.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Vibrance",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uVibrance;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat max = max(color.r, max(color.g, color.b));\nfloat avg = (color.r + color.g + color.b) / 3.0;\nfloat amt = (abs(max - avg) * 2.0) * uVibrance;\ncolor.r += max != color.r ? (max - color.r) * amt : 0.00;\ncolor.g += max != color.g ? (max - color.g) * amt : 0.00;\ncolor.b += max != color.b ? (max - color.b) * amt : 0.00;\ngl_FragColor = color;\n}",
          /**
           * Vibrance value, from -1 to 1.
           * Increases/decreases the saturation of more muted colors with less effect on saturated colors.
           * A value of 0 has no effect.
           * 
           * @param {Number} vibrance
           * @default
           */
          vibrance: 0,
          mainParameter: "vibrance",
          /**
           * Constructor
           * @memberOf fabric.Image.filters.Vibrance.prototype
           * @param {Object} [options] Options object
           * @param {Number} [options.vibrance=0] Vibrance value for the image (between -1 and 1)
           */
          /**
           * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
           */
          applyTo2d: function(options) {
            if (this.vibrance === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, len = data.length, adjust = -this.vibrance, i2, max, avg, amt;
            for (i2 = 0; i2 < len; i2 += 4) {
              max = Math.max(data[i2], data[i2 + 1], data[i2 + 2]);
              avg = (data[i2] + data[i2 + 1] + data[i2 + 2]) / 3;
              amt = Math.abs(max - avg) * 2 / 255 * adjust;
              data[i2] += max !== data[i2] ? (max - data[i2]) * amt : 0;
              data[i2 + 1] += max !== data[i2 + 1] ? (max - data[i2 + 1]) * amt : 0;
              data[i2 + 2] += max !== data[i2 + 2] ? (max - data[i2 + 2]) * amt : 0;
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uVibrance: gl.getUniformLocation(program, "uVibrance")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);
          }
        }
      );
      fabric2.Image.filters.Vibrance.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Blur = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Blur.prototype */
        {
          type: "Blur",
          /*
          'gl_FragColor = vec4(0.0);',
          'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',
          'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',
          'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',
          'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',
          'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',
          'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',
          'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',
          'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',
          'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',
          'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',
          'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',
          'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',
          'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',
          'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',
          'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',
          */
          /* eslint-disable max-len */
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",
          /* eslint-enable max-len */
          /**
           * blur value, in percentage of image dimensions.
           * specific to keep the image blur constant at different resolutions
           * range between 0 and 1.
           */
          blur: 0,
          mainParameter: "blur",
          applyTo: function(options) {
            if (options.webgl) {
              this.aspectRatio = options.sourceWidth / options.sourceHeight;
              options.passes++;
              this._setupFrameBuffer(options);
              this.horizontal = true;
              this.applyToWebGL(options);
              this._swapTextures(options);
              this._setupFrameBuffer(options);
              this.horizontal = false;
              this.applyToWebGL(options);
              this._swapTextures(options);
            } else {
              this.applyTo2d(options);
            }
          },
          applyTo2d: function(options) {
            options.imageData = this.simpleBlur(options);
          },
          simpleBlur: function(options) {
            var resources = options.filterBackend.resources, canvas1, canvas2, width = options.imageData.width, height = options.imageData.height;
            if (!resources.blurLayer1) {
              resources.blurLayer1 = fabric2.util.createCanvasElement();
              resources.blurLayer2 = fabric2.util.createCanvasElement();
            }
            canvas1 = resources.blurLayer1;
            canvas2 = resources.blurLayer2;
            if (canvas1.width !== width || canvas1.height !== height) {
              canvas2.width = canvas1.width = width;
              canvas2.height = canvas1.height = height;
            }
            var ctx1 = canvas1.getContext("2d"), ctx2 = canvas2.getContext("2d"), nSamples = 15, random, percent, j2, i2, blur = this.blur * 0.06 * 0.5;
            ctx1.putImageData(options.imageData, 0, 0);
            ctx2.clearRect(0, 0, width, height);
            for (i2 = -nSamples; i2 <= nSamples; i2++) {
              random = (Math.random() - 0.5) / 4;
              percent = i2 / nSamples;
              j2 = blur * percent * width + random;
              ctx2.globalAlpha = 1 - Math.abs(percent);
              ctx2.drawImage(canvas1, j2, random);
              ctx1.drawImage(canvas2, 0, 0);
              ctx2.globalAlpha = 1;
              ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
            }
            for (i2 = -nSamples; i2 <= nSamples; i2++) {
              random = (Math.random() - 0.5) / 4;
              percent = i2 / nSamples;
              j2 = blur * percent * height + random;
              ctx2.globalAlpha = 1 - Math.abs(percent);
              ctx2.drawImage(canvas1, random, j2);
              ctx1.drawImage(canvas2, 0, 0);
              ctx2.globalAlpha = 1;
              ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
            }
            options.ctx.drawImage(canvas1, 0, 0);
            var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);
            ctx1.globalAlpha = 1;
            ctx1.clearRect(0, 0, canvas1.width, canvas1.height);
            return newImageData;
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              delta: gl.getUniformLocation(program, "uDelta")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            var delta = this.chooseRightDelta();
            gl.uniform2fv(uniformLocations.delta, delta);
          },
          /**
           * choose right value of image percentage to blur with
           * @returns {Array} a numeric array with delta values
           */
          chooseRightDelta: function() {
            var blurScale = 1, delta = [0, 0], blur;
            if (this.horizontal) {
              if (this.aspectRatio > 1) {
                blurScale = 1 / this.aspectRatio;
              }
            } else {
              if (this.aspectRatio < 1) {
                blurScale = this.aspectRatio;
              }
            }
            blur = blurScale * this.blur * 0.12;
            if (this.horizontal) {
              delta[0] = blur;
            } else {
              delta[1] = blur;
            }
            return delta;
          }
        }
      );
      filters.Blur.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Gamma = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Gamma.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "Gamma",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",
          /**
           * Gamma array value, from 0.01 to 2.2.
           * @param {Array} gamma
           * @default
           */
          gamma: [1, 1, 1],
          /**
           * Describe the property that is the filter parameter
           * @param {String} m
           * @default
           */
          mainParameter: "gamma",
          /**
           * Constructor
           * @param {Object} [options] Options object
           */
          initialize: function(options) {
            this.gamma = [1, 1, 1];
            filters.BaseFilter.prototype.initialize.call(this, options);
          },
          /**
           * Apply the Gamma operation to a Uint8Array representing the pixels of an image.
           *
           * @param {Object} options
           * @param {ImageData} options.imageData The Uint8Array to be filtered.
           */
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, gamma = this.gamma, len = data.length, rInv = 1 / gamma[0], gInv = 1 / gamma[1], bInv = 1 / gamma[2], i2;
            if (!this.rVals) {
              this.rVals = new Uint8Array(256);
              this.gVals = new Uint8Array(256);
              this.bVals = new Uint8Array(256);
            }
            for (i2 = 0, len = 256; i2 < len; i2++) {
              this.rVals[i2] = Math.pow(i2 / 255, rInv) * 255;
              this.gVals[i2] = Math.pow(i2 / 255, gInv) * 255;
              this.bVals[i2] = Math.pow(i2 / 255, bInv) * 255;
            }
            for (i2 = 0, len = data.length; i2 < len; i2 += 4) {
              data[i2] = this.rVals[data[i2]];
              data[i2 + 1] = this.gVals[data[i2 + 1]];
              data[i2 + 2] = this.bVals[data[i2 + 2]];
            }
          },
          /**
           * Return WebGL uniform locations for this filter's shader.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {WebGLShaderProgram} program This filter's compiled shader program.
           */
          getUniformLocations: function(gl, program) {
            return {
              uGamma: gl.getUniformLocation(program, "uGamma")
            };
          },
          /**
           * Send data from this filter to its shader program's uniforms.
           *
           * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
           * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
           */
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform3fv(uniformLocations.uGamma, this.gamma);
          }
        }
      );
      fabric2.Image.filters.Gamma.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.Composed = createClass(
        filters.BaseFilter,
        /** @lends fabric.Image.filters.Composed.prototype */
        {
          type: "Composed",
          /**
           * A non sparse array of filters to apply
           */
          subFilters: [],
          /**
           * Constructor
           * @param {Object} [options] Options object
           */
          initialize: function(options) {
            this.callSuper("initialize", options);
            this.subFilters = this.subFilters.slice(0);
          },
          /**
           * Apply this container's filters to the input image provided.
           *
           * @param {Object} options
           * @param {Number} options.passes The number of filters remaining to be applied.
           */
          applyTo: function(options) {
            options.passes += this.subFilters.length - 1;
            this.subFilters.forEach(function(filter) {
              filter.applyTo(options);
            });
          },
          /**
           * Serialize this filter into JSON.
           *
           * @returns {Object} A JSON representation of this filter.
           */
          toObject: function() {
            return fabric2.util.object.extend(this.callSuper("toObject"), {
              subFilters: this.subFilters.map(function(filter) {
                return filter.toObject();
              })
            });
          },
          isNeutralState: function() {
            return !this.subFilters.some(function(filter) {
              return !filter.isNeutralState();
            });
          }
        }
      );
      fabric2.Image.filters.Composed.fromObject = function(object, callback) {
        var filters2 = object.subFilters || [], subFilters = filters2.map(function(filter) {
          return new fabric2.Image.filters[filter.type](filter);
        }), instance = new fabric2.Image.filters.Composed({ subFilters });
        callback && callback(instance);
        return instance;
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), filters = fabric2.Image.filters, createClass = fabric2.util.createClass;
      filters.HueRotation = createClass(
        filters.ColorMatrix,
        /** @lends fabric.Image.filters.HueRotation.prototype */
        {
          /**
           * Filter type
           * @param {String} type
           * @default
           */
          type: "HueRotation",
          /**
           * HueRotation value, from -1 to 1.
           * the unit is radians
           * @param {Number} myParameter
           * @default
           */
          rotation: 0,
          /**
           * Describe the property that is the filter parameter
           * @param {String} m
           * @default
           */
          mainParameter: "rotation",
          calculateMatrix: function() {
            var rad = this.rotation * Math.PI, cos = fabric2.util.cos(rad), sin = fabric2.util.sin(rad), aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;
            this.matrix = [
              1,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              1,
              0
            ];
            this.matrix[0] = cos + OneMinusCos / 3;
            this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;
            this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;
            this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;
            this.matrix[6] = cos + aThird * OneMinusCos;
            this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;
            this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;
            this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;
            this.matrix[12] = cos + aThird * OneMinusCos;
          },
          /**
           * HueRotation isNeutralState implementation
           * Used only in image applyFilters to discard filters that will not have an effect
           * on the image
           * @param {Object} options
           **/
          isNeutralState: function(options) {
            this.calculateMatrix();
            return filters.BaseFilter.prototype.isNeutralState.call(this, options);
          },
          /**
           * Apply this filter to the input image data provided.
           *
           * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
           *
           * @param {Object} options
           * @param {Number} options.passes The number of filters remaining to be executed
           * @param {Boolean} options.webgl Whether to use webgl to render the filter.
           * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
           * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
           * @param {WebGLRenderingContext} options.context The GL context used for rendering.
           * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
           */
          applyTo: function(options) {
            this.calculateMatrix();
            filters.BaseFilter.prototype.applyTo.call(this, options);
          }
        }
      );
      fabric2.Image.filters.HueRotation.fromObject = fabric2.Image.filters.BaseFilter.fromObject;
    })(typeof exports !== "undefined" ? exports : exports);
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {}), clone = fabric2.util.object.clone;
      if (fabric2.Text) {
        fabric2.warn("fabric.Text is already defined");
        return;
      }
      var additionalProps = "fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles direction path pathStartOffset pathSide".split(" ");
      fabric2.Text = fabric2.util.createClass(
        fabric2.Object,
        /** @lends fabric.Text.prototype */
        {
          /**
           * Properties which when set cause object to change dimensions
           * @type Array
           * @private
           */
          _dimensionAffectingProps: [
            "fontSize",
            "fontWeight",
            "fontFamily",
            "fontStyle",
            "lineHeight",
            "text",
            "charSpacing",
            "textAlign",
            "styles",
            "path",
            "pathStartOffset",
            "pathSide"
          ],
          /**
           * @private
           */
          _reNewline: /\r?\n/,
          /**
           * Use this regular expression to filter for whitespaces that is not a new line.
           * Mostly used when text is 'justify' aligned.
           * @private
           */
          _reSpacesAndTabs: /[ \t\r]/g,
          /**
           * Use this regular expression to filter for whitespace that is not a new line.
           * Mostly used when text is 'justify' aligned.
           * @private
           */
          _reSpaceAndTab: /[ \t\r]/,
          /**
           * Use this regular expression to filter consecutive groups of non spaces.
           * Mostly used when text is 'justify' aligned.
           * @private
           */
          _reWords: /\S+/g,
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "text",
          /**
           * Font size (in pixels)
           * @type Number
           * @default
           */
          fontSize: 40,
          /**
           * Font weight (e.g. bold, normal, 400, 600, 800)
           * @type {(Number|String)}
           * @default
           */
          fontWeight: "normal",
          /**
           * Font family
           * @type String
           * @default
           */
          fontFamily: "Times New Roman",
          /**
           * Text decoration underline.
           * @type Boolean
           * @default
           */
          underline: false,
          /**
           * Text decoration overline.
           * @type Boolean
           * @default
           */
          overline: false,
          /**
           * Text decoration linethrough.
           * @type Boolean
           * @default
           */
          linethrough: false,
          /**
           * Text alignment. Possible values: "left", "center", "right", "justify",
           * "justify-left", "justify-center" or "justify-right".
           * @type String
           * @default
           */
          textAlign: "left",
          /**
           * Font style . Possible values: "", "normal", "italic" or "oblique".
           * @type String
           * @default
           */
          fontStyle: "normal",
          /**
           * Line height
           * @type Number
           * @default
           */
          lineHeight: 1.16,
          /**
           * Superscript schema object (minimum overlap)
           * @type {Object}
           * @default
           */
          superscript: {
            size: 0.6,
            // fontSize factor
            baseline: -0.35
            // baseline-shift factor (upwards)
          },
          /**
           * Subscript schema object (minimum overlap)
           * @type {Object}
           * @default
           */
          subscript: {
            size: 0.6,
            // fontSize factor
            baseline: 0.11
            // baseline-shift factor (downwards)
          },
          /**
           * Background color of text lines
           * @type String
           * @default
           */
          textBackgroundColor: "",
          /**
           * List of properties to consider when checking if
           * state of an object is changed ({@link fabric.Object#hasStateChanged})
           * as well as for history (undo/redo) purposes
           * @type Array
           */
          stateProperties: fabric2.Object.prototype.stateProperties.concat(additionalProps),
          /**
           * List of properties to consider when checking if cache needs refresh
           * @type Array
           */
          cacheProperties: fabric2.Object.prototype.cacheProperties.concat(additionalProps),
          /**
           * When defined, an object is rendered via stroke and this property specifies its color.
           * <b>Backwards incompatibility note:</b> This property was named "strokeStyle" until v1.1.6
           * @type String
           * @default
           */
          stroke: null,
          /**
           * Shadow object representing shadow of this shape.
           * <b>Backwards incompatibility note:</b> This property was named "textShadow" (String) until v1.2.11
           * @type fabric.Shadow
           * @default
           */
          shadow: null,
          /**
           * fabric.Path that the text should follow.
           * since 4.6.0 the path will be drawn automatically.
           * if you want to make the path visible, give it a stroke and strokeWidth or fill value
           * if you want it to be hidden, assign visible = false to the path.
           * This feature is in BETA, and SVG import/export is not yet supported.
           * @type fabric.Path
           * @example
           * var textPath = new fabric.Text('Text on a path', {
           *     top: 150,
           *     left: 150,
           *     textAlign: 'center',
           *     charSpacing: -50,
           *     path: new fabric.Path('M 0 0 C 50 -100 150 -100 200 0', {
           *         strokeWidth: 1,
           *         visible: false
           *     }),
           *     pathSide: 'left',
           *     pathStartOffset: 0
           * });
           * @default
           */
          path: null,
          /**
           * Offset amount for text path starting position
           * Only used when text has a path
           * @type Number
           * @default
           */
          pathStartOffset: 0,
          /**
           * Which side of the path the text should be drawn on.
           * Only used when text has a path
           * @type {String} 'left|right'
           * @default
           */
          pathSide: "left",
          /**
           * @private
           */
          _fontSizeFraction: 0.222,
          /**
           * @private
           */
          offsets: {
            underline: 0.1,
            linethrough: -0.315,
            overline: -0.88
          },
          /**
           * Text Line proportion to font Size (in pixels)
           * @type Number
           * @default
           */
          _fontSizeMult: 1.13,
          /**
           * additional space between characters
           * expressed in thousands of em unit
           * @type Number
           * @default
           */
          charSpacing: 0,
          /**
           * Object containing character styles - top-level properties -> line numbers,
           * 2nd-level properties - character numbers
           * @type Object
           * @default
           */
          styles: null,
          /**
           * Reference to a context to measure text char or couple of chars
           * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas
           * once created it will be referenced on fabric._measuringContext to avoid creating a canvas for every
           * text object created.
           * @type {CanvasRenderingContext2D}
           * @default
           */
          _measuringContext: null,
          /**
           * Baseline shift, styles only, keep at 0 for the main text object
           * @type {Number}
           * @default
           */
          deltaY: 0,
          /**
           * WARNING: EXPERIMENTAL. NOT SUPPORTED YET
           * determine the direction of the text.
           * This has to be set manually together with textAlign and originX for proper
           * experience.
           * some interesting link for the future
           * https://www.w3.org/International/questions/qa-bidi-unicode-controls
           * @since 4.5.0
           * @type {String} 'ltr|rtl'
           * @default
           */
          direction: "ltr",
          /**
           * Array of properties that define a style unit (of 'styles').
           * @type {Array}
           * @default
           */
          _styleProperties: [
            "stroke",
            "strokeWidth",
            "fill",
            "fontFamily",
            "fontSize",
            "fontWeight",
            "fontStyle",
            "underline",
            "overline",
            "linethrough",
            "deltaY",
            "textBackgroundColor"
          ],
          /**
           * contains characters bounding boxes
           */
          __charBounds: [],
          /**
           * use this size when measuring text. To avoid IE11 rounding errors
           * @type {Number}
           * @default
           * @readonly
           * @private
           */
          CACHE_FONT_SIZE: 400,
          /**
           * contains the min text width to avoid getting 0
           * @type {Number}
           * @default
           */
          MIN_TEXT_WIDTH: 2,
          /**
           * Constructor
           * @param {String} text Text string
           * @param {Object} [options] Options object
           * @return {fabric.Text} thisArg
           */
          initialize: function(text, options) {
            this.styles = options ? options.styles || {} : {};
            this.text = text;
            this.__skipDimension = true;
            this.callSuper("initialize", options);
            if (this.path) {
              this.setPathInfo();
            }
            this.__skipDimension = false;
            this.initDimensions();
            this.setCoords();
            this.setupState({ propertySet: "_dimensionAffectingProps" });
          },
          /**
           * If text has a path, it will add the extra information needed
           * for path and text calculations
           * @return {fabric.Text} thisArg
           */
          setPathInfo: function() {
            var path = this.path;
            if (path) {
              path.segmentsInfo = fabric2.util.getPathSegmentsInfo(path.path);
            }
          },
          /**
           * Return a context for measurement of text string.
           * if created it gets stored for reuse
           * @param {String} text Text string
           * @param {Object} [options] Options object
           * @return {fabric.Text} thisArg
           */
          getMeasuringContext: function() {
            if (!fabric2._measuringContext) {
              fabric2._measuringContext = this.canvas && this.canvas.contextCache || fabric2.util.createCanvasElement().getContext("2d");
            }
            return fabric2._measuringContext;
          },
          /**
           * @private
           * Divides text into lines of text and lines of graphemes.
           */
          _splitText: function() {
            var newLines = this._splitTextIntoLines(this.text);
            this.textLines = newLines.lines;
            this._textLines = newLines.graphemeLines;
            this._unwrappedTextLines = newLines._unwrappedLines;
            this._text = newLines.graphemeText;
            return newLines;
          },
          /**
           * Initialize or update text dimensions.
           * Updates this.width and this.height with the proper values.
           * Does not return dimensions.
           */
          initDimensions: function() {
            if (this.__skipDimension) {
              return;
            }
            this._splitText();
            this._clearCache();
            if (this.path) {
              this.width = this.path.width;
              this.height = this.path.height;
            } else {
              this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;
              this.height = this.calcTextHeight();
            }
            if (this.textAlign.indexOf("justify") !== -1) {
              this.enlargeSpaces();
            }
            this.saveState({ propertySet: "_dimensionAffectingProps" });
          },
          /**
           * Enlarge space boxes and shift the others
           */
          enlargeSpaces: function() {
            var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;
            for (var i2 = 0, len = this._textLines.length; i2 < len; i2++) {
              if (this.textAlign !== "justify" && (i2 === len - 1 || this.isEndOfWrapping(i2))) {
                continue;
              }
              accumulatedSpace = 0;
              line = this._textLines[i2];
              currentLineWidth = this.getLineWidth(i2);
              if (currentLineWidth < this.width && (spaces = this.textLines[i2].match(this._reSpacesAndTabs))) {
                numberOfSpaces = spaces.length;
                diffSpace = (this.width - currentLineWidth) / numberOfSpaces;
                for (var j2 = 0, jlen = line.length; j2 <= jlen; j2++) {
                  charBound = this.__charBounds[i2][j2];
                  if (this._reSpaceAndTab.test(line[j2])) {
                    charBound.width += diffSpace;
                    charBound.kernedWidth += diffSpace;
                    charBound.left += accumulatedSpace;
                    accumulatedSpace += diffSpace;
                  } else {
                    charBound.left += accumulatedSpace;
                  }
                }
              }
            }
          },
          /**
           * Detect if the text line is ended with an hard break
           * text and itext do not have wrapping, return false
           * @return {Boolean}
           */
          isEndOfWrapping: function(lineIndex) {
            return lineIndex === this._textLines.length - 1;
          },
          /**
           * Detect if a line has a linebreak and so we need to account for it when moving
           * and counting style.
           * It return always for text and Itext.
           * @return Number
           */
          missingNewlineOffset: function() {
            return 1;
          },
          /**
           * Returns string representation of an instance
           * @return {String} String representation of text object
           */
          toString: function() {
            return "#<fabric.Text (" + this.complexity() + '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
          },
          /**
           * Return the dimension and the zoom level needed to create a cache canvas
           * big enough to host the object to be cached.
           * @private
           * @param {Object} dim.x width of object to be cached
           * @param {Object} dim.y height of object to be cached
           * @return {Object}.width width of canvas
           * @return {Object}.height height of canvas
           * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
           * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
           */
          _getCacheCanvasDimensions: function() {
            var dims = this.callSuper("_getCacheCanvasDimensions");
            var fontSize = this.fontSize;
            dims.width += fontSize * dims.zoomX;
            dims.height += fontSize * dims.zoomY;
            return dims;
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            var path = this.path;
            path && !path.isNotVisible() && path._render(ctx);
            this._setTextStyles(ctx);
            this._renderTextLinesBackground(ctx);
            this._renderTextDecoration(ctx, "underline");
            this._renderText(ctx);
            this._renderTextDecoration(ctx, "overline");
            this._renderTextDecoration(ctx, "linethrough");
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderText: function(ctx) {
            if (this.paintFirst === "stroke") {
              this._renderTextStroke(ctx);
              this._renderTextFill(ctx);
            } else {
              this._renderTextFill(ctx);
              this._renderTextStroke(ctx);
            }
          },
          /**
           * Set the font parameter of the context with the object properties or with charStyle
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {Object} [charStyle] object with font style properties
           * @param {String} [charStyle.fontFamily] Font Family
           * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )
           * @param {String} [charStyle.fontWeight] Font weight
           * @param {String} [charStyle.fontStyle] Font style (italic|normal)
           */
          _setTextStyles: function(ctx, charStyle, forMeasuring) {
            ctx.textBaseline = "alphabetic";
            ctx.font = this._getFontDeclaration(charStyle, forMeasuring);
          },
          /**
           * calculate and return the text Width measuring each line.
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @return {Number} Maximum width of fabric.Text object
           */
          calcTextWidth: function() {
            var maxWidth = this.getLineWidth(0);
            for (var i2 = 1, len = this._textLines.length; i2 < len; i2++) {
              var currentLineWidth = this.getLineWidth(i2);
              if (currentLineWidth > maxWidth) {
                maxWidth = currentLineWidth;
              }
            }
            return maxWidth;
          },
          /**
           * @private
           * @param {String} method Method name ("fillText" or "strokeText")
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {String} line Text to render
           * @param {Number} left Left position of text
           * @param {Number} top Top position of text
           * @param {Number} lineIndex Index of a line in a text
           */
          _renderTextLine: function(method, ctx, line, left, top, lineIndex) {
            this._renderChars(method, ctx, line, left, top, lineIndex);
          },
          /**
           * Renders the text background for lines, taking care of style
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderTextLinesBackground: function(ctx) {
            if (!this.textBackgroundColor && !this.styleHas("textBackgroundColor")) {
              return;
            }
            var heightOfLine, lineLeftOffset, originalFill = ctx.fillStyle, line, lastColor, leftOffset = this._getLeftOffset(), lineTopOffset = this._getTopOffset(), boxStart = 0, boxWidth = 0, charBox, currentColor, path = this.path, drawStart;
            for (var i2 = 0, len = this._textLines.length; i2 < len; i2++) {
              heightOfLine = this.getHeightOfLine(i2);
              if (!this.textBackgroundColor && !this.styleHas("textBackgroundColor", i2)) {
                lineTopOffset += heightOfLine;
                continue;
              }
              line = this._textLines[i2];
              lineLeftOffset = this._getLineLeftOffset(i2);
              boxWidth = 0;
              boxStart = 0;
              lastColor = this.getValueOfPropertyAt(i2, 0, "textBackgroundColor");
              for (var j2 = 0, jlen = line.length; j2 < jlen; j2++) {
                charBox = this.__charBounds[i2][j2];
                currentColor = this.getValueOfPropertyAt(i2, j2, "textBackgroundColor");
                if (path) {
                  ctx.save();
                  ctx.translate(charBox.renderLeft, charBox.renderTop);
                  ctx.rotate(charBox.angle);
                  ctx.fillStyle = currentColor;
                  currentColor && ctx.fillRect(
                    -charBox.width / 2,
                    -heightOfLine / this.lineHeight * (1 - this._fontSizeFraction),
                    charBox.width,
                    heightOfLine / this.lineHeight
                  );
                  ctx.restore();
                } else if (currentColor !== lastColor) {
                  drawStart = leftOffset + lineLeftOffset + boxStart;
                  if (this.direction === "rtl") {
                    drawStart = this.width - drawStart - boxWidth;
                  }
                  ctx.fillStyle = lastColor;
                  lastColor && ctx.fillRect(
                    drawStart,
                    lineTopOffset,
                    boxWidth,
                    heightOfLine / this.lineHeight
                  );
                  boxStart = charBox.left;
                  boxWidth = charBox.width;
                  lastColor = currentColor;
                } else {
                  boxWidth += charBox.kernedWidth;
                }
              }
              if (currentColor && !path) {
                drawStart = leftOffset + lineLeftOffset + boxStart;
                if (this.direction === "rtl") {
                  drawStart = this.width - drawStart - boxWidth;
                }
                ctx.fillStyle = currentColor;
                ctx.fillRect(
                  drawStart,
                  lineTopOffset,
                  boxWidth,
                  heightOfLine / this.lineHeight
                );
              }
              lineTopOffset += heightOfLine;
            }
            ctx.fillStyle = originalFill;
            this._removeShadow(ctx);
          },
          /**
           * @private
           * @param {Object} decl style declaration for cache
           * @param {String} decl.fontFamily fontFamily
           * @param {String} decl.fontStyle fontStyle
           * @param {String} decl.fontWeight fontWeight
           * @return {Object} reference to cache
           */
          getFontCache: function(decl) {
            var fontFamily = decl.fontFamily.toLowerCase();
            if (!fabric2.charWidthsCache[fontFamily]) {
              fabric2.charWidthsCache[fontFamily] = {};
            }
            var cache = fabric2.charWidthsCache[fontFamily], cacheProp = decl.fontStyle.toLowerCase() + "_" + (decl.fontWeight + "").toLowerCase();
            if (!cache[cacheProp]) {
              cache[cacheProp] = {};
            }
            return cache[cacheProp];
          },
          /**
           * measure and return the width of a single character.
           * possibly overridden to accommodate different measure logic or
           * to hook some external lib for character measurement
           * @private
           * @param {String} _char, char to be measured
           * @param {Object} charStyle style of char to be measured
           * @param {String} [previousChar] previous char
           * @param {Object} [prevCharStyle] style of previous char
           */
          _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {
            var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle), previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char, stylesAreEqual = fontDeclaration === previousFontDeclaration, width, coupleWidth, previousWidth, fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;
            if (previousChar && fontCache[previousChar] !== void 0) {
              previousWidth = fontCache[previousChar];
            }
            if (fontCache[_char] !== void 0) {
              kernedWidth = width = fontCache[_char];
            }
            if (stylesAreEqual && fontCache[couple] !== void 0) {
              coupleWidth = fontCache[couple];
              kernedWidth = coupleWidth - previousWidth;
            }
            if (width === void 0 || previousWidth === void 0 || coupleWidth === void 0) {
              var ctx = this.getMeasuringContext();
              this._setTextStyles(ctx, charStyle, true);
            }
            if (width === void 0) {
              kernedWidth = width = ctx.measureText(_char).width;
              fontCache[_char] = width;
            }
            if (previousWidth === void 0 && stylesAreEqual && previousChar) {
              previousWidth = ctx.measureText(previousChar).width;
              fontCache[previousChar] = previousWidth;
            }
            if (stylesAreEqual && coupleWidth === void 0) {
              coupleWidth = ctx.measureText(couple).width;
              fontCache[couple] = coupleWidth;
              kernedWidth = coupleWidth - previousWidth;
            }
            return { width: width * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };
          },
          /**
           * Computes height of character at given position
           * @param {Number} line the line index number
           * @param {Number} _char the character index number
           * @return {Number} fontSize of the character
           */
          getHeightOfChar: function(line, _char) {
            return this.getValueOfPropertyAt(line, _char, "fontSize");
          },
          /**
           * measure a text line measuring all characters.
           * @param {Number} lineIndex line number
           * @return {Number} Line width
           */
          measureLine: function(lineIndex) {
            var lineInfo = this._measureLine(lineIndex);
            if (this.charSpacing !== 0) {
              lineInfo.width -= this._getWidthOfCharSpacing();
            }
            if (lineInfo.width < 0) {
              lineInfo.width = 0;
            }
            return lineInfo;
          },
          /**
           * measure every grapheme of a line, populating __charBounds
           * @param {Number} lineIndex
           * @return {Object} object.width total width of characters
           * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs
           */
          _measureLine: function(lineIndex) {
            var width = 0, i2, grapheme, line = this._textLines[lineIndex], prevGrapheme, graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line.length), positionInPath = 0, startingPoint, totalPathLength, path = this.path, reverse = this.pathSide === "right";
            this.__charBounds[lineIndex] = lineBounds;
            for (i2 = 0; i2 < line.length; i2++) {
              grapheme = line[i2];
              graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i2, prevGrapheme);
              lineBounds[i2] = graphemeInfo;
              width += graphemeInfo.kernedWidth;
              prevGrapheme = grapheme;
            }
            lineBounds[i2] = {
              left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,
              width: 0,
              kernedWidth: 0,
              height: this.fontSize
            };
            if (path) {
              totalPathLength = path.segmentsInfo[path.segmentsInfo.length - 1].length;
              startingPoint = fabric2.util.getPointOnPath(path.path, 0, path.segmentsInfo);
              startingPoint.x += path.pathOffset.x;
              startingPoint.y += path.pathOffset.y;
              switch (this.textAlign) {
                case "left":
                  positionInPath = reverse ? totalPathLength - width : 0;
                  break;
                case "center":
                  positionInPath = (totalPathLength - width) / 2;
                  break;
                case "right":
                  positionInPath = reverse ? 0 : totalPathLength - width;
                  break;
              }
              positionInPath += this.pathStartOffset * (reverse ? -1 : 1);
              for (i2 = reverse ? line.length - 1 : 0; reverse ? i2 >= 0 : i2 < line.length; reverse ? i2-- : i2++) {
                graphemeInfo = lineBounds[i2];
                if (positionInPath > totalPathLength) {
                  positionInPath %= totalPathLength;
                } else if (positionInPath < 0) {
                  positionInPath += totalPathLength;
                }
                this._setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint);
                positionInPath += graphemeInfo.kernedWidth;
              }
            }
            return { width, numOfSpaces };
          },
          /**
           * Calculate the angle  and the left,top position of the char that follow a path.
           * It appends it to graphemeInfo to be reused later at rendering
           * @private
           * @param {Number} positionInPath to be measured
           * @param {Object} graphemeInfo current grapheme box information
           * @param {Object} startingPoint position of the point
           */
          _setGraphemeOnPath: function(positionInPath, graphemeInfo, startingPoint) {
            var centerPosition = positionInPath + graphemeInfo.kernedWidth / 2, path = this.path;
            var info = fabric2.util.getPointOnPath(path.path, centerPosition, path.segmentsInfo);
            graphemeInfo.renderLeft = info.x - startingPoint.x;
            graphemeInfo.renderTop = info.y - startingPoint.y;
            graphemeInfo.angle = info.angle + (this.pathSide === "right" ? Math.PI : 0);
          },
          /**
           * Measure and return the info of a single grapheme.
           * needs the the info of previous graphemes already filled
           * @private
           * @param {String} grapheme to be measured
           * @param {Number} lineIndex index of the line where the char is
           * @param {Number} charIndex position in the line
           * @param {String} [prevGrapheme] character preceding the one to be measured
           */
          _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {
            var style = this.getCompleteStyleDeclaration(lineIndex, charIndex), prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : {}, info = this._measureChar(grapheme, style, prevGrapheme, prevStyle), kernedWidth = info.kernedWidth, width = info.width, charSpacing;
            if (this.charSpacing !== 0) {
              charSpacing = this._getWidthOfCharSpacing();
              width += charSpacing;
              kernedWidth += charSpacing;
            }
            var box = {
              width,
              left: 0,
              height: style.fontSize,
              kernedWidth,
              deltaY: style.deltaY
            };
            if (charIndex > 0 && !skipLeft) {
              var previousBox = this.__charBounds[lineIndex][charIndex - 1];
              box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;
            }
            return box;
          },
          /**
           * Calculate height of line at 'lineIndex'
           * @param {Number} lineIndex index of line to calculate
           * @return {Number}
           */
          getHeightOfLine: function(lineIndex) {
            if (this.__lineHeights[lineIndex]) {
              return this.__lineHeights[lineIndex];
            }
            var line = this._textLines[lineIndex], maxHeight = this.getHeightOfChar(lineIndex, 0);
            for (var i2 = 1, len = line.length; i2 < len; i2++) {
              maxHeight = Math.max(this.getHeightOfChar(lineIndex, i2), maxHeight);
            }
            return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;
          },
          /**
           * Calculate text box height
           */
          calcTextHeight: function() {
            var lineHeight, height = 0;
            for (var i2 = 0, len = this._textLines.length; i2 < len; i2++) {
              lineHeight = this.getHeightOfLine(i2);
              height += i2 === len - 1 ? lineHeight / this.lineHeight : lineHeight;
            }
            return height;
          },
          /**
           * @private
           * @return {Number} Left offset
           */
          _getLeftOffset: function() {
            return this.direction === "ltr" ? -this.width / 2 : this.width / 2;
          },
          /**
           * @private
           * @return {Number} Top offset
           */
          _getTopOffset: function() {
            return -this.height / 2;
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {String} method Method name ("fillText" or "strokeText")
           */
          _renderTextCommon: function(ctx, method) {
            ctx.save();
            var lineHeights = 0, left = this._getLeftOffset(), top = this._getTopOffset();
            for (var i2 = 0, len = this._textLines.length; i2 < len; i2++) {
              var heightOfLine = this.getHeightOfLine(i2), maxHeight = heightOfLine / this.lineHeight, leftOffset = this._getLineLeftOffset(i2);
              this._renderTextLine(
                method,
                ctx,
                this._textLines[i2],
                left + leftOffset,
                top + lineHeights + maxHeight,
                i2
              );
              lineHeights += heightOfLine;
            }
            ctx.restore();
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderTextFill: function(ctx) {
            if (!this.fill && !this.styleHas("fill")) {
              return;
            }
            this._renderTextCommon(ctx, "fillText");
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderTextStroke: function(ctx) {
            if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {
              return;
            }
            if (this.shadow && !this.shadow.affectStroke) {
              this._removeShadow(ctx);
            }
            ctx.save();
            this._setLineDash(ctx, this.strokeDashArray);
            ctx.beginPath();
            this._renderTextCommon(ctx, "strokeText");
            ctx.closePath();
            ctx.restore();
          },
          /**
           * @private
           * @param {String} method fillText or strokeText.
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {Array} line Content of the line, splitted in an array by grapheme
           * @param {Number} left
           * @param {Number} top
           * @param {Number} lineIndex
           */
          _renderChars: function(method, ctx, line, left, top, lineIndex) {
            var lineHeight = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf("justify") !== -1, actualStyle, nextStyle, charsToRender = "", charBox, boxWidth = 0, timeToRender, path = this.path, shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex) && !path, isLtr = this.direction === "ltr", sign = this.direction === "ltr" ? 1 : -1, drawingLeft;
            ctx.save();
            top -= lineHeight * this._fontSizeFraction / this.lineHeight;
            if (shortCut) {
              ctx.canvas.setAttribute("dir", isLtr ? "ltr" : "rtl");
              ctx.direction = isLtr ? "ltr" : "rtl";
              ctx.textAlign = isLtr ? "left" : "right";
              this._renderChar(method, ctx, lineIndex, 0, line.join(""), left, top, lineHeight);
              ctx.restore();
              return;
            }
            for (var i2 = 0, len = line.length - 1; i2 <= len; i2++) {
              timeToRender = i2 === len || this.charSpacing || path;
              charsToRender += line[i2];
              charBox = this.__charBounds[lineIndex][i2];
              if (boxWidth === 0) {
                left += sign * (charBox.kernedWidth - charBox.width);
                boxWidth += charBox.width;
              } else {
                boxWidth += charBox.kernedWidth;
              }
              if (isJustify && !timeToRender) {
                if (this._reSpaceAndTab.test(line[i2])) {
                  timeToRender = true;
                }
              }
              if (!timeToRender) {
                actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i2);
                nextStyle = this.getCompleteStyleDeclaration(lineIndex, i2 + 1);
                timeToRender = this._hasStyleChanged(actualStyle, nextStyle);
              }
              if (timeToRender) {
                if (path) {
                  ctx.save();
                  ctx.translate(charBox.renderLeft, charBox.renderTop);
                  ctx.rotate(charBox.angle);
                  this._renderChar(method, ctx, lineIndex, i2, charsToRender, -boxWidth / 2, 0, lineHeight);
                  ctx.restore();
                } else {
                  drawingLeft = left;
                  ctx.canvas.setAttribute("dir", isLtr ? "ltr" : "rtl");
                  ctx.direction = isLtr ? "ltr" : "rtl";
                  ctx.textAlign = isLtr ? "left" : "right";
                  this._renderChar(method, ctx, lineIndex, i2, charsToRender, drawingLeft, top, lineHeight);
                }
                charsToRender = "";
                actualStyle = nextStyle;
                left += sign * boxWidth;
                boxWidth = 0;
              }
            }
            ctx.restore();
          },
          /**
           * This function try to patch the missing gradientTransform on canvas gradients.
           * transforming a context to transform the gradient, is going to transform the stroke too.
           * we want to transform the gradient but not the stroke operation, so we create
           * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
           * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size
           * is limited.
           * @private
           * @param {fabric.Gradient} filler a fabric gradient instance
           * @return {CanvasPattern} a pattern to use as fill/stroke style
           */
          _applyPatternGradientTransformText: function(filler) {
            var pCanvas = fabric2.util.createCanvasElement(), pCtx, width = this.width + this.strokeWidth, height = this.height + this.strokeWidth;
            pCanvas.width = width;
            pCanvas.height = height;
            pCtx = pCanvas.getContext("2d");
            pCtx.beginPath();
            pCtx.moveTo(0, 0);
            pCtx.lineTo(width, 0);
            pCtx.lineTo(width, height);
            pCtx.lineTo(0, height);
            pCtx.closePath();
            pCtx.translate(width / 2, height / 2);
            pCtx.fillStyle = filler.toLive(pCtx);
            this._applyPatternGradientTransform(pCtx, filler);
            pCtx.fill();
            return pCtx.createPattern(pCanvas, "no-repeat");
          },
          handleFiller: function(ctx, property, filler) {
            var offsetX, offsetY;
            if (filler.toLive) {
              if (filler.gradientUnits === "percentage" || filler.gradientTransform || filler.patternTransform) {
                offsetX = -this.width / 2;
                offsetY = -this.height / 2;
                ctx.translate(offsetX, offsetY);
                ctx[property] = this._applyPatternGradientTransformText(filler);
                return { offsetX, offsetY };
              } else {
                ctx[property] = filler.toLive(ctx, this);
                return this._applyPatternGradientTransform(ctx, filler);
              }
            } else {
              ctx[property] = filler;
            }
            return { offsetX: 0, offsetY: 0 };
          },
          _setStrokeStyles: function(ctx, decl) {
            ctx.lineWidth = decl.strokeWidth;
            ctx.lineCap = this.strokeLineCap;
            ctx.lineDashOffset = this.strokeDashOffset;
            ctx.lineJoin = this.strokeLineJoin;
            ctx.miterLimit = this.strokeMiterLimit;
            return this.handleFiller(ctx, "strokeStyle", decl.stroke);
          },
          _setFillStyles: function(ctx, decl) {
            return this.handleFiller(ctx, "fillStyle", decl.fill);
          },
          /**
           * @private
           * @param {String} method
           * @param {CanvasRenderingContext2D} ctx Context to render on
           * @param {Number} lineIndex
           * @param {Number} charIndex
           * @param {String} _char
           * @param {Number} left Left coordinate
           * @param {Number} top Top coordinate
           * @param {Number} lineHeight Height of the line
           */
          _renderChar: function(method, ctx, lineIndex, charIndex, _char, left, top) {
            var decl = this._getStyleDeclaration(lineIndex, charIndex), fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex), shouldFill = method === "fillText" && fullDecl.fill, shouldStroke = method === "strokeText" && fullDecl.stroke && fullDecl.strokeWidth, fillOffsets, strokeOffsets;
            if (!shouldStroke && !shouldFill) {
              return;
            }
            ctx.save();
            shouldFill && (fillOffsets = this._setFillStyles(ctx, fullDecl));
            shouldStroke && (strokeOffsets = this._setStrokeStyles(ctx, fullDecl));
            ctx.font = this._getFontDeclaration(fullDecl);
            if (decl && decl.textBackgroundColor) {
              this._removeShadow(ctx);
            }
            if (decl && decl.deltaY) {
              top += decl.deltaY;
            }
            shouldFill && ctx.fillText(_char, left - fillOffsets.offsetX, top - fillOffsets.offsetY);
            shouldStroke && ctx.strokeText(_char, left - strokeOffsets.offsetX, top - strokeOffsets.offsetY);
            ctx.restore();
          },
          /**
           * Turns the character into a 'superior figure' (i.e. 'superscript')
           * @param {Number} start selection start
           * @param {Number} end selection end
           * @returns {fabric.Text} thisArg
           * @chainable
           */
          setSuperscript: function(start, end) {
            return this._setScript(start, end, this.superscript);
          },
          /**
           * Turns the character into an 'inferior figure' (i.e. 'subscript')
           * @param {Number} start selection start
           * @param {Number} end selection end
           * @returns {fabric.Text} thisArg
           * @chainable
           */
          setSubscript: function(start, end) {
            return this._setScript(start, end, this.subscript);
          },
          /**
           * Applies 'schema' at given position
           * @private
           * @param {Number} start selection start
           * @param {Number} end selection end
           * @param {Number} schema
           * @returns {fabric.Text} thisArg
           * @chainable
           */
          _setScript: function(start, end, schema) {
            var loc = this.get2DCursorLocation(start, true), fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, "fontSize"), dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, "deltaY"), style = { fontSize: fontSize * schema.size, deltaY: dy + fontSize * schema.baseline };
            this.setSelectionStyles(style, start, end);
            return this;
          },
          /**
           * @private
           * @param {Object} prevStyle
           * @param {Object} thisStyle
           */
          _hasStyleChanged: function(prevStyle, thisStyle) {
            return prevStyle.fill !== thisStyle.fill || prevStyle.stroke !== thisStyle.stroke || prevStyle.strokeWidth !== thisStyle.strokeWidth || prevStyle.fontSize !== thisStyle.fontSize || prevStyle.fontFamily !== thisStyle.fontFamily || prevStyle.fontWeight !== thisStyle.fontWeight || prevStyle.fontStyle !== thisStyle.fontStyle || prevStyle.deltaY !== thisStyle.deltaY;
          },
          /**
           * @private
           * @param {Object} prevStyle
           * @param {Object} thisStyle
           */
          _hasStyleChangedForSvg: function(prevStyle, thisStyle) {
            return this._hasStyleChanged(prevStyle, thisStyle) || prevStyle.overline !== thisStyle.overline || prevStyle.underline !== thisStyle.underline || prevStyle.linethrough !== thisStyle.linethrough;
          },
          /**
           * @private
           * @param {Number} lineIndex index text line
           * @return {Number} Line left offset
           */
          _getLineLeftOffset: function(lineIndex) {
            var lineWidth = this.getLineWidth(lineIndex), lineDiff = this.width - lineWidth, textAlign = this.textAlign, direction = this.direction, isEndOfWrapping, leftOffset = 0, isEndOfWrapping = this.isEndOfWrapping(lineIndex);
            if (textAlign === "justify" || textAlign === "justify-center" && !isEndOfWrapping || textAlign === "justify-right" && !isEndOfWrapping || textAlign === "justify-left" && !isEndOfWrapping) {
              return 0;
            }
            if (textAlign === "center") {
              leftOffset = lineDiff / 2;
            }
            if (textAlign === "right") {
              leftOffset = lineDiff;
            }
            if (textAlign === "justify-center") {
              leftOffset = lineDiff / 2;
            }
            if (textAlign === "justify-right") {
              leftOffset = lineDiff;
            }
            if (direction === "rtl") {
              leftOffset -= lineDiff;
            }
            return leftOffset;
          },
          /**
           * @private
           */
          _clearCache: function() {
            this.__lineWidths = [];
            this.__lineHeights = [];
            this.__charBounds = [];
          },
          /**
           * @private
           */
          _shouldClearDimensionCache: function() {
            var shouldClear = this._forceClearCache;
            shouldClear || (shouldClear = this.hasStateChanged("_dimensionAffectingProps"));
            if (shouldClear) {
              this.dirty = true;
              this._forceClearCache = false;
            }
            return shouldClear;
          },
          /**
           * Measure a single line given its index. Used to calculate the initial
           * text bounding box. The values are calculated and stored in __lineWidths cache.
           * @private
           * @param {Number} lineIndex line number
           * @return {Number} Line width
           */
          getLineWidth: function(lineIndex) {
            if (this.__lineWidths[lineIndex]) {
              return this.__lineWidths[lineIndex];
            }
            var width, line = this._textLines[lineIndex], lineInfo;
            if (line === "") {
              width = 0;
            } else {
              lineInfo = this.measureLine(lineIndex);
              width = lineInfo.width;
            }
            this.__lineWidths[lineIndex] = width;
            return width;
          },
          _getWidthOfCharSpacing: function() {
            if (this.charSpacing !== 0) {
              return this.fontSize * this.charSpacing / 1e3;
            }
            return 0;
          },
          /**
           * Retrieves the value of property at given character position
           * @param {Number} lineIndex the line number
           * @param {Number} charIndex the character number
           * @param {String} property the property name
           * @returns the value of 'property'
           */
          getValueOfPropertyAt: function(lineIndex, charIndex, property) {
            var charStyle = this._getStyleDeclaration(lineIndex, charIndex);
            if (charStyle && typeof charStyle[property] !== "undefined") {
              return charStyle[property];
            }
            return this[property];
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _renderTextDecoration: function(ctx, type) {
            if (!this[type] && !this.styleHas(type)) {
              return;
            }
            var heightOfLine, size, _size, lineLeftOffset, dy, _dy, line, lastDecoration, leftOffset = this._getLeftOffset(), topOffset = this._getTopOffset(), top, boxStart, boxWidth, charBox, currentDecoration, maxHeight, currentFill, lastFill, path = this.path, charSpacing = this._getWidthOfCharSpacing(), offsetY = this.offsets[type];
            for (var i2 = 0, len = this._textLines.length; i2 < len; i2++) {
              heightOfLine = this.getHeightOfLine(i2);
              if (!this[type] && !this.styleHas(type, i2)) {
                topOffset += heightOfLine;
                continue;
              }
              line = this._textLines[i2];
              maxHeight = heightOfLine / this.lineHeight;
              lineLeftOffset = this._getLineLeftOffset(i2);
              boxStart = 0;
              boxWidth = 0;
              lastDecoration = this.getValueOfPropertyAt(i2, 0, type);
              lastFill = this.getValueOfPropertyAt(i2, 0, "fill");
              top = topOffset + maxHeight * (1 - this._fontSizeFraction);
              size = this.getHeightOfChar(i2, 0);
              dy = this.getValueOfPropertyAt(i2, 0, "deltaY");
              for (var j2 = 0, jlen = line.length; j2 < jlen; j2++) {
                charBox = this.__charBounds[i2][j2];
                currentDecoration = this.getValueOfPropertyAt(i2, j2, type);
                currentFill = this.getValueOfPropertyAt(i2, j2, "fill");
                _size = this.getHeightOfChar(i2, j2);
                _dy = this.getValueOfPropertyAt(i2, j2, "deltaY");
                if (path && currentDecoration && currentFill) {
                  ctx.save();
                  ctx.fillStyle = lastFill;
                  ctx.translate(charBox.renderLeft, charBox.renderTop);
                  ctx.rotate(charBox.angle);
                  ctx.fillRect(
                    -charBox.kernedWidth / 2,
                    offsetY * _size + _dy,
                    charBox.kernedWidth,
                    this.fontSize / 15
                  );
                  ctx.restore();
                } else if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) && boxWidth > 0) {
                  var drawStart = leftOffset + lineLeftOffset + boxStart;
                  if (this.direction === "rtl") {
                    drawStart = this.width - drawStart - boxWidth;
                  }
                  if (lastDecoration && lastFill) {
                    ctx.fillStyle = lastFill;
                    ctx.fillRect(
                      drawStart,
                      top + offsetY * size + dy,
                      boxWidth,
                      this.fontSize / 15
                    );
                  }
                  boxStart = charBox.left;
                  boxWidth = charBox.width;
                  lastDecoration = currentDecoration;
                  lastFill = currentFill;
                  size = _size;
                  dy = _dy;
                } else {
                  boxWidth += charBox.kernedWidth;
                }
              }
              var drawStart = leftOffset + lineLeftOffset + boxStart;
              if (this.direction === "rtl") {
                drawStart = this.width - drawStart - boxWidth;
              }
              ctx.fillStyle = currentFill;
              currentDecoration && currentFill && ctx.fillRect(
                drawStart,
                top + offsetY * size + dy,
                boxWidth - charSpacing,
                this.fontSize / 15
              );
              topOffset += heightOfLine;
            }
            this._removeShadow(ctx);
          },
          /**
           * return font declaration string for canvas context
           * @param {Object} [styleObject] object
           * @returns {String} font declaration formatted for canvas context.
           */
          _getFontDeclaration: function(styleObject, forMeasuring) {
            var style = styleObject || this, family = this.fontFamily, fontIsGeneric = fabric2.Text.genericFonts.indexOf(family.toLowerCase()) > -1;
            var fontFamily = family === void 0 || family.indexOf("'") > -1 || family.indexOf(",") > -1 || family.indexOf('"') > -1 || fontIsGeneric ? style.fontFamily : '"' + style.fontFamily + '"';
            return [
              // node-canvas needs "weight style", while browsers need "style weight"
              // verify if this can be fixed in JSDOM
              fabric2.isLikelyNode ? style.fontWeight : style.fontStyle,
              fabric2.isLikelyNode ? style.fontStyle : style.fontWeight,
              forMeasuring ? this.CACHE_FONT_SIZE + "px" : style.fontSize + "px",
              fontFamily
            ].join(" ");
          },
          /**
           * Renders text instance on a specified context
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          render: function(ctx) {
            if (!this.visible) {
              return;
            }
            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
              return;
            }
            if (this._shouldClearDimensionCache()) {
              this.initDimensions();
            }
            this.callSuper("render", ctx);
          },
          /**
           * Returns the text as an array of lines.
           * @param {String} text text to split
           * @returns {Array} Lines in the text
           */
          _splitTextIntoLines: function(text) {
            var lines = text.split(this._reNewline), newLines = new Array(lines.length), newLine = ["\n"], newText = [];
            for (var i2 = 0; i2 < lines.length; i2++) {
              newLines[i2] = fabric2.util.string.graphemeSplit(lines[i2]);
              newText = newText.concat(newLines[i2], newLine);
            }
            newText.pop();
            return { _unwrappedLines: newLines, lines, graphemeText: newText, graphemeLines: newLines };
          },
          /**
           * Returns object representation of an instance
           * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
           * @return {Object} Object representation of an instance
           */
          toObject: function(propertiesToInclude) {
            var allProperties = additionalProps.concat(propertiesToInclude);
            var obj = this.callSuper("toObject", allProperties);
            obj.styles = clone(this.styles, true);
            if (obj.path) {
              obj.path = this.path.toObject();
            }
            return obj;
          },
          /**
           * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
           * @param {String|Object} key Property name or object (if object, iterate over the object properties)
           * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
           * @return {fabric.Object} thisArg
           * @chainable
           */
          set: function(key, value) {
            this.callSuper("set", key, value);
            var needsDims = false;
            var isAddingPath = false;
            if (typeof key === "object") {
              for (var _key in key) {
                if (_key === "path") {
                  this.setPathInfo();
                }
                needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;
                isAddingPath = isAddingPath || _key === "path";
              }
            } else {
              needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;
              isAddingPath = key === "path";
            }
            if (isAddingPath) {
              this.setPathInfo();
            }
            if (needsDims) {
              this.initDimensions();
              this.setCoords();
            }
            return this;
          },
          /**
           * Returns complexity of an instance
           * @return {Number} complexity
           */
          complexity: function() {
            return 1;
          }
        }
      );
      fabric2.Text.ATTRIBUTE_NAMES = fabric2.SHARED_ATTRIBUTES.concat(
        "x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" ")
      );
      fabric2.Text.DEFAULT_SVG_FONT_SIZE = 16;
      fabric2.Text.fromElement = function(element, callback, options) {
        if (!element) {
          return callback(null);
        }
        var parsedAttributes = fabric2.parseAttributes(element, fabric2.Text.ATTRIBUTE_NAMES), parsedAnchor = parsedAttributes.textAnchor || "left";
        options = fabric2.util.object.extend(options ? clone(options) : {}, parsedAttributes);
        options.top = options.top || 0;
        options.left = options.left || 0;
        if (parsedAttributes.textDecoration) {
          var textDecoration = parsedAttributes.textDecoration;
          if (textDecoration.indexOf("underline") !== -1) {
            options.underline = true;
          }
          if (textDecoration.indexOf("overline") !== -1) {
            options.overline = true;
          }
          if (textDecoration.indexOf("line-through") !== -1) {
            options.linethrough = true;
          }
          delete options.textDecoration;
        }
        if ("dx" in parsedAttributes) {
          options.left += parsedAttributes.dx;
        }
        if ("dy" in parsedAttributes) {
          options.top += parsedAttributes.dy;
        }
        if (!("fontSize" in options)) {
          options.fontSize = fabric2.Text.DEFAULT_SVG_FONT_SIZE;
        }
        var textContent = "";
        if (!("textContent" in element)) {
          if ("firstChild" in element && element.firstChild !== null) {
            if ("data" in element.firstChild && element.firstChild.data !== null) {
              textContent = element.firstChild.data;
            }
          }
        } else {
          textContent = element.textContent;
        }
        textContent = textContent.replace(/^\s+|\s+$|\n+/g, "").replace(/\s+/g, " ");
        var originalStrokeWidth = options.strokeWidth;
        options.strokeWidth = 0;
        var text = new fabric2.Text(textContent, options), textHeightScaleFactor = text.getScaledHeight() / text.height, lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height, scaledDiff = lineHeightDiff * textHeightScaleFactor, textHeight = text.getScaledHeight() + scaledDiff, offX = 0;
        if (parsedAnchor === "center") {
          offX = text.getScaledWidth() / 2;
        }
        if (parsedAnchor === "right") {
          offX = text.getScaledWidth();
        }
        text.set({
          left: text.left - offX,
          top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,
          strokeWidth: typeof originalStrokeWidth !== "undefined" ? originalStrokeWidth : 1
        });
        callback(text);
      };
      fabric2.Text.fromObject = function(object, callback) {
        var objectCopy = clone(object), path = object.path;
        delete objectCopy.path;
        return fabric2.Object._fromObject("Text", objectCopy, function(textInstance) {
          if (path) {
            fabric2.Object._fromObject("Path", path, function(pathInstance) {
              textInstance.set("path", pathInstance);
              callback(textInstance);
            }, "path");
          } else {
            callback(textInstance);
          }
        }, "text");
      };
      fabric2.Text.genericFonts = ["sans-serif", "serif", "cursive", "fantasy", "monospace"];
      fabric2.util.createAccessors && fabric2.util.createAccessors(fabric2.Text);
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      fabric.util.object.extend(
        fabric.Text.prototype,
        /** @lends fabric.Text.prototype */
        {
          /**
           * Returns true if object has no styling or no styling in a line
           * @param {Number} lineIndex , lineIndex is on wrapped lines.
           * @return {Boolean}
           */
          isEmptyStyles: function(lineIndex) {
            if (!this.styles) {
              return true;
            }
            if (typeof lineIndex !== "undefined" && !this.styles[lineIndex]) {
              return true;
            }
            var obj = typeof lineIndex === "undefined" ? this.styles : { line: this.styles[lineIndex] };
            for (var p1 in obj) {
              for (var p2 in obj[p1]) {
                for (var p3 in obj[p1][p2]) {
                  return false;
                }
              }
            }
            return true;
          },
          /**
           * Returns true if object has a style property or has it ina specified line
           * This function is used to detect if a text will use a particular property or not.
           * @param {String} property to check for
           * @param {Number} lineIndex to check the style on
           * @return {Boolean}
           */
          styleHas: function(property, lineIndex) {
            if (!this.styles || !property || property === "") {
              return false;
            }
            if (typeof lineIndex !== "undefined" && !this.styles[lineIndex]) {
              return false;
            }
            var obj = typeof lineIndex === "undefined" ? this.styles : { 0: this.styles[lineIndex] };
            for (var p1 in obj) {
              for (var p2 in obj[p1]) {
                if (typeof obj[p1][p2][property] !== "undefined") {
                  return true;
                }
              }
            }
            return false;
          },
          /**
           * Check if characters in a text have a value for a property
           * whose value matches the textbox's value for that property.  If so,
           * the character-level property is deleted.  If the character
           * has no other properties, then it is also deleted.  Finally,
           * if the line containing that character has no other characters
           * then it also is deleted.
           *
           * @param {string} property The property to compare between characters and text.
           */
          cleanStyle: function(property) {
            if (!this.styles || !property || property === "") {
              return false;
            }
            var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue, allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;
            for (var p1 in obj) {
              letterCount = 0;
              for (var p2 in obj[p1]) {
                var styleObject = obj[p1][p2], stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);
                stylesCount++;
                if (stylePropertyHasBeenSet) {
                  if (!stylePropertyValue) {
                    stylePropertyValue = styleObject[property];
                  } else if (styleObject[property] !== stylePropertyValue) {
                    allStyleObjectPropertiesMatch = false;
                  }
                  if (styleObject[property] === this[property]) {
                    delete styleObject[property];
                  }
                } else {
                  allStyleObjectPropertiesMatch = false;
                }
                if (Object.keys(styleObject).length !== 0) {
                  letterCount++;
                } else {
                  delete obj[p1][p2];
                }
              }
              if (letterCount === 0) {
                delete obj[p1];
              }
            }
            for (var i2 = 0; i2 < this._textLines.length; i2++) {
              graphemeCount += this._textLines[i2].length;
            }
            if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {
              this[property] = stylePropertyValue;
              this.removeStyle(property);
            }
          },
          /**
           * Remove a style property or properties from all individual character styles
           * in a text object.  Deletes the character style object if it contains no other style
           * props.  Deletes a line style object if it contains no other character styles.
           *
           * @param {String} props The property to remove from character styles.
           */
          removeStyle: function(property) {
            if (!this.styles || !property || property === "") {
              return;
            }
            var obj = this.styles, line, lineNum, charNum;
            for (lineNum in obj) {
              line = obj[lineNum];
              for (charNum in line) {
                delete line[charNum][property];
                if (Object.keys(line[charNum]).length === 0) {
                  delete line[charNum];
                }
              }
              if (Object.keys(line).length === 0) {
                delete obj[lineNum];
              }
            }
          },
          /**
           * @private
           */
          _extendStyles: function(index, styles) {
            var loc = this.get2DCursorLocation(index);
            if (!this._getLineStyle(loc.lineIndex)) {
              this._setLineStyle(loc.lineIndex);
            }
            if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {
              this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});
            }
            fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);
          },
          /**
           * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)
           * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
           * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.
           */
          get2DCursorLocation: function(selectionStart, skipWrapping) {
            if (typeof selectionStart === "undefined") {
              selectionStart = this.selectionStart;
            }
            var lines = skipWrapping ? this._unwrappedTextLines : this._textLines, len = lines.length;
            for (var i2 = 0; i2 < len; i2++) {
              if (selectionStart <= lines[i2].length) {
                return {
                  lineIndex: i2,
                  charIndex: selectionStart
                };
              }
              selectionStart -= lines[i2].length + this.missingNewlineOffset(i2);
            }
            return {
              lineIndex: i2 - 1,
              charIndex: lines[i2 - 1].length < selectionStart ? lines[i2 - 1].length : selectionStart
            };
          },
          /**
           * Gets style of a current selection/cursor (at the start position)
           * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.
           * @param {Number} [startIndex] Start index to get styles at
           * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
           * @param {Boolean} [complete] get full style or not
           * @return {Array} styles an array with one, zero or more Style objects
           */
          getSelectionStyles: function(startIndex, endIndex, complete) {
            if (typeof startIndex === "undefined") {
              startIndex = this.selectionStart || 0;
            }
            if (typeof endIndex === "undefined") {
              endIndex = this.selectionEnd || startIndex;
            }
            var styles = [];
            for (var i2 = startIndex; i2 < endIndex; i2++) {
              styles.push(this.getStyleAtPosition(i2, complete));
            }
            return styles;
          },
          /**
           * Gets style of a current selection/cursor position
           * @param {Number} position  to get styles at
           * @param {Boolean} [complete] full style if true
           * @return {Object} style Style object at a specified index
           * @private
           */
          getStyleAtPosition: function(position, complete) {
            var loc = this.get2DCursorLocation(position), style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) : this._getStyleDeclaration(loc.lineIndex, loc.charIndex);
            return style || {};
          },
          /**
           * Sets style of a current selection, if no selection exist, do not set anything.
           * @param {Object} [styles] Styles object
           * @param {Number} [startIndex] Start index to get styles at
           * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
           * @return {fabric.IText} thisArg
           * @chainable
           */
          setSelectionStyles: function(styles, startIndex, endIndex) {
            if (typeof startIndex === "undefined") {
              startIndex = this.selectionStart || 0;
            }
            if (typeof endIndex === "undefined") {
              endIndex = this.selectionEnd || startIndex;
            }
            for (var i2 = startIndex; i2 < endIndex; i2++) {
              this._extendStyles(i2, styles);
            }
            this._forceClearCache = true;
            return this;
          },
          /**
           * get the reference, not a clone, of the style object for a given character
           * @param {Number} lineIndex
           * @param {Number} charIndex
           * @return {Object} style object
           */
          _getStyleDeclaration: function(lineIndex, charIndex) {
            var lineStyle = this.styles && this.styles[lineIndex];
            if (!lineStyle) {
              return null;
            }
            return lineStyle[charIndex];
          },
          /**
           * return a new object that contains all the style property for a character
           * the object returned is newly created
           * @param {Number} lineIndex of the line where the character is
           * @param {Number} charIndex position of the character on the line
           * @return {Object} style object
           */
          getCompleteStyleDeclaration: function(lineIndex, charIndex) {
            var style = this._getStyleDeclaration(lineIndex, charIndex) || {}, styleObject = {}, prop;
            for (var i2 = 0; i2 < this._styleProperties.length; i2++) {
              prop = this._styleProperties[i2];
              styleObject[prop] = typeof style[prop] === "undefined" ? this[prop] : style[prop];
            }
            return styleObject;
          },
          /**
           * @param {Number} lineIndex
           * @param {Number} charIndex
           * @param {Object} style
           * @private
           */
          _setStyleDeclaration: function(lineIndex, charIndex, style) {
            this.styles[lineIndex][charIndex] = style;
          },
          /**
           *
           * @param {Number} lineIndex
           * @param {Number} charIndex
           * @private
           */
          _deleteStyleDeclaration: function(lineIndex, charIndex) {
            delete this.styles[lineIndex][charIndex];
          },
          /**
           * @param {Number} lineIndex
           * @return {Boolean} if the line exists or not
           * @private
           */
          _getLineStyle: function(lineIndex) {
            return !!this.styles[lineIndex];
          },
          /**
           * Set the line style to an empty object so that is initialized
           * @param {Number} lineIndex
           * @private
           */
          _setLineStyle: function(lineIndex) {
            this.styles[lineIndex] = {};
          },
          /**
           * @param {Number} lineIndex
           * @private
           */
          _deleteLineStyle: function(lineIndex) {
            delete this.styles[lineIndex];
          }
        }
      );
    })();
    (function() {
      function parseDecoration(object) {
        if (object.textDecoration) {
          object.textDecoration.indexOf("underline") > -1 && (object.underline = true);
          object.textDecoration.indexOf("line-through") > -1 && (object.linethrough = true);
          object.textDecoration.indexOf("overline") > -1 && (object.overline = true);
          delete object.textDecoration;
        }
      }
      fabric.IText = fabric.util.createClass(
        fabric.Text,
        fabric.Observable,
        /** @lends fabric.IText.prototype */
        {
          /**
           * Type of an object
           * @type String
           * @default
           */
          type: "i-text",
          /**
           * Index where text selection starts (or where cursor is when there is no selection)
           * @type Number
           * @default
           */
          selectionStart: 0,
          /**
           * Index where text selection ends
           * @type Number
           * @default
           */
          selectionEnd: 0,
          /**
           * Color of text selection
           * @type String
           * @default
           */
          selectionColor: "rgba(17,119,255,0.3)",
          /**
           * Indicates whether text is in editing mode
           * @type Boolean
           * @default
           */
          isEditing: false,
          /**
           * Indicates whether a text can be edited
           * @type Boolean
           * @default
           */
          editable: true,
          /**
           * Border color of text object while it's in editing mode
           * @type String
           * @default
           */
          editingBorderColor: "rgba(102,153,255,0.25)",
          /**
           * Width of cursor (in px)
           * @type Number
           * @default
           */
          cursorWidth: 2,
          /**
           * Color of text cursor color in editing mode.
           * if not set (default) will take color from the text.
           * if set to a color value that fabric can understand, it will
           * be used instead of the color of the text at the current position.
           * @type String
           * @default
           */
          cursorColor: "",
          /**
           * Delay between cursor blink (in ms)
           * @type Number
           * @default
           */
          cursorDelay: 1e3,
          /**
           * Duration of cursor fadein (in ms)
           * @type Number
           * @default
           */
          cursorDuration: 600,
          /**
           * Indicates whether internal text char widths can be cached
           * @type Boolean
           * @default
           */
          caching: true,
          /**
           * DOM container to append the hiddenTextarea.
           * An alternative to attaching to the document.body.
           * Useful to reduce laggish redraw of the full document.body tree and
           * also with modals event capturing that won't let the textarea take focus.
           * @type HTMLElement
           * @default
           */
          hiddenTextareaContainer: null,
          /**
           * @private
           */
          _reSpace: /\s|\n/,
          /**
           * @private
           */
          _currentCursorOpacity: 0,
          /**
           * @private
           */
          _selectionDirection: null,
          /**
           * @private
           */
          _abortCursorAnimation: false,
          /**
           * @private
           */
          __widthOfSpace: [],
          /**
           * Helps determining when the text is in composition, so that the cursor
           * rendering is altered.
           */
          inCompositionMode: false,
          /**
           * Constructor
           * @param {String} text Text string
           * @param {Object} [options] Options object
           * @return {fabric.IText} thisArg
           */
          initialize: function(text, options) {
            this.callSuper("initialize", text, options);
            this.initBehavior();
          },
          /**
           * Sets selection start (left boundary of a selection)
           * @param {Number} index Index to set selection start to
           */
          setSelectionStart: function(index) {
            index = Math.max(index, 0);
            this._updateAndFire("selectionStart", index);
          },
          /**
           * Sets selection end (right boundary of a selection)
           * @param {Number} index Index to set selection end to
           */
          setSelectionEnd: function(index) {
            index = Math.min(index, this.text.length);
            this._updateAndFire("selectionEnd", index);
          },
          /**
           * @private
           * @param {String} property 'selectionStart' or 'selectionEnd'
           * @param {Number} index new position of property
           */
          _updateAndFire: function(property, index) {
            if (this[property] !== index) {
              this._fireSelectionChanged();
              this[property] = index;
            }
            this._updateTextarea();
          },
          /**
           * Fires the even of selection changed
           * @private
           */
          _fireSelectionChanged: function() {
            this.fire("selection:changed");
            this.canvas && this.canvas.fire("text:selection:changed", { target: this });
          },
          /**
           * Initialize text dimensions. Render all text on given context
           * or on a offscreen canvas to get the text width with measureText.
           * Updates this.width and this.height with the proper values.
           * Does not return dimensions.
           * @private
           */
          initDimensions: function() {
            this.isEditing && this.initDelayedCursor();
            this.clearContextTop();
            this.callSuper("initDimensions");
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          render: function(ctx) {
            this.clearContextTop();
            this.callSuper("render", ctx);
            this.cursorOffsetCache = {};
            this.renderCursorOrSelection();
          },
          /**
           * @private
           * @param {CanvasRenderingContext2D} ctx Context to render on
           */
          _render: function(ctx) {
            this.callSuper("_render", ctx);
          },
          /**
           * Prepare and clean the contextTop
           */
          clearContextTop: function(skipRestore) {
            if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
              return;
            }
            var ctx = this.canvas.contextTop, v2 = this.canvas.viewportTransform;
            ctx.save();
            ctx.transform(v2[0], v2[1], v2[2], v2[3], v2[4], v2[5]);
            this.transform(ctx);
            this._clearTextArea(ctx);
            skipRestore || ctx.restore();
          },
          /**
           * Renders cursor or selection (depending on what exists)
           * it does on the contextTop. If contextTop is not available, do nothing.
           */
          renderCursorOrSelection: function() {
            if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
              return;
            }
            var boundaries = this._getCursorBoundaries(), ctx = this.canvas.contextTop;
            this.clearContextTop(true);
            if (this.selectionStart === this.selectionEnd) {
              this.renderCursor(boundaries, ctx);
            } else {
              this.renderSelection(boundaries, ctx);
            }
            ctx.restore();
          },
          _clearTextArea: function(ctx) {
            var width = this.width + 4, height = this.height + 4;
            ctx.clearRect(-width / 2, -height / 2, width, height);
          },
          /**
           * Returns cursor boundaries (left, top, leftOffset, topOffset)
           * @private
           * @param {Array} chars Array of characters
           * @param {String} typeOfBoundaries
           */
          _getCursorBoundaries: function(position) {
            if (typeof position === "undefined") {
              position = this.selectionStart;
            }
            var left = this._getLeftOffset(), top = this._getTopOffset(), offsets = this._getCursorBoundariesOffsets(position);
            return {
              left,
              top,
              leftOffset: offsets.left,
              topOffset: offsets.top
            };
          },
          /**
           * @private
           */
          _getCursorBoundariesOffsets: function(position) {
            if (this.cursorOffsetCache && "top" in this.cursorOffsetCache) {
              return this.cursorOffsetCache;
            }
            var lineLeftOffset, lineIndex, charIndex, topOffset = 0, leftOffset = 0, boundaries, cursorPosition = this.get2DCursorLocation(position);
            charIndex = cursorPosition.charIndex;
            lineIndex = cursorPosition.lineIndex;
            for (var i2 = 0; i2 < lineIndex; i2++) {
              topOffset += this.getHeightOfLine(i2);
            }
            lineLeftOffset = this._getLineLeftOffset(lineIndex);
            var bound = this.__charBounds[lineIndex][charIndex];
            bound && (leftOffset = bound.left);
            if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {
              leftOffset -= this._getWidthOfCharSpacing();
            }
            boundaries = {
              top: topOffset,
              left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0)
            };
            if (this.direction === "rtl") {
              boundaries.left *= -1;
            }
            this.cursorOffsetCache = boundaries;
            return this.cursorOffsetCache;
          },
          /**
           * Renders cursor
           * @param {Object} boundaries
           * @param {CanvasRenderingContext2D} ctx transformed context to draw on
           */
          renderCursor: function(boundaries, ctx) {
            var cursorLocation = this.get2DCursorLocation(), lineIndex = cursorLocation.lineIndex, charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0, charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, "fontSize"), multiplier = this.scaleX * this.canvas.getZoom(), cursorWidth = this.cursorWidth / multiplier, topOffset = boundaries.topOffset, dy = this.getValueOfPropertyAt(lineIndex, charIndex, "deltaY");
            topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight - charHeight * (1 - this._fontSizeFraction);
            if (this.inCompositionMode) {
              this.renderSelection(boundaries, ctx);
            }
            ctx.fillStyle = this.cursorColor || this.getValueOfPropertyAt(lineIndex, charIndex, "fill");
            ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;
            ctx.fillRect(
              boundaries.left + boundaries.leftOffset - cursorWidth / 2,
              topOffset + boundaries.top + dy,
              cursorWidth,
              charHeight
            );
          },
          /**
           * Renders text selection
           * @param {Object} boundaries Object with left/top/leftOffset/topOffset
           * @param {CanvasRenderingContext2D} ctx transformed context to draw on
           */
          renderSelection: function(boundaries, ctx) {
            var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart, selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd, isJustify = this.textAlign.indexOf("justify") !== -1, start = this.get2DCursorLocation(selectionStart), end = this.get2DCursorLocation(selectionEnd), startLine = start.lineIndex, endLine = end.lineIndex, startChar = start.charIndex < 0 ? 0 : start.charIndex, endChar = end.charIndex < 0 ? 0 : end.charIndex;
            for (var i2 = startLine; i2 <= endLine; i2++) {
              var lineOffset = this._getLineLeftOffset(i2) || 0, lineHeight = this.getHeightOfLine(i2), realLineHeight = 0, boxStart = 0, boxEnd = 0;
              if (i2 === startLine) {
                boxStart = this.__charBounds[startLine][startChar].left;
              }
              if (i2 >= startLine && i2 < endLine) {
                boxEnd = isJustify && !this.isEndOfWrapping(i2) ? this.width : this.getLineWidth(i2) || 5;
              } else if (i2 === endLine) {
                if (endChar === 0) {
                  boxEnd = this.__charBounds[endLine][endChar].left;
                } else {
                  var charSpacing = this._getWidthOfCharSpacing();
                  boxEnd = this.__charBounds[endLine][endChar - 1].left + this.__charBounds[endLine][endChar - 1].width - charSpacing;
                }
              }
              realLineHeight = lineHeight;
              if (this.lineHeight < 1 || i2 === endLine && this.lineHeight > 1) {
                lineHeight /= this.lineHeight;
              }
              var drawStart = boundaries.left + lineOffset + boxStart, drawWidth = boxEnd - boxStart, drawHeight = lineHeight, extraTop = 0;
              if (this.inCompositionMode) {
                ctx.fillStyle = this.compositionColor || "black";
                drawHeight = 1;
                extraTop = lineHeight;
              } else {
                ctx.fillStyle = this.selectionColor;
              }
              if (this.direction === "rtl") {
                drawStart = this.width - drawStart - drawWidth;
              }
              ctx.fillRect(
                drawStart,
                boundaries.top + boundaries.topOffset + extraTop,
                drawWidth,
                drawHeight
              );
              boundaries.topOffset += realLineHeight;
            }
          },
          /**
           * High level function to know the height of the cursor.
           * the currentChar is the one that precedes the cursor
           * Returns fontSize of char at the current cursor
           * Unused from the library, is for the end user
           * @return {Number} Character font size
           */
          getCurrentCharFontSize: function() {
            var cp = this._getCurrentCharIndex();
            return this.getValueOfPropertyAt(cp.l, cp.c, "fontSize");
          },
          /**
           * High level function to know the color of the cursor.
           * the currentChar is the one that precedes the cursor
           * Returns color (fill) of char at the current cursor
           * if the text object has a pattern or gradient for filler, it will return that.
           * Unused by the library, is for the end user
           * @return {String | fabric.Gradient | fabric.Pattern} Character color (fill)
           */
          getCurrentCharColor: function() {
            var cp = this._getCurrentCharIndex();
            return this.getValueOfPropertyAt(cp.l, cp.c, "fill");
          },
          /**
           * Returns the cursor position for the getCurrent.. functions
           * @private
           */
          _getCurrentCharIndex: function() {
            var cursorPosition = this.get2DCursorLocation(this.selectionStart, true), charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;
            return { l: cursorPosition.lineIndex, c: charIndex };
          }
        }
      );
      fabric.IText.fromObject = function(object, callback) {
        parseDecoration(object);
        if (object.styles) {
          for (var i2 in object.styles) {
            for (var j2 in object.styles[i2]) {
              parseDecoration(object.styles[i2][j2]);
            }
          }
        }
        fabric.Object._fromObject("IText", object, callback, "text");
      };
    })();
    (function() {
      var clone = fabric.util.object.clone;
      fabric.util.object.extend(
        fabric.IText.prototype,
        /** @lends fabric.IText.prototype */
        {
          /**
           * Initializes all the interactive behavior of IText
           */
          initBehavior: function() {
            this.initAddedHandler();
            this.initRemovedHandler();
            this.initCursorSelectionHandlers();
            this.initDoubleClickSimulation();
            this.mouseMoveHandler = this.mouseMoveHandler.bind(this);
          },
          onDeselect: function() {
            this.isEditing && this.exitEditing();
            this.selected = false;
          },
          /**
           * Initializes "added" event handler
           */
          initAddedHandler: function() {
            var _this = this;
            this.on("added", function() {
              var canvas = _this.canvas;
              if (canvas) {
                if (!canvas._hasITextHandlers) {
                  canvas._hasITextHandlers = true;
                  _this._initCanvasHandlers(canvas);
                }
                canvas._iTextInstances = canvas._iTextInstances || [];
                canvas._iTextInstances.push(_this);
              }
            });
          },
          initRemovedHandler: function() {
            var _this = this;
            this.on("removed", function() {
              var canvas = _this.canvas;
              if (canvas) {
                canvas._iTextInstances = canvas._iTextInstances || [];
                fabric.util.removeFromArray(canvas._iTextInstances, _this);
                if (canvas._iTextInstances.length === 0) {
                  canvas._hasITextHandlers = false;
                  _this._removeCanvasHandlers(canvas);
                }
              }
            });
          },
          /**
           * register canvas event to manage exiting on other instances
           * @private
           */
          _initCanvasHandlers: function(canvas) {
            canvas._mouseUpITextHandler = function() {
              if (canvas._iTextInstances) {
                canvas._iTextInstances.forEach(function(obj) {
                  obj.__isMousedown = false;
                });
              }
            };
            canvas.on("mouse:up", canvas._mouseUpITextHandler);
          },
          /**
           * remove canvas event to manage exiting on other instances
           * @private
           */
          _removeCanvasHandlers: function(canvas) {
            canvas.off("mouse:up", canvas._mouseUpITextHandler);
          },
          /**
           * @private
           */
          _tick: function() {
            this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, "_onTickComplete");
          },
          /**
           * @private
           */
          _animateCursor: function(obj, targetOpacity, duration, completeMethod) {
            var tickState;
            tickState = {
              isAborted: false,
              abort: function() {
                this.isAborted = true;
              }
            };
            obj.animate("_currentCursorOpacity", targetOpacity, {
              duration,
              onComplete: function() {
                if (!tickState.isAborted) {
                  obj[completeMethod]();
                }
              },
              onChange: function() {
                if (obj.canvas && obj.selectionStart === obj.selectionEnd) {
                  obj.renderCursorOrSelection();
                }
              },
              abort: function() {
                return tickState.isAborted;
              }
            });
            return tickState;
          },
          /**
           * @private
           */
          _onTickComplete: function() {
            var _this = this;
            if (this._cursorTimeout1) {
              clearTimeout(this._cursorTimeout1);
            }
            this._cursorTimeout1 = setTimeout(function() {
              _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, "_tick");
            }, 100);
          },
          /**
           * Initializes delayed cursor
           */
          initDelayedCursor: function(restart) {
            var _this = this, delay = restart ? 0 : this.cursorDelay;
            this.abortCursorAnimation();
            this._currentCursorOpacity = 1;
            this._cursorTimeout2 = setTimeout(function() {
              _this._tick();
            }, delay);
          },
          /**
           * Aborts cursor animation and clears all timeouts
           */
          abortCursorAnimation: function() {
            var shouldClear = this._currentTickState || this._currentTickCompleteState, canvas = this.canvas;
            this._currentTickState && this._currentTickState.abort();
            this._currentTickCompleteState && this._currentTickCompleteState.abort();
            clearTimeout(this._cursorTimeout1);
            clearTimeout(this._cursorTimeout2);
            this._currentCursorOpacity = 0;
            if (shouldClear && canvas) {
              canvas.clearContext(canvas.contextTop || canvas.contextContainer);
            }
          },
          /**
           * Selects entire text
           * @return {fabric.IText} thisArg
           * @chainable
           */
          selectAll: function() {
            this.selectionStart = 0;
            this.selectionEnd = this._text.length;
            this._fireSelectionChanged();
            this._updateTextarea();
            return this;
          },
          /**
           * Returns selected text
           * @return {String}
           */
          getSelectedText: function() {
            return this._text.slice(this.selectionStart, this.selectionEnd).join("");
          },
          /**
           * Find new selection index representing start of current word according to current selection index
           * @param {Number} startFrom Current selection index
           * @return {Number} New selection index
           */
          findWordBoundaryLeft: function(startFrom) {
            var offset = 0, index = startFrom - 1;
            if (this._reSpace.test(this._text[index])) {
              while (this._reSpace.test(this._text[index])) {
                offset++;
                index--;
              }
            }
            while (/\S/.test(this._text[index]) && index > -1) {
              offset++;
              index--;
            }
            return startFrom - offset;
          },
          /**
           * Find new selection index representing end of current word according to current selection index
           * @param {Number} startFrom Current selection index
           * @return {Number} New selection index
           */
          findWordBoundaryRight: function(startFrom) {
            var offset = 0, index = startFrom;
            if (this._reSpace.test(this._text[index])) {
              while (this._reSpace.test(this._text[index])) {
                offset++;
                index++;
              }
            }
            while (/\S/.test(this._text[index]) && index < this._text.length) {
              offset++;
              index++;
            }
            return startFrom + offset;
          },
          /**
           * Find new selection index representing start of current line according to current selection index
           * @param {Number} startFrom Current selection index
           * @return {Number} New selection index
           */
          findLineBoundaryLeft: function(startFrom) {
            var offset = 0, index = startFrom - 1;
            while (!/\n/.test(this._text[index]) && index > -1) {
              offset++;
              index--;
            }
            return startFrom - offset;
          },
          /**
           * Find new selection index representing end of current line according to current selection index
           * @param {Number} startFrom Current selection index
           * @return {Number} New selection index
           */
          findLineBoundaryRight: function(startFrom) {
            var offset = 0, index = startFrom;
            while (!/\n/.test(this._text[index]) && index < this._text.length) {
              offset++;
              index++;
            }
            return startFrom + offset;
          },
          /**
           * Finds index corresponding to beginning or end of a word
           * @param {Number} selectionStart Index of a character
           * @param {Number} direction 1 or -1
           * @return {Number} Index of the beginning or end of a word
           */
          searchWordBoundary: function(selectionStart, direction) {
            var text = this._text, index = this._reSpace.test(text[selectionStart]) ? selectionStart - 1 : selectionStart, _char = text[index], reNonWord = fabric.reNonWord;
            while (!reNonWord.test(_char) && index > 0 && index < text.length) {
              index += direction;
              _char = text[index];
            }
            if (reNonWord.test(_char)) {
              index += direction === 1 ? 0 : 1;
            }
            return index;
          },
          /**
           * Selects a word based on the index
           * @param {Number} selectionStart Index of a character
           */
          selectWord: function(selectionStart) {
            selectionStart = selectionStart || this.selectionStart;
            var newSelectionStart = this.searchWordBoundary(selectionStart, -1), newSelectionEnd = this.searchWordBoundary(selectionStart, 1);
            this.selectionStart = newSelectionStart;
            this.selectionEnd = newSelectionEnd;
            this._fireSelectionChanged();
            this._updateTextarea();
            this.renderCursorOrSelection();
          },
          /**
           * Selects a line based on the index
           * @param {Number} selectionStart Index of a character
           * @return {fabric.IText} thisArg
           * @chainable
           */
          selectLine: function(selectionStart) {
            selectionStart = selectionStart || this.selectionStart;
            var newSelectionStart = this.findLineBoundaryLeft(selectionStart), newSelectionEnd = this.findLineBoundaryRight(selectionStart);
            this.selectionStart = newSelectionStart;
            this.selectionEnd = newSelectionEnd;
            this._fireSelectionChanged();
            this._updateTextarea();
            return this;
          },
          /**
           * Enters editing state
           * @return {fabric.IText} thisArg
           * @chainable
           */
          enterEditing: function(e2) {
            if (this.isEditing || !this.editable) {
              return;
            }
            if (this.canvas) {
              this.canvas.calcOffset();
              this.exitEditingOnOthers(this.canvas);
            }
            this.isEditing = true;
            this.initHiddenTextarea(e2);
            this.hiddenTextarea.focus();
            this.hiddenTextarea.value = this.text;
            this._updateTextarea();
            this._saveEditingProps();
            this._setEditingProps();
            this._textBeforeEdit = this.text;
            this._tick();
            this.fire("editing:entered");
            this._fireSelectionChanged();
            if (!this.canvas) {
              return this;
            }
            this.canvas.fire("text:editing:entered", { target: this });
            this.initMouseMoveHandler();
            this.canvas.requestRenderAll();
            return this;
          },
          exitEditingOnOthers: function(canvas) {
            if (canvas._iTextInstances) {
              canvas._iTextInstances.forEach(function(obj) {
                obj.selected = false;
                if (obj.isEditing) {
                  obj.exitEditing();
                }
              });
            }
          },
          /**
           * Initializes "mousemove" event handler
           */
          initMouseMoveHandler: function() {
            this.canvas.on("mouse:move", this.mouseMoveHandler);
          },
          /**
           * @private
           */
          mouseMoveHandler: function(options) {
            if (!this.__isMousedown || !this.isEditing) {
              return;
            }
            var newSelectionStart = this.getSelectionStartFromPointer(options.e), currentStart = this.selectionStart, currentEnd = this.selectionEnd;
            if ((newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd) && (currentStart === newSelectionStart || currentEnd === newSelectionStart)) {
              return;
            }
            if (newSelectionStart > this.__selectionStartOnMouseDown) {
              this.selectionStart = this.__selectionStartOnMouseDown;
              this.selectionEnd = newSelectionStart;
            } else {
              this.selectionStart = newSelectionStart;
              this.selectionEnd = this.__selectionStartOnMouseDown;
            }
            if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {
              this.restartCursorIfNeeded();
              this._fireSelectionChanged();
              this._updateTextarea();
              this.renderCursorOrSelection();
            }
          },
          /**
           * @private
           */
          _setEditingProps: function() {
            this.hoverCursor = "text";
            if (this.canvas) {
              this.canvas.defaultCursor = this.canvas.moveCursor = "text";
            }
            this.borderColor = this.editingBorderColor;
            this.hasControls = this.selectable = false;
            this.lockMovementX = this.lockMovementY = true;
          },
          /**
           * convert from textarea to grapheme indexes
           */
          fromStringToGraphemeSelection: function(start, end, text) {
            var smallerTextStart = text.slice(0, start), graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;
            if (start === end) {
              return { selectionStart: graphemeStart, selectionEnd: graphemeStart };
            }
            var smallerTextEnd = text.slice(start, end), graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;
            return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };
          },
          /**
           * convert from fabric to textarea values
           */
          fromGraphemeToStringSelection: function(start, end, _text) {
            var smallerTextStart = _text.slice(0, start), graphemeStart = smallerTextStart.join("").length;
            if (start === end) {
              return { selectionStart: graphemeStart, selectionEnd: graphemeStart };
            }
            var smallerTextEnd = _text.slice(start, end), graphemeEnd = smallerTextEnd.join("").length;
            return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };
          },
          /**
           * @private
           */
          _updateTextarea: function() {
            this.cursorOffsetCache = {};
            if (!this.hiddenTextarea) {
              return;
            }
            if (!this.inCompositionMode) {
              var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);
              this.hiddenTextarea.selectionStart = newSelection.selectionStart;
              this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;
            }
            this.updateTextareaPosition();
          },
          /**
           * @private
           */
          updateFromTextArea: function() {
            if (!this.hiddenTextarea) {
              return;
            }
            this.cursorOffsetCache = {};
            this.text = this.hiddenTextarea.value;
            if (this._shouldClearDimensionCache()) {
              this.initDimensions();
              this.setCoords();
            }
            var newSelection = this.fromStringToGraphemeSelection(
              this.hiddenTextarea.selectionStart,
              this.hiddenTextarea.selectionEnd,
              this.hiddenTextarea.value
            );
            this.selectionEnd = this.selectionStart = newSelection.selectionEnd;
            if (!this.inCompositionMode) {
              this.selectionStart = newSelection.selectionStart;
            }
            this.updateTextareaPosition();
          },
          /**
           * @private
           */
          updateTextareaPosition: function() {
            if (this.selectionStart === this.selectionEnd) {
              var style = this._calcTextareaPosition();
              this.hiddenTextarea.style.left = style.left;
              this.hiddenTextarea.style.top = style.top;
            }
          },
          /**
           * @private
           * @return {Object} style contains style for hiddenTextarea
           */
          _calcTextareaPosition: function() {
            if (!this.canvas) {
              return { x: 1, y: 1 };
            }
            var desiredPosition = this.inCompositionMode ? this.compositionStart : this.selectionStart, boundaries = this._getCursorBoundaries(desiredPosition), cursorLocation = this.get2DCursorLocation(desiredPosition), lineIndex = cursorLocation.lineIndex, charIndex = cursorLocation.charIndex, charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, "fontSize") * this.lineHeight, leftOffset = boundaries.leftOffset, m2 = this.calcTransformMatrix(), p2 = {
              x: boundaries.left + leftOffset,
              y: boundaries.top + boundaries.topOffset + charHeight
            }, retinaScaling = this.canvas.getRetinaScaling(), upperCanvas = this.canvas.upperCanvasEl, upperCanvasWidth = upperCanvas.width / retinaScaling, upperCanvasHeight = upperCanvas.height / retinaScaling, maxWidth = upperCanvasWidth - charHeight, maxHeight = upperCanvasHeight - charHeight, scaleX = upperCanvas.clientWidth / upperCanvasWidth, scaleY = upperCanvas.clientHeight / upperCanvasHeight;
            p2 = fabric.util.transformPoint(p2, m2);
            p2 = fabric.util.transformPoint(p2, this.canvas.viewportTransform);
            p2.x *= scaleX;
            p2.y *= scaleY;
            if (p2.x < 0) {
              p2.x = 0;
            }
            if (p2.x > maxWidth) {
              p2.x = maxWidth;
            }
            if (p2.y < 0) {
              p2.y = 0;
            }
            if (p2.y > maxHeight) {
              p2.y = maxHeight;
            }
            p2.x += this.canvas._offset.left;
            p2.y += this.canvas._offset.top;
            return { left: p2.x + "px", top: p2.y + "px", fontSize: charHeight + "px", charHeight };
          },
          /**
           * @private
           */
          _saveEditingProps: function() {
            this._savedProps = {
              hasControls: this.hasControls,
              borderColor: this.borderColor,
              lockMovementX: this.lockMovementX,
              lockMovementY: this.lockMovementY,
              hoverCursor: this.hoverCursor,
              selectable: this.selectable,
              defaultCursor: this.canvas && this.canvas.defaultCursor,
              moveCursor: this.canvas && this.canvas.moveCursor
            };
          },
          /**
           * @private
           */
          _restoreEditingProps: function() {
            if (!this._savedProps) {
              return;
            }
            this.hoverCursor = this._savedProps.hoverCursor;
            this.hasControls = this._savedProps.hasControls;
            this.borderColor = this._savedProps.borderColor;
            this.selectable = this._savedProps.selectable;
            this.lockMovementX = this._savedProps.lockMovementX;
            this.lockMovementY = this._savedProps.lockMovementY;
            if (this.canvas) {
              this.canvas.defaultCursor = this._savedProps.defaultCursor;
              this.canvas.moveCursor = this._savedProps.moveCursor;
            }
          },
          /**
           * Exits from editing state
           * @return {fabric.IText} thisArg
           * @chainable
           */
          exitEditing: function() {
            var isTextChanged = this._textBeforeEdit !== this.text;
            var hiddenTextarea = this.hiddenTextarea;
            this.selected = false;
            this.isEditing = false;
            this.selectionEnd = this.selectionStart;
            if (hiddenTextarea) {
              hiddenTextarea.blur && hiddenTextarea.blur();
              hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
            }
            this.hiddenTextarea = null;
            this.abortCursorAnimation();
            this._restoreEditingProps();
            this._currentCursorOpacity = 0;
            if (this._shouldClearDimensionCache()) {
              this.initDimensions();
              this.setCoords();
            }
            this.fire("editing:exited");
            isTextChanged && this.fire("modified");
            if (this.canvas) {
              this.canvas.off("mouse:move", this.mouseMoveHandler);
              this.canvas.fire("text:editing:exited", { target: this });
              isTextChanged && this.canvas.fire("object:modified", { target: this });
            }
            return this;
          },
          /**
           * @private
           */
          _removeExtraneousStyles: function() {
            for (var prop in this.styles) {
              if (!this._textLines[prop]) {
                delete this.styles[prop];
              }
            }
          },
          /**
           * remove and reflow a style block from start to end.
           * @param {Number} start linear start position for removal (included in removal)
           * @param {Number} end linear end position for removal ( excluded from removal )
           */
          removeStyleFromTo: function(start, end) {
            var cursorStart = this.get2DCursorLocation(start, true), cursorEnd = this.get2DCursorLocation(end, true), lineStart = cursorStart.lineIndex, charStart = cursorStart.charIndex, lineEnd = cursorEnd.lineIndex, charEnd = cursorEnd.charIndex, i2, styleObj;
            if (lineStart !== lineEnd) {
              if (this.styles[lineStart]) {
                for (i2 = charStart; i2 < this._unwrappedTextLines[lineStart].length; i2++) {
                  delete this.styles[lineStart][i2];
                }
              }
              if (this.styles[lineEnd]) {
                for (i2 = charEnd; i2 < this._unwrappedTextLines[lineEnd].length; i2++) {
                  styleObj = this.styles[lineEnd][i2];
                  if (styleObj) {
                    this.styles[lineStart] || (this.styles[lineStart] = {});
                    this.styles[lineStart][charStart + i2 - charEnd] = styleObj;
                  }
                }
              }
              for (i2 = lineStart + 1; i2 <= lineEnd; i2++) {
                delete this.styles[i2];
              }
              this.shiftLineStyles(lineEnd, lineStart - lineEnd);
            } else {
              if (this.styles[lineStart]) {
                styleObj = this.styles[lineStart];
                var diff = charEnd - charStart, numericChar, _char;
                for (i2 = charStart; i2 < charEnd; i2++) {
                  delete styleObj[i2];
                }
                for (_char in this.styles[lineStart]) {
                  numericChar = parseInt(_char, 10);
                  if (numericChar >= charEnd) {
                    styleObj[numericChar - diff] = styleObj[_char];
                    delete styleObj[_char];
                  }
                }
              }
            }
          },
          /**
           * Shifts line styles up or down
           * @param {Number} lineIndex Index of a line
           * @param {Number} offset Can any number?
           */
          shiftLineStyles: function(lineIndex, offset) {
            var clonedStyles = clone(this.styles);
            for (var line in this.styles) {
              var numericLine = parseInt(line, 10);
              if (numericLine > lineIndex) {
                this.styles[numericLine + offset] = clonedStyles[numericLine];
                if (!clonedStyles[numericLine - offset]) {
                  delete this.styles[numericLine];
                }
              }
            }
          },
          restartCursorIfNeeded: function() {
            if (!this._currentTickState || this._currentTickState.isAborted || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted) {
              this.initDelayedCursor();
            }
          },
          /**
           * Handle insertion of more consecutive style lines for when one or more
           * newlines gets added to the text. Since current style needs to be shifted
           * first we shift the current style of the number lines needed, then we add
           * new lines from the last to the first.
           * @param {Number} lineIndex Index of a line
           * @param {Number} charIndex Index of a char
           * @param {Number} qty number of lines to add
           * @param {Array} copiedStyle Array of objects styles
           */
          insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {
            var currentCharStyle, newLineStyles = {}, somethingAdded = false, isEndOfLine = this._unwrappedTextLines[lineIndex].length === charIndex;
            qty || (qty = 1);
            this.shiftLineStyles(lineIndex, qty);
            if (this.styles[lineIndex]) {
              currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];
            }
            for (var index in this.styles[lineIndex]) {
              var numIndex = parseInt(index, 10);
              if (numIndex >= charIndex) {
                somethingAdded = true;
                newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];
                if (!(isEndOfLine && charIndex === 0)) {
                  delete this.styles[lineIndex][index];
                }
              }
            }
            var styleCarriedOver = false;
            if (somethingAdded && !isEndOfLine) {
              this.styles[lineIndex + qty] = newLineStyles;
              styleCarriedOver = true;
            }
            if (styleCarriedOver) {
              qty--;
            }
            while (qty > 0) {
              if (copiedStyle && copiedStyle[qty - 1]) {
                this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty - 1]) };
              } else if (currentCharStyle) {
                this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };
              } else {
                delete this.styles[lineIndex + qty];
              }
              qty--;
            }
            this._forceClearCache = true;
          },
          /**
           * Inserts style object for a given line/char index
           * @param {Number} lineIndex Index of a line
           * @param {Number} charIndex Index of a char
           * @param {Number} quantity number Style object to insert, if given
           * @param {Array} copiedStyle array of style objects
           */
          insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {
            if (!this.styles) {
              this.styles = {};
            }
            var currentLineStyles = this.styles[lineIndex], currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};
            quantity || (quantity = 1);
            for (var index in currentLineStylesCloned) {
              var numericIndex = parseInt(index, 10);
              if (numericIndex >= charIndex) {
                currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];
                if (!currentLineStylesCloned[numericIndex - quantity]) {
                  delete currentLineStyles[numericIndex];
                }
              }
            }
            this._forceClearCache = true;
            if (copiedStyle) {
              while (quantity--) {
                if (!Object.keys(copiedStyle[quantity]).length) {
                  continue;
                }
                if (!this.styles[lineIndex]) {
                  this.styles[lineIndex] = {};
                }
                this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);
              }
              return;
            }
            if (!currentLineStyles) {
              return;
            }
            var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];
            while (newStyle && quantity--) {
              this.styles[lineIndex][charIndex + quantity] = clone(newStyle);
            }
          },
          /**
           * Inserts style object(s)
           * @param {Array} insertedText Characters at the location where style is inserted
           * @param {Number} start cursor index for inserting style
           * @param {Array} [copiedStyle] array of style objects to insert.
           */
          insertNewStyleBlock: function(insertedText, start, copiedStyle) {
            var cursorLoc = this.get2DCursorLocation(start, true), addedLines = [0], linesLength = 0;
            for (var i2 = 0; i2 < insertedText.length; i2++) {
              if (insertedText[i2] === "\n") {
                linesLength++;
                addedLines[linesLength] = 0;
              } else {
                addedLines[linesLength]++;
              }
            }
            if (addedLines[0] > 0) {
              this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);
              copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);
            }
            linesLength && this.insertNewlineStyleObject(
              cursorLoc.lineIndex,
              cursorLoc.charIndex + addedLines[0],
              linesLength
            );
            for (var i2 = 1; i2 < linesLength; i2++) {
              if (addedLines[i2] > 0) {
                this.insertCharStyleObject(cursorLoc.lineIndex + i2, 0, addedLines[i2], copiedStyle);
              } else if (copiedStyle) {
                this.styles[cursorLoc.lineIndex + i2][0] = copiedStyle[0];
              }
              copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i2] + 1);
            }
            if (addedLines[i2] > 0) {
              this.insertCharStyleObject(cursorLoc.lineIndex + i2, 0, addedLines[i2], copiedStyle);
            }
          },
          /**
           * Set the selectionStart and selectionEnd according to the new position of cursor
           * mimic the key - mouse navigation when shift is pressed.
           */
          setSelectionStartEndWithShift: function(start, end, newSelection) {
            if (newSelection <= start) {
              if (end === start) {
                this._selectionDirection = "left";
              } else if (this._selectionDirection === "right") {
                this._selectionDirection = "left";
                this.selectionEnd = start;
              }
              this.selectionStart = newSelection;
            } else if (newSelection > start && newSelection < end) {
              if (this._selectionDirection === "right") {
                this.selectionEnd = newSelection;
              } else {
                this.selectionStart = newSelection;
              }
            } else {
              if (end === start) {
                this._selectionDirection = "right";
              } else if (this._selectionDirection === "left") {
                this._selectionDirection = "right";
                this.selectionStart = end;
              }
              this.selectionEnd = newSelection;
            }
          },
          setSelectionInBoundaries: function() {
            var length = this.text.length;
            if (this.selectionStart > length) {
              this.selectionStart = length;
            } else if (this.selectionStart < 0) {
              this.selectionStart = 0;
            }
            if (this.selectionEnd > length) {
              this.selectionEnd = length;
            } else if (this.selectionEnd < 0) {
              this.selectionEnd = 0;
            }
          }
        }
      );
    })();
    fabric.util.object.extend(
      fabric.IText.prototype,
      /** @lends fabric.IText.prototype */
      {
        /**
         * Initializes "dbclick" event handler
         */
        initDoubleClickSimulation: function() {
          this.__lastClickTime = +/* @__PURE__ */ new Date();
          this.__lastLastClickTime = +/* @__PURE__ */ new Date();
          this.__lastPointer = {};
          this.on("mousedown", this.onMouseDown);
        },
        /**
         * Default event handler to simulate triple click
         * @private
         */
        onMouseDown: function(options) {
          if (!this.canvas) {
            return;
          }
          this.__newClickTime = +/* @__PURE__ */ new Date();
          var newPointer = options.pointer;
          if (this.isTripleClick(newPointer)) {
            this.fire("tripleclick", options);
            this._stopEvent(options.e);
          }
          this.__lastLastClickTime = this.__lastClickTime;
          this.__lastClickTime = this.__newClickTime;
          this.__lastPointer = newPointer;
          this.__lastIsEditing = this.isEditing;
          this.__lastSelected = this.selected;
        },
        isTripleClick: function(newPointer) {
          return this.__newClickTime - this.__lastClickTime < 500 && this.__lastClickTime - this.__lastLastClickTime < 500 && this.__lastPointer.x === newPointer.x && this.__lastPointer.y === newPointer.y;
        },
        /**
         * @private
         */
        _stopEvent: function(e2) {
          e2.preventDefault && e2.preventDefault();
          e2.stopPropagation && e2.stopPropagation();
        },
        /**
         * Initializes event handlers related to cursor or selection
         */
        initCursorSelectionHandlers: function() {
          this.initMousedownHandler();
          this.initMouseupHandler();
          this.initClicks();
        },
        /**
         * Default handler for double click, select a word
         */
        doubleClickHandler: function(options) {
          if (!this.isEditing) {
            return;
          }
          this.selectWord(this.getSelectionStartFromPointer(options.e));
        },
        /**
         * Default handler for triple click, select a line
         */
        tripleClickHandler: function(options) {
          if (!this.isEditing) {
            return;
          }
          this.selectLine(this.getSelectionStartFromPointer(options.e));
        },
        /**
         * Initializes double and triple click event handlers
         */
        initClicks: function() {
          this.on("mousedblclick", this.doubleClickHandler);
          this.on("tripleclick", this.tripleClickHandler);
        },
        /**
         * Default event handler for the basic functionalities needed on _mouseDown
         * can be overridden to do something different.
         * Scope of this implementation is: find the click position, set selectionStart
         * find selectionEnd, initialize the drawing of either cursor or selection area
         * initializing a mousedDown on a text area will cancel fabricjs knowledge of
         * current compositionMode. It will be set to false.
         */
        _mouseDownHandler: function(options) {
          if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
            return;
          }
          this.__isMousedown = true;
          if (this.selected) {
            this.inCompositionMode = false;
            this.setCursorByClick(options.e);
          }
          if (this.isEditing) {
            this.__selectionStartOnMouseDown = this.selectionStart;
            if (this.selectionStart === this.selectionEnd) {
              this.abortCursorAnimation();
            }
            this.renderCursorOrSelection();
          }
        },
        /**
         * Default event handler for the basic functionalities needed on mousedown:before
         * can be overridden to do something different.
         * Scope of this implementation is: verify the object is already selected when mousing down
         */
        _mouseDownHandlerBefore: function(options) {
          if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
            return;
          }
          this.selected = this === this.canvas._activeObject;
        },
        /**
         * Initializes "mousedown" event handler
         */
        initMousedownHandler: function() {
          this.on("mousedown", this._mouseDownHandler);
          this.on("mousedown:before", this._mouseDownHandlerBefore);
        },
        /**
         * Initializes "mouseup" event handler
         */
        initMouseupHandler: function() {
          this.on("mouseup", this.mouseUpHandler);
        },
        /**
         * standard handler for mouse up, overridable
         * @private
         */
        mouseUpHandler: function(options) {
          this.__isMousedown = false;
          if (!this.editable || this.group || options.transform && options.transform.actionPerformed || options.e.button && options.e.button !== 1) {
            return;
          }
          if (this.canvas) {
            var currentActive = this.canvas._activeObject;
            if (currentActive && currentActive !== this) {
              return;
            }
          }
          if (this.__lastSelected && !this.__corner) {
            this.selected = false;
            this.__lastSelected = false;
            this.enterEditing(options.e);
            if (this.selectionStart === this.selectionEnd) {
              this.initDelayedCursor(true);
            } else {
              this.renderCursorOrSelection();
            }
          } else {
            this.selected = true;
          }
        },
        /**
         * Changes cursor location in a text depending on passed pointer (x/y) object
         * @param {Event} e Event object
         */
        setCursorByClick: function(e2) {
          var newSelection = this.getSelectionStartFromPointer(e2), start = this.selectionStart, end = this.selectionEnd;
          if (e2.shiftKey) {
            this.setSelectionStartEndWithShift(start, end, newSelection);
          } else {
            this.selectionStart = newSelection;
            this.selectionEnd = newSelection;
          }
          if (this.isEditing) {
            this._fireSelectionChanged();
            this._updateTextarea();
          }
        },
        /**
         * Returns index of a character corresponding to where an object was clicked
         * @param {Event} e Event object
         * @return {Number} Index of a character
         */
        getSelectionStartFromPointer: function(e2) {
          var mouseOffset = this.getLocalPointer(e2), prevWidth = 0, width = 0, height = 0, charIndex = 0, lineIndex = 0, lineLeftOffset, line;
          for (var i2 = 0, len = this._textLines.length; i2 < len; i2++) {
            if (height <= mouseOffset.y) {
              height += this.getHeightOfLine(i2) * this.scaleY;
              lineIndex = i2;
              if (i2 > 0) {
                charIndex += this._textLines[i2 - 1].length + this.missingNewlineOffset(i2 - 1);
              }
            } else {
              break;
            }
          }
          lineLeftOffset = this._getLineLeftOffset(lineIndex);
          width = lineLeftOffset * this.scaleX;
          line = this._textLines[lineIndex];
          if (this.direction === "rtl") {
            mouseOffset.x = this.width * this.scaleX - mouseOffset.x + width;
          }
          for (var j2 = 0, jlen = line.length; j2 < jlen; j2++) {
            prevWidth = width;
            width += this.__charBounds[lineIndex][j2].kernedWidth * this.scaleX;
            if (width <= mouseOffset.x) {
              charIndex++;
            } else {
              break;
            }
          }
          return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);
        },
        /**
         * @private
         */
        _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width, index, jlen) {
          var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth, distanceBtwNextCharAndCursor = width - mouseOffset.x, offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor || distanceBtwNextCharAndCursor < 0 ? 0 : 1, newSelectionStart = index + offset;
          if (this.flipX) {
            newSelectionStart = jlen - newSelectionStart;
          }
          if (newSelectionStart > this._text.length) {
            newSelectionStart = this._text.length;
          }
          return newSelectionStart;
        }
      }
    );
    fabric.util.object.extend(
      fabric.IText.prototype,
      /** @lends fabric.IText.prototype */
      {
        /**
         * Initializes hidden textarea (needed to bring up keyboard in iOS)
         */
        initHiddenTextarea: function() {
          this.hiddenTextarea = fabric.document.createElement("textarea");
          this.hiddenTextarea.setAttribute("autocapitalize", "off");
          this.hiddenTextarea.setAttribute("autocorrect", "off");
          this.hiddenTextarea.setAttribute("autocomplete", "off");
          this.hiddenTextarea.setAttribute("spellcheck", "false");
          this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea", "");
          this.hiddenTextarea.setAttribute("wrap", "off");
          var style = this._calcTextareaPosition();
          this.hiddenTextarea.style.cssText = "position: absolute; top: " + style.top + "; left: " + style.left + "; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; paddingｰtop: " + style.fontSize + ";";
          if (this.hiddenTextareaContainer) {
            this.hiddenTextareaContainer.appendChild(this.hiddenTextarea);
          } else {
            fabric.document.body.appendChild(this.hiddenTextarea);
          }
          fabric.util.addListener(this.hiddenTextarea, "keydown", this.onKeyDown.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "keyup", this.onKeyUp.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "input", this.onInput.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "copy", this.copy.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "cut", this.copy.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "paste", this.paste.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "compositionstart", this.onCompositionStart.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "compositionupdate", this.onCompositionUpdate.bind(this));
          fabric.util.addListener(this.hiddenTextarea, "compositionend", this.onCompositionEnd.bind(this));
          if (!this._clickHandlerInitialized && this.canvas) {
            fabric.util.addListener(this.canvas.upperCanvasEl, "click", this.onClick.bind(this));
            this._clickHandlerInitialized = true;
          }
        },
        /**
         * For functionalities on keyDown
         * Map a special key to a function of the instance/prototype
         * If you need different behaviour for ESC or TAB or arrows, you have to change
         * this map setting the name of a function that you build on the fabric.Itext or
         * your prototype.
         * the map change will affect all Instances unless you need for only some text Instances
         * in that case you have to clone this object and assign your Instance.
         * this.keysMap = fabric.util.object.clone(this.keysMap);
         * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]
         */
        keysMap: {
          9: "exitEditing",
          27: "exitEditing",
          33: "moveCursorUp",
          34: "moveCursorDown",
          35: "moveCursorRight",
          36: "moveCursorLeft",
          37: "moveCursorLeft",
          38: "moveCursorUp",
          39: "moveCursorRight",
          40: "moveCursorDown"
        },
        keysMapRtl: {
          9: "exitEditing",
          27: "exitEditing",
          33: "moveCursorUp",
          34: "moveCursorDown",
          35: "moveCursorLeft",
          36: "moveCursorRight",
          37: "moveCursorRight",
          38: "moveCursorUp",
          39: "moveCursorLeft",
          40: "moveCursorDown"
        },
        /**
         * For functionalities on keyUp + ctrl || cmd
         */
        ctrlKeysMapUp: {
          67: "copy",
          88: "cut"
        },
        /**
         * For functionalities on keyDown + ctrl || cmd
         */
        ctrlKeysMapDown: {
          65: "selectAll"
        },
        onClick: function() {
          this.hiddenTextarea && this.hiddenTextarea.focus();
        },
        /**
         * Handles keydown event
         * only used for arrows and combination of modifier keys.
         * @param {Event} e Event object
         */
        onKeyDown: function(e2) {
          if (!this.isEditing) {
            return;
          }
          var keyMap = this.direction === "rtl" ? this.keysMapRtl : this.keysMap;
          if (e2.keyCode in keyMap) {
            this[keyMap[e2.keyCode]](e2);
          } else if (e2.keyCode in this.ctrlKeysMapDown && (e2.ctrlKey || e2.metaKey)) {
            this[this.ctrlKeysMapDown[e2.keyCode]](e2);
          } else {
            return;
          }
          e2.stopImmediatePropagation();
          e2.preventDefault();
          if (e2.keyCode >= 33 && e2.keyCode <= 40) {
            this.inCompositionMode = false;
            this.clearContextTop();
            this.renderCursorOrSelection();
          } else {
            this.canvas && this.canvas.requestRenderAll();
          }
        },
        /**
         * Handles keyup event
         * We handle KeyUp because ie11 and edge have difficulties copy/pasting
         * if a copy/cut event fired, keyup is dismissed
         * @param {Event} e Event object
         */
        onKeyUp: function(e2) {
          if (!this.isEditing || this._copyDone || this.inCompositionMode) {
            this._copyDone = false;
            return;
          }
          if (e2.keyCode in this.ctrlKeysMapUp && (e2.ctrlKey || e2.metaKey)) {
            this[this.ctrlKeysMapUp[e2.keyCode]](e2);
          } else {
            return;
          }
          e2.stopImmediatePropagation();
          e2.preventDefault();
          this.canvas && this.canvas.requestRenderAll();
        },
        /**
         * Handles onInput event
         * @param {Event} e Event object
         */
        onInput: function(e2) {
          var fromPaste = this.fromPaste;
          this.fromPaste = false;
          e2 && e2.stopPropagation();
          if (!this.isEditing) {
            return;
          }
          var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText, charCount = this._text.length, nextCharCount = nextText.length, removedText, insertedText, charDiff = nextCharCount - charCount, selectionStart = this.selectionStart, selectionEnd = this.selectionEnd, selection = selectionStart !== selectionEnd, copiedStyle, removeFrom, removeTo;
          if (this.hiddenTextarea.value === "") {
            this.styles = {};
            this.updateFromTextArea();
            this.fire("changed");
            if (this.canvas) {
              this.canvas.fire("text:changed", { target: this });
              this.canvas.requestRenderAll();
            }
            return;
          }
          var textareaSelection = this.fromStringToGraphemeSelection(
            this.hiddenTextarea.selectionStart,
            this.hiddenTextarea.selectionEnd,
            this.hiddenTextarea.value
          );
          var backDelete = selectionStart > textareaSelection.selectionStart;
          if (selection) {
            removedText = this._text.slice(selectionStart, selectionEnd);
            charDiff += selectionEnd - selectionStart;
          } else if (nextCharCount < charCount) {
            if (backDelete) {
              removedText = this._text.slice(selectionEnd + charDiff, selectionEnd);
            } else {
              removedText = this._text.slice(selectionStart, selectionStart - charDiff);
            }
          }
          insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);
          if (removedText && removedText.length) {
            if (insertedText.length) {
              copiedStyle = this.getSelectionStyles(selectionStart, selectionStart + 1, false);
              copiedStyle = insertedText.map(function() {
                return copiedStyle[0];
              });
            }
            if (selection) {
              removeFrom = selectionStart;
              removeTo = selectionEnd;
            } else if (backDelete) {
              removeFrom = selectionEnd - removedText.length;
              removeTo = selectionEnd;
            } else {
              removeFrom = selectionEnd;
              removeTo = selectionEnd + removedText.length;
            }
            this.removeStyleFromTo(removeFrom, removeTo);
          }
          if (insertedText.length) {
            if (fromPaste && insertedText.join("") === fabric.copiedText && !fabric.disableStyleCopyPaste) {
              copiedStyle = fabric.copiedTextStyle;
            }
            this.insertNewStyleBlock(insertedText, selectionStart, copiedStyle);
          }
          this.updateFromTextArea();
          this.fire("changed");
          if (this.canvas) {
            this.canvas.fire("text:changed", { target: this });
            this.canvas.requestRenderAll();
          }
        },
        /**
         * Composition start
         */
        onCompositionStart: function() {
          this.inCompositionMode = true;
        },
        /**
         * Composition end
         */
        onCompositionEnd: function() {
          this.inCompositionMode = false;
        },
        // /**
        //  * Composition update
        //  */
        onCompositionUpdate: function(e2) {
          this.compositionStart = e2.target.selectionStart;
          this.compositionEnd = e2.target.selectionEnd;
          this.updateTextareaPosition();
        },
        /**
         * Copies selected text
         * @param {Event} e Event object
         */
        copy: function() {
          if (this.selectionStart === this.selectionEnd) {
            return;
          }
          fabric.copiedText = this.getSelectedText();
          if (!fabric.disableStyleCopyPaste) {
            fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);
          } else {
            fabric.copiedTextStyle = null;
          }
          this._copyDone = true;
        },
        /**
         * Pastes text
         * @param {Event} e Event object
         */
        paste: function() {
          this.fromPaste = true;
        },
        /**
         * @private
         * @param {Event} e Event object
         * @return {Object} Clipboard data object
         */
        _getClipboardData: function(e2) {
          return e2 && e2.clipboardData || fabric.window.clipboardData;
        },
        /**
         * Finds the width in pixels before the cursor on the same line
         * @private
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @return {Number} widthBeforeCursor width before cursor
         */
        _getWidthBeforeCursor: function(lineIndex, charIndex) {
          var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;
          if (charIndex > 0) {
            bound = this.__charBounds[lineIndex][charIndex - 1];
            widthBeforeCursor += bound.left + bound.width;
          }
          return widthBeforeCursor;
        },
        /**
         * Gets start offset of a selection
         * @param {Event} e Event object
         * @param {Boolean} isRight
         * @return {Number}
         */
        getDownCursorOffset: function(e2, isRight) {
          var selectionProp = this._getSelectionForOffset(e2, isRight), cursorLocation = this.get2DCursorLocation(selectionProp), lineIndex = cursorLocation.lineIndex;
          if (lineIndex === this._textLines.length - 1 || e2.metaKey || e2.keyCode === 34) {
            return this._text.length - selectionProp;
          }
          var charIndex = cursorLocation.charIndex, widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex), indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor), textAfterCursor = this._textLines[lineIndex].slice(charIndex);
          return textAfterCursor.length + indexOnOtherLine + 1 + this.missingNewlineOffset(lineIndex);
        },
        /**
         * private
         * Helps finding if the offset should be counted from Start or End
         * @param {Event} e Event object
         * @param {Boolean} isRight
         * @return {Number}
         */
        _getSelectionForOffset: function(e2, isRight) {
          if (e2.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {
            return this.selectionEnd;
          } else {
            return this.selectionStart;
          }
        },
        /**
         * @param {Event} e Event object
         * @param {Boolean} isRight
         * @return {Number}
         */
        getUpCursorOffset: function(e2, isRight) {
          var selectionProp = this._getSelectionForOffset(e2, isRight), cursorLocation = this.get2DCursorLocation(selectionProp), lineIndex = cursorLocation.lineIndex;
          if (lineIndex === 0 || e2.metaKey || e2.keyCode === 33) {
            return -selectionProp;
          }
          var charIndex = cursorLocation.charIndex, widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex), indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor), textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex), missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);
          return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length + (1 - missingNewlineOffset);
        },
        /**
         * for a given width it founds the matching character.
         * @private
         */
        _getIndexOnLine: function(lineIndex, width) {
          var line = this._textLines[lineIndex], lineLeftOffset = this._getLineLeftOffset(lineIndex), widthOfCharsOnLine = lineLeftOffset, indexOnLine = 0, charWidth, foundMatch;
          for (var j2 = 0, jlen = line.length; j2 < jlen; j2++) {
            charWidth = this.__charBounds[lineIndex][j2].width;
            widthOfCharsOnLine += charWidth;
            if (widthOfCharsOnLine > width) {
              foundMatch = true;
              var leftEdge = widthOfCharsOnLine - charWidth, rightEdge = widthOfCharsOnLine, offsetFromLeftEdge = Math.abs(leftEdge - width), offsetFromRightEdge = Math.abs(rightEdge - width);
              indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j2 : j2 - 1;
              break;
            }
          }
          if (!foundMatch) {
            indexOnLine = line.length - 1;
          }
          return indexOnLine;
        },
        /**
         * Moves cursor down
         * @param {Event} e Event object
         */
        moveCursorDown: function(e2) {
          if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
            return;
          }
          this._moveCursorUpOrDown("Down", e2);
        },
        /**
         * Moves cursor up
         * @param {Event} e Event object
         */
        moveCursorUp: function(e2) {
          if (this.selectionStart === 0 && this.selectionEnd === 0) {
            return;
          }
          this._moveCursorUpOrDown("Up", e2);
        },
        /**
         * Moves cursor up or down, fires the events
         * @param {String} direction 'Up' or 'Down'
         * @param {Event} e Event object
         */
        _moveCursorUpOrDown: function(direction, e2) {
          var action = "get" + direction + "CursorOffset", offset = this[action](e2, this._selectionDirection === "right");
          if (e2.shiftKey) {
            this.moveCursorWithShift(offset);
          } else {
            this.moveCursorWithoutShift(offset);
          }
          if (offset !== 0) {
            this.setSelectionInBoundaries();
            this.abortCursorAnimation();
            this._currentCursorOpacity = 1;
            this.initDelayedCursor();
            this._fireSelectionChanged();
            this._updateTextarea();
          }
        },
        /**
         * Moves cursor with shift
         * @param {Number} offset
         */
        moveCursorWithShift: function(offset) {
          var newSelection = this._selectionDirection === "left" ? this.selectionStart + offset : this.selectionEnd + offset;
          this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);
          return offset !== 0;
        },
        /**
         * Moves cursor up without shift
         * @param {Number} offset
         */
        moveCursorWithoutShift: function(offset) {
          if (offset < 0) {
            this.selectionStart += offset;
            this.selectionEnd = this.selectionStart;
          } else {
            this.selectionEnd += offset;
            this.selectionStart = this.selectionEnd;
          }
          return offset !== 0;
        },
        /**
         * Moves cursor left
         * @param {Event} e Event object
         */
        moveCursorLeft: function(e2) {
          if (this.selectionStart === 0 && this.selectionEnd === 0) {
            return;
          }
          this._moveCursorLeftOrRight("Left", e2);
        },
        /**
         * @private
         * @return {Boolean} true if a change happened
         */
        _move: function(e2, prop, direction) {
          var newValue;
          if (e2.altKey) {
            newValue = this["findWordBoundary" + direction](this[prop]);
          } else if (e2.metaKey || e2.keyCode === 35 || e2.keyCode === 36) {
            newValue = this["findLineBoundary" + direction](this[prop]);
          } else {
            this[prop] += direction === "Left" ? -1 : 1;
            return true;
          }
          if (typeof newValue !== void 0 && this[prop] !== newValue) {
            this[prop] = newValue;
            return true;
          }
        },
        /**
         * @private
         */
        _moveLeft: function(e2, prop) {
          return this._move(e2, prop, "Left");
        },
        /**
         * @private
         */
        _moveRight: function(e2, prop) {
          return this._move(e2, prop, "Right");
        },
        /**
         * Moves cursor left without keeping selection
         * @param {Event} e
         */
        moveCursorLeftWithoutShift: function(e2) {
          var change = true;
          this._selectionDirection = "left";
          if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {
            change = this._moveLeft(e2, "selectionStart");
          }
          this.selectionEnd = this.selectionStart;
          return change;
        },
        /**
         * Moves cursor left while keeping selection
         * @param {Event} e
         */
        moveCursorLeftWithShift: function(e2) {
          if (this._selectionDirection === "right" && this.selectionStart !== this.selectionEnd) {
            return this._moveLeft(e2, "selectionEnd");
          } else if (this.selectionStart !== 0) {
            this._selectionDirection = "left";
            return this._moveLeft(e2, "selectionStart");
          }
        },
        /**
         * Moves cursor right
         * @param {Event} e Event object
         */
        moveCursorRight: function(e2) {
          if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
            return;
          }
          this._moveCursorLeftOrRight("Right", e2);
        },
        /**
         * Moves cursor right or Left, fires event
         * @param {String} direction 'Left', 'Right'
         * @param {Event} e Event object
         */
        _moveCursorLeftOrRight: function(direction, e2) {
          var actionName = "moveCursor" + direction + "With";
          this._currentCursorOpacity = 1;
          if (e2.shiftKey) {
            actionName += "Shift";
          } else {
            actionName += "outShift";
          }
          if (this[actionName](e2)) {
            this.abortCursorAnimation();
            this.initDelayedCursor();
            this._fireSelectionChanged();
            this._updateTextarea();
          }
        },
        /**
         * Moves cursor right while keeping selection
         * @param {Event} e
         */
        moveCursorRightWithShift: function(e2) {
          if (this._selectionDirection === "left" && this.selectionStart !== this.selectionEnd) {
            return this._moveRight(e2, "selectionStart");
          } else if (this.selectionEnd !== this._text.length) {
            this._selectionDirection = "right";
            return this._moveRight(e2, "selectionEnd");
          }
        },
        /**
         * Moves cursor right without keeping selection
         * @param {Event} e Event object
         */
        moveCursorRightWithoutShift: function(e2) {
          var changed = true;
          this._selectionDirection = "right";
          if (this.selectionStart === this.selectionEnd) {
            changed = this._moveRight(e2, "selectionStart");
            this.selectionEnd = this.selectionStart;
          } else {
            this.selectionStart = this.selectionEnd;
          }
          return changed;
        },
        /**
         * Removes characters from start/end
         * start/end ar per grapheme position in _text array.
         *
         * @param {Number} start
         * @param {Number} end default to start + 1
         */
        removeChars: function(start, end) {
          if (typeof end === "undefined") {
            end = start + 1;
          }
          this.removeStyleFromTo(start, end);
          this._text.splice(start, end - start);
          this.text = this._text.join("");
          this.set("dirty", true);
          if (this._shouldClearDimensionCache()) {
            this.initDimensions();
            this.setCoords();
          }
          this._removeExtraneousStyles();
        },
        /**
         * insert characters at start position, before start position.
         * start  equal 1 it means the text get inserted between actual grapheme 0 and 1
         * if style array is provided, it must be as the same length of text in graphemes
         * if end is provided and is bigger than start, old text is replaced.
         * start/end ar per grapheme position in _text array.
         *
         * @param {String} text text to insert
         * @param {Array} style array of style objects
         * @param {Number} start
         * @param {Number} end default to start + 1
         */
        insertChars: function(text, style, start, end) {
          if (typeof end === "undefined") {
            end = start;
          }
          if (end > start) {
            this.removeStyleFromTo(start, end);
          }
          var graphemes = fabric.util.string.graphemeSplit(text);
          this.insertNewStyleBlock(graphemes, start, style);
          this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));
          this.text = this._text.join("");
          this.set("dirty", true);
          if (this._shouldClearDimensionCache()) {
            this.initDimensions();
            this.setCoords();
          }
          this._removeExtraneousStyles();
        }
      }
    );
    (function() {
      var toFixed = fabric.util.toFixed, multipleSpacesRegex = /  +/g;
      fabric.util.object.extend(
        fabric.Text.prototype,
        /** @lends fabric.Text.prototype */
        {
          /**
           * Returns SVG representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          _toSVG: function() {
            var offsets = this._getSVGLeftTopOffsets(), textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);
            return this._wrapSVGTextAndBg(textAndBg);
          },
          /**
           * Returns svg representation of an instance
           * @param {Function} [reviver] Method for further parsing of svg representation.
           * @return {String} svg representation of an instance
           */
          toSVG: function(reviver) {
            return this._createBaseSVGMarkup(
              this._toSVG(),
              { reviver, noStyle: true, withShadow: true }
            );
          },
          /**
           * @private
           */
          _getSVGLeftTopOffsets: function() {
            return {
              textLeft: -this.width / 2,
              textTop: -this.height / 2,
              lineTop: this.getHeightOfLine(0)
            };
          },
          /**
           * @private
           */
          _wrapSVGTextAndBg: function(textAndBg) {
            var noShadow = true, textDecoration = this.getSvgTextDecoration(this);
            return [
              textAndBg.textBgRects.join(""),
              '		<text xml:space="preserve" ',
              this.fontFamily ? 'font-family="' + this.fontFamily.replace(/"/g, "'") + '" ' : "",
              this.fontSize ? 'font-size="' + this.fontSize + '" ' : "",
              this.fontStyle ? 'font-style="' + this.fontStyle + '" ' : "",
              this.fontWeight ? 'font-weight="' + this.fontWeight + '" ' : "",
              textDecoration ? 'text-decoration="' + textDecoration + '" ' : "",
              'style="',
              this.getSvgStyles(noShadow),
              '"',
              this.addPaintOrder(),
              " >",
              textAndBg.textSpans.join(""),
              "</text>\n"
            ];
          },
          /**
           * @private
           * @param {Number} textTopOffset Text top offset
           * @param {Number} textLeftOffset Text left offset
           * @return {Object}
           */
          _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {
            var textSpans = [], textBgRects = [], height = textTopOffset, lineOffset;
            this._setSVGBg(textBgRects);
            for (var i2 = 0, len = this._textLines.length; i2 < len; i2++) {
              lineOffset = this._getLineLeftOffset(i2);
              if (this.textBackgroundColor || this.styleHas("textBackgroundColor", i2)) {
                this._setSVGTextLineBg(textBgRects, i2, textLeftOffset + lineOffset, height);
              }
              this._setSVGTextLineText(textSpans, i2, textLeftOffset + lineOffset, height);
              height += this.getHeightOfLine(i2);
            }
            return {
              textSpans,
              textBgRects
            };
          },
          /**
           * @private
           */
          _createTextCharSpan: function(_char, styleDecl, left, top) {
            var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex), styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace), fillStyles = styleProps ? 'style="' + styleProps + '"' : "", dy = styleDecl.deltaY, dySpan = "", NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
            if (dy) {
              dySpan = ' dy="' + toFixed(dy, NUM_FRACTION_DIGITS) + '" ';
            }
            return [
              '<tspan x="',
              toFixed(left, NUM_FRACTION_DIGITS),
              '" y="',
              toFixed(top, NUM_FRACTION_DIGITS),
              '" ',
              dySpan,
              fillStyles,
              ">",
              fabric.util.string.escapeXml(_char),
              "</tspan>"
            ].join("");
          },
          _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {
            var lineHeight = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf("justify") !== -1, actualStyle, nextStyle, charsToRender = "", charBox, style, boxWidth = 0, line = this._textLines[lineIndex], timeToRender;
            textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;
            for (var i2 = 0, len = line.length - 1; i2 <= len; i2++) {
              timeToRender = i2 === len || this.charSpacing;
              charsToRender += line[i2];
              charBox = this.__charBounds[lineIndex][i2];
              if (boxWidth === 0) {
                textLeftOffset += charBox.kernedWidth - charBox.width;
                boxWidth += charBox.width;
              } else {
                boxWidth += charBox.kernedWidth;
              }
              if (isJustify && !timeToRender) {
                if (this._reSpaceAndTab.test(line[i2])) {
                  timeToRender = true;
                }
              }
              if (!timeToRender) {
                actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i2);
                nextStyle = this.getCompleteStyleDeclaration(lineIndex, i2 + 1);
                timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);
              }
              if (timeToRender) {
                style = this._getStyleDeclaration(lineIndex, i2) || {};
                textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));
                charsToRender = "";
                actualStyle = nextStyle;
                textLeftOffset += boxWidth;
                boxWidth = 0;
              }
            }
          },
          _pushTextBgRect: function(textBgRects, color, left, top, width, height) {
            var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
            textBgRects.push(
              "		<rect ",
              this._getFillAttributes(color),
              ' x="',
              toFixed(left, NUM_FRACTION_DIGITS),
              '" y="',
              toFixed(top, NUM_FRACTION_DIGITS),
              '" width="',
              toFixed(width, NUM_FRACTION_DIGITS),
              '" height="',
              toFixed(height, NUM_FRACTION_DIGITS),
              '"></rect>\n'
            );
          },
          _setSVGTextLineBg: function(textBgRects, i2, leftOffset, textTopOffset) {
            var line = this._textLines[i2], heightOfLine = this.getHeightOfLine(i2) / this.lineHeight, boxWidth = 0, boxStart = 0, charBox, currentColor, lastColor = this.getValueOfPropertyAt(i2, 0, "textBackgroundColor");
            for (var j2 = 0, jlen = line.length; j2 < jlen; j2++) {
              charBox = this.__charBounds[i2][j2];
              currentColor = this.getValueOfPropertyAt(i2, j2, "textBackgroundColor");
              if (currentColor !== lastColor) {
                lastColor && this._pushTextBgRect(
                  textBgRects,
                  lastColor,
                  leftOffset + boxStart,
                  textTopOffset,
                  boxWidth,
                  heightOfLine
                );
                boxStart = charBox.left;
                boxWidth = charBox.width;
                lastColor = currentColor;
              } else {
                boxWidth += charBox.kernedWidth;
              }
            }
            currentColor && this._pushTextBgRect(
              textBgRects,
              currentColor,
              leftOffset + boxStart,
              textTopOffset,
              boxWidth,
              heightOfLine
            );
          },
          /**
           * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
           * we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
           *
           * @private
           * @param {*} value
           * @return {String}
           */
          _getFillAttributes: function(value) {
            var fillColor = value && typeof value === "string" ? new fabric.Color(value) : "";
            if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {
              return 'fill="' + value + '"';
            }
            return 'opacity="' + fillColor.getAlpha() + '" fill="' + fillColor.setAlpha(1).toRgb() + '"';
          },
          /**
           * @private
           */
          _getSVGLineTopOffset: function(lineIndex) {
            var lineTopOffset = 0, lastHeight = 0;
            for (var j2 = 0; j2 < lineIndex; j2++) {
              lineTopOffset += this.getHeightOfLine(j2);
            }
            lastHeight = this.getHeightOfLine(j2);
            return {
              lineTop: lineTopOffset,
              offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)
            };
          },
          /**
           * Returns styles-string for svg-export
           * @param {Boolean} skipShadow a boolean to skip shadow filter output
           * @return {String}
           */
          getSvgStyles: function(skipShadow) {
            var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);
            return svgStyle + " white-space: pre;";
          }
        }
      );
    })();
    (function(global2) {
      "use strict";
      var fabric2 = global2.fabric || (global2.fabric = {});
      fabric2.Textbox = fabric2.util.createClass(fabric2.IText, fabric2.Observable, {
        /**
         * Type of an object
         * @type String
         * @default
         */
        type: "textbox",
        /**
         * Minimum width of textbox, in pixels.
         * @type Number
         * @default
         */
        minWidth: 20,
        /**
         * Minimum calculated width of a textbox, in pixels.
         * fixed to 2 so that an empty textbox cannot go to 0
         * and is still selectable without text.
         * @type Number
         * @default
         */
        dynamicMinWidth: 2,
        /**
         * Cached array of text wrapping.
         * @type Array
         */
        __cachedLines: null,
        /**
         * Override standard Object class values
         */
        lockScalingFlip: true,
        /**
         * Override standard Object class values
         * Textbox needs this on false
         */
        noScaleCache: false,
        /**
         * Properties which when set cause object to change dimensions
         * @type Object
         * @private
         */
        _dimensionAffectingProps: fabric2.Text.prototype._dimensionAffectingProps.concat("width"),
        /**
         * Use this regular expression to split strings in breakable lines
         * @private
         */
        _wordJoiners: /[ \t\r]/,
        /**
         * Use this boolean property in order to split strings that have no white space concept.
         * this is a cheap way to help with chinese/japanese
         * @type Boolean
         * @since 2.6.0
         */
        splitByGrapheme: false,
        /**
         * Unlike superclass's version of this function, Textbox does not update
         * its width.
         * @private
         * @override
         */
        initDimensions: function() {
          if (this.__skipDimension) {
            return;
          }
          this.isEditing && this.initDelayedCursor();
          this.clearContextTop();
          this._clearCache();
          this.dynamicMinWidth = 0;
          this._styleMap = this._generateStyleMap(this._splitText());
          if (this.dynamicMinWidth > this.width) {
            this._set("width", this.dynamicMinWidth);
          }
          if (this.textAlign.indexOf("justify") !== -1) {
            this.enlargeSpaces();
          }
          this.height = this.calcTextHeight();
          this.saveState({ propertySet: "_dimensionAffectingProps" });
        },
        /**
         * Generate an object that translates the style object so that it is
         * broken up by visual lines (new lines and automatic wrapping).
         * The original text styles object is broken up by actual lines (new lines only),
         * which is only sufficient for Text / IText
         * @private
         */
        _generateStyleMap: function(textInfo) {
          var realLineCount = 0, realLineCharCount = 0, charCount = 0, map = {};
          for (var i2 = 0; i2 < textInfo.graphemeLines.length; i2++) {
            if (textInfo.graphemeText[charCount] === "\n" && i2 > 0) {
              realLineCharCount = 0;
              charCount++;
              realLineCount++;
            } else if (!this.splitByGrapheme && this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i2 > 0) {
              realLineCharCount++;
              charCount++;
            }
            map[i2] = { line: realLineCount, offset: realLineCharCount };
            charCount += textInfo.graphemeLines[i2].length;
            realLineCharCount += textInfo.graphemeLines[i2].length;
          }
          return map;
        },
        /**
         * Returns true if object has a style property or has it on a specified line
         * @param {Number} lineIndex
         * @return {Boolean}
         */
        styleHas: function(property, lineIndex) {
          if (this._styleMap && !this.isWrapping) {
            var map = this._styleMap[lineIndex];
            if (map) {
              lineIndex = map.line;
            }
          }
          return fabric2.Text.prototype.styleHas.call(this, property, lineIndex);
        },
        /**
         * Returns true if object has no styling or no styling in a line
         * @param {Number} lineIndex , lineIndex is on wrapped lines.
         * @return {Boolean}
         */
        isEmptyStyles: function(lineIndex) {
          if (!this.styles) {
            return true;
          }
          var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false, map = this._styleMap[lineIndex], mapNextLine = this._styleMap[lineIndex + 1];
          if (map) {
            lineIndex = map.line;
            offset = map.offset;
          }
          if (mapNextLine) {
            nextLineIndex = mapNextLine.line;
            shouldLimit = nextLineIndex === lineIndex;
            nextOffset = mapNextLine.offset;
          }
          obj = typeof lineIndex === "undefined" ? this.styles : { line: this.styles[lineIndex] };
          for (var p1 in obj) {
            for (var p2 in obj[p1]) {
              if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {
                for (var p3 in obj[p1][p2]) {
                  return false;
                }
              }
            }
          }
          return true;
        },
        /**
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @private
         */
        _getStyleDeclaration: function(lineIndex, charIndex) {
          if (this._styleMap && !this.isWrapping) {
            var map = this._styleMap[lineIndex];
            if (!map) {
              return null;
            }
            lineIndex = map.line;
            charIndex = map.offset + charIndex;
          }
          return this.callSuper("_getStyleDeclaration", lineIndex, charIndex);
        },
        /**
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @param {Object} style
         * @private
         */
        _setStyleDeclaration: function(lineIndex, charIndex, style) {
          var map = this._styleMap[lineIndex];
          lineIndex = map.line;
          charIndex = map.offset + charIndex;
          this.styles[lineIndex][charIndex] = style;
        },
        /**
         * @param {Number} lineIndex
         * @param {Number} charIndex
         * @private
         */
        _deleteStyleDeclaration: function(lineIndex, charIndex) {
          var map = this._styleMap[lineIndex];
          lineIndex = map.line;
          charIndex = map.offset + charIndex;
          delete this.styles[lineIndex][charIndex];
        },
        /**
         * probably broken need a fix
         * Returns the real style line that correspond to the wrapped lineIndex line
         * Used just to verify if the line does exist or not.
         * @param {Number} lineIndex
         * @returns {Boolean} if the line exists or not
         * @private
         */
        _getLineStyle: function(lineIndex) {
          var map = this._styleMap[lineIndex];
          return !!this.styles[map.line];
        },
        /**
         * Set the line style to an empty object so that is initialized
         * @param {Number} lineIndex
         * @param {Object} style
         * @private
         */
        _setLineStyle: function(lineIndex) {
          var map = this._styleMap[lineIndex];
          this.styles[map.line] = {};
        },
        /**
         * Wraps text using the 'width' property of Textbox. First this function
         * splits text on newlines, so we preserve newlines entered by the user.
         * Then it wraps each line using the width of the Textbox by calling
         * _wrapLine().
         * @param {Array} lines The string array of text that is split into lines
         * @param {Number} desiredWidth width you want to wrap to
         * @returns {Array} Array of lines
         */
        _wrapText: function(lines, desiredWidth) {
          var wrapped = [], i2;
          this.isWrapping = true;
          for (i2 = 0; i2 < lines.length; i2++) {
            wrapped = wrapped.concat(this._wrapLine(lines[i2], i2, desiredWidth));
          }
          this.isWrapping = false;
          return wrapped;
        },
        /**
         * Helper function to measure a string of text, given its lineIndex and charIndex offset
         * it gets called when charBounds are not available yet.
         * @param {CanvasRenderingContext2D} ctx
         * @param {String} text
         * @param {number} lineIndex
         * @param {number} charOffset
         * @returns {number}
         * @private
         */
        _measureWord: function(word, lineIndex, charOffset) {
          var width = 0, prevGrapheme, skipLeft = true;
          charOffset = charOffset || 0;
          for (var i2 = 0, len = word.length; i2 < len; i2++) {
            var box = this._getGraphemeBox(word[i2], lineIndex, i2 + charOffset, prevGrapheme, skipLeft);
            width += box.kernedWidth;
            prevGrapheme = word[i2];
          }
          return width;
        },
        /**
         * Wraps a line of text using the width of the Textbox and a context.
         * @param {Array} line The grapheme array that represent the line
         * @param {Number} lineIndex
         * @param {Number} desiredWidth width you want to wrap the line to
         * @param {Number} reservedSpace space to remove from wrapping for custom functionalities
         * @returns {Array} Array of line(s) into which the given text is wrapped
         * to.
         */
        _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {
          var lineWidth = 0, splitByGrapheme = this.splitByGrapheme, graphemeLines = [], line = [], words = splitByGrapheme ? fabric2.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners), word = "", offset = 0, infix = splitByGrapheme ? "" : " ", wordWidth = 0, infixWidth = 0, largestWordWidth = 0, lineJustStarted = true, additionalSpace = this._getWidthOfCharSpacing(), reservedSpace = reservedSpace || 0;
          if (words.length === 0) {
            words.push([]);
          }
          desiredWidth -= reservedSpace;
          for (var i2 = 0; i2 < words.length; i2++) {
            word = splitByGrapheme ? words[i2] : fabric2.util.string.graphemeSplit(words[i2]);
            wordWidth = this._measureWord(word, lineIndex, offset);
            offset += word.length;
            lineWidth += infixWidth + wordWidth - additionalSpace;
            if (lineWidth > desiredWidth && !lineJustStarted) {
              graphemeLines.push(line);
              line = [];
              lineWidth = wordWidth;
              lineJustStarted = true;
            } else {
              lineWidth += additionalSpace;
            }
            if (!lineJustStarted && !splitByGrapheme) {
              line.push(infix);
            }
            line = line.concat(word);
            infixWidth = splitByGrapheme ? 0 : this._measureWord([infix], lineIndex, offset);
            offset++;
            lineJustStarted = false;
            if (wordWidth > largestWordWidth) {
              largestWordWidth = wordWidth;
            }
          }
          i2 && graphemeLines.push(line);
          if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {
            this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;
          }
          return graphemeLines;
        },
        /**
         * Detect if the text line is ended with an hard break
         * text and itext do not have wrapping, return false
         * @param {Number} lineIndex text to split
         * @return {Boolean}
         */
        isEndOfWrapping: function(lineIndex) {
          if (!this._styleMap[lineIndex + 1]) {
            return true;
          }
          if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {
            return true;
          }
          return false;
        },
        /**
         * Detect if a line has a linebreak and so we need to account for it when moving
         * and counting style.
         * @return Number
         */
        missingNewlineOffset: function(lineIndex) {
          if (this.splitByGrapheme) {
            return this.isEndOfWrapping(lineIndex) ? 1 : 0;
          }
          return 1;
        },
        /**
        * Gets lines of text to render in the Textbox. This function calculates
        * text wrapping on the fly every time it is called.
        * @param {String} text text to split
        * @returns {Array} Array of lines in the Textbox.
        * @override
        */
        _splitTextIntoLines: function(text) {
          var newText = fabric2.Text.prototype._splitTextIntoLines.call(this, text), graphemeLines = this._wrapText(newText.lines, this.width), lines = new Array(graphemeLines.length);
          for (var i2 = 0; i2 < graphemeLines.length; i2++) {
            lines[i2] = graphemeLines[i2].join("");
          }
          newText.lines = lines;
          newText.graphemeLines = graphemeLines;
          return newText;
        },
        getMinWidth: function() {
          return Math.max(this.minWidth, this.dynamicMinWidth);
        },
        _removeExtraneousStyles: function() {
          var linesToKeep = {};
          for (var prop in this._styleMap) {
            if (this._textLines[prop]) {
              linesToKeep[this._styleMap[prop].line] = 1;
            }
          }
          for (var prop in this.styles) {
            if (!linesToKeep[prop]) {
              delete this.styles[prop];
            }
          }
        },
        /**
         * Returns object representation of an instance
         * @method toObject
         * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
         * @return {Object} object representation of an instance
         */
        toObject: function(propertiesToInclude) {
          return this.callSuper("toObject", ["minWidth", "splitByGrapheme"].concat(propertiesToInclude));
        }
      });
      fabric2.Textbox.fromObject = function(object, callback) {
        return fabric2.Object._fromObject("Textbox", object, callback, "text");
      };
    })(typeof exports !== "undefined" ? exports : exports);
    (function() {
      var controlsUtils = fabric.controlsUtils, scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler, scaleStyleHandler = controlsUtils.scaleCursorStyleHandler, scalingEqually = controlsUtils.scalingEqually, scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX, scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY, scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName, objectControls = fabric.Object.prototype.controls;
      objectControls.ml = new fabric.Control({
        x: -0.5,
        y: 0,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingXOrSkewingY,
        getActionName: scaleOrSkewActionName
      });
      objectControls.mr = new fabric.Control({
        x: 0.5,
        y: 0,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingXOrSkewingY,
        getActionName: scaleOrSkewActionName
      });
      objectControls.mb = new fabric.Control({
        x: 0,
        y: 0.5,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingYOrSkewingX,
        getActionName: scaleOrSkewActionName
      });
      objectControls.mt = new fabric.Control({
        x: 0,
        y: -0.5,
        cursorStyleHandler: scaleSkewStyleHandler,
        actionHandler: scalingYOrSkewingX,
        getActionName: scaleOrSkewActionName
      });
      objectControls.tl = new fabric.Control({
        x: -0.5,
        y: -0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.tr = new fabric.Control({
        x: 0.5,
        y: -0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.bl = new fabric.Control({
        x: -0.5,
        y: 0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.br = new fabric.Control({
        x: 0.5,
        y: 0.5,
        cursorStyleHandler: scaleStyleHandler,
        actionHandler: scalingEqually
      });
      objectControls.mtr = new fabric.Control({
        x: 0,
        y: -0.5,
        actionHandler: controlsUtils.rotationWithSnapping,
        cursorStyleHandler: controlsUtils.rotationStyleHandler,
        offsetY: -40,
        withConnection: true,
        actionName: "rotate"
      });
      if (fabric.Textbox) {
        var textBoxControls = fabric.Textbox.prototype.controls = {};
        textBoxControls.mtr = objectControls.mtr;
        textBoxControls.tr = objectControls.tr;
        textBoxControls.br = objectControls.br;
        textBoxControls.tl = objectControls.tl;
        textBoxControls.bl = objectControls.bl;
        textBoxControls.mt = objectControls.mt;
        textBoxControls.mb = objectControls.mb;
        textBoxControls.mr = new fabric.Control({
          x: 0.5,
          y: 0,
          actionHandler: controlsUtils.changeWidth,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionName: "resizing"
        });
        textBoxControls.ml = new fabric.Control({
          x: -0.5,
          y: 0,
          actionHandler: controlsUtils.changeWidth,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionName: "resizing"
        });
      }
    })();
  }
});

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a2, b2) {
        return Object.prototype.hasOwnProperty.call(a2, b2);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i2, arrLen = arr.length;
        for (i2 = 0; i2 < arrLen; ++i2) {
          res.push(fn(arr[i2], i2));
        }
        return res;
      }
      function extend(a2, b2) {
        for (var i2 in b2) {
          if (hasOwnProp(b2, i2)) {
            a2[i2] = b2[i2];
          }
        }
        if (hasOwnProp(b2, "toString")) {
          a2.toString = b2.toString;
        }
        if (hasOwnProp(b2, "valueOf")) {
          a2.valueOf = b2.valueOf;
        }
        return a2;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m2) {
        if (m2._pf == null) {
          m2._pf = defaultParsingFlags();
        }
        return m2._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t2 = Object(this), len = t2.length >>> 0, i2;
          for (i2 = 0; i2 < len; i2++) {
            if (i2 in t2 && fun.call(this, t2[i2], i2, t2)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m2) {
        if (m2._isValid == null) {
          var flags = getParsingFlags(m2), parsedParts = some.call(flags.parsedDateParts, function(i2) {
            return i2 != null;
          }), isNowValid = !isNaN(m2._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m2._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m2)) {
            m2._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m2._isValid;
      }
      function createInvalid(flags) {
        var m2 = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m2), flags);
        } else {
          getParsingFlags(m2).userInvalidated = true;
        }
        return m2;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i2, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i2 = 0; i2 < momentPropertiesLen; i2++) {
            prop = momentProperties[i2];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = /* @__PURE__ */ new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i2, key, argLen = arguments.length;
            for (i2 = 0; i2 < argLen; i2++) {
              arg = "";
              if (typeof arguments[i2] === "object") {
                arg += "\n[" + i2 + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i2];
              }
              args.push(arg);
            }
            warn(
              msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
            );
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i2;
        for (i2 in config) {
          if (hasOwnProp(config, i2)) {
            prop = config[i2];
            if (isFunction(prop)) {
              this[i2] = prop;
            } else {
              this["_" + i2] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
        );
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i2, res = [];
          for (i2 in obj) {
            if (hasOwnProp(obj, i2)) {
              res.push(i2);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(
              func.apply(this, arguments),
              token2
            );
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i2, length;
        for (i2 = 0, length = array.length; i2 < length; i2++) {
          if (formatTokenFunctions[array[i2]]) {
            array[i2] = formatTokenFunctions[array[i2]];
          } else {
            array[i2] = removeFormattingTokens(array[i2]);
          }
        }
        return function(mom) {
          var output = "", i3;
          for (i3 = 0; i3 < length; i3++) {
            output += isFunction(array[i3]) ? array[i3].call(mom, format2) : array[i3];
          }
          return output;
        };
      }
      function formatMoment(m2, format2) {
        if (!m2.isValid()) {
          return m2.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m2.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m2);
      }
      function expandFormat(format2, locale2) {
        var i2 = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i2 >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(
            localFormattingTokens,
            replaceLongDateFormatTokens
          );
          localFormattingTokens.lastIndex = 0;
          i2 -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u2;
        for (u2 in unitsObj) {
          if (hasOwnProp(unitsObj, u2)) {
            units.push({ unit: u2, priority: priorities[u2] });
          }
        }
        units.sort(function(a2, b2) {
          return a2.priority - b2.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
              value,
              mom.month(),
              daysInMonth(value, mom.month())
            );
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
          for (i2 = 0; i2 < prioritizedLen; i2++) {
            this[prioritized[i2].unit](units[prioritized[i2].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s2) {
        return regexEscape(
          s2.replace("\\", "").replace(
            /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
            function(matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }
          )
        );
      }
      function regexEscape(s2) {
        return s2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i2, func = callback, tokenLen;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i2 = 0; i2 < tokenLen; i2++) {
          tokens[token2[i2]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n2, x) {
        return (n2 % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o2) {
          var i2;
          for (i2 = 0; i2 < this.length; ++i2) {
            if (this[i2] === o2) {
              return i2;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
        "_"
      ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m2, format2) {
        if (!m2) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m2.month()];
      }
      function localeMonthsShort(m2, format2) {
        if (!m2) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m2.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i2, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i2 = 0; i2 < 12; ++i2) {
            mom = createUTC([2e3, i2]);
            this._shortMonthsParse[i2] = this.monthsShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i2, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i2 = 0; i2 < 12; i2++) {
          mom = createUTC([2e3, i2]);
          if (strict && !this._longMonthsParse[i2]) {
            this._longMonthsParse[i2] = new RegExp(
              "^" + this.months(mom, "").replace(".", "") + "$",
              "i"
            );
            this._shortMonthsParse[i2] = new RegExp(
              "^" + this.monthsShort(mom, "").replace(".", "") + "$",
              "i"
            );
          }
          if (!strict && !this._monthsParse[i2]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
            return i2;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
            return i2;
          } else if (!strict && this._monthsParse[i2].test(monthName)) {
            return i2;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a2, b2) {
          return b2.length - a2.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
        for (i2 = 0; i2 < 12; i2++) {
          mom = createUTC([2e3, i2]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i2 = 0; i2 < 12; i2++) {
          shortPieces[i2] = regexEscape(shortPieces[i2]);
          longPieces[i2] = regexEscape(longPieces[i2]);
        }
        for (i2 = 0; i2 < 24; i2++) {
          mixedPieces[i2] = regexEscape(mixedPieces[i2]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._monthsShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken("Y", 0, 0, function() {
        var y2 = this.year();
        return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y2, m2, d2, h2, M, s2, ms) {
        var date;
        if (y2 < 100 && y2 >= 0) {
          date = new Date(y2 + 400, m2, d2, h2, M, s2, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y2);
          }
        } else {
          date = new Date(y2, m2, d2, h2, M, s2, ms);
        }
        return date;
      }
      function createUTCDate(y2) {
        var date, args;
        if (y2 < 100 && y2 >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y2 + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y2);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(
        ["w", "ww", "W", "WW"],
        function(input, week, config, token2) {
          week[token2.substr(0, 1)] = toInt(input);
        }
      );
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6
        // The week that contains Jan 6th is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n2) {
        return ws.slice(n2, 7).concat(ws.slice(0, n2));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m2, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
      }
      function localeWeekdaysShort(m2) {
        return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m2) {
        return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i2 = 0; i2 < 7; ++i2) {
            mom = createUTC([2e3, 1]).day(i2);
            this._minWeekdaysParse[i2] = this.weekdaysMin(
              mom,
              ""
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i2] = this.weekdaysShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i2, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i2 = 0; i2 < 7; i2++) {
          mom = createUTC([2e3, 1]).day(i2);
          if (strict && !this._fullWeekdaysParse[i2]) {
            this._fullWeekdaysParse[i2] = new RegExp(
              "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._shortWeekdaysParse[i2] = new RegExp(
              "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._minWeekdaysParse[i2] = new RegExp(
              "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
          }
          if (!this._weekdaysParse[i2]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
            return i2;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a2, b2) {
          return b2.length - a2.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
        for (i2 = 0; i2 < 7; i2++) {
          mom = createUTC([2e3, 1]).day(i2);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._weekdaysShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
        this._weekdaysMinStrictRegex = new RegExp(
          "^(" + minPieces.join("|") + ")",
          "i"
        );
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(
            this.hours(),
            this.minutes(),
            lowercase
          );
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i2, minl = Math.min(arr1.length, arr2.length);
        for (i2 = 0; i2 < minl; i2 += 1) {
          if (arr1[i2] !== arr2[i2]) {
            return i2;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i2 = 0, j2, next, locale2, split;
        while (i2 < names.length) {
          split = normalizeLocale(names[i2]).split("-");
          j2 = split.length;
          next = normalizeLocale(names[i2 + 1]);
          next = next ? next.split("-") : null;
          while (j2 > 0) {
            locale2 = loadLocale(split.slice(0, j2).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j2 && commonPrefix(split, next) >= j2 - 1) {
              break;
            }
            j2--;
          }
          i2++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return name.match("^[^/\\\\]*$") != null;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = __require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e2) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn(
                "Locale " + key + " not found. Did you forget to load it?"
              );
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple(
              "defineLocaleOverride",
              "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
            );
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m2) {
        var overflow, a2 = m2._a;
        if (a2 && getParsingFlags(m2).overflow === -2) {
          overflow = a2[MONTH] < 0 || a2[MONTH] > 11 ? MONTH : a2[DATE] < 1 || a2[DATE] > daysInMonth(a2[YEAR], a2[MONTH]) ? DATE : a2[HOUR] < 0 || a2[HOUR] > 24 || a2[HOUR] === 24 && (a2[MINUTE] !== 0 || a2[SECOND] !== 0 || a2[MILLISECOND] !== 0) ? HOUR : a2[MINUTE] < 0 || a2[MINUTE] > 59 ? MINUTE : a2[SECOND] < 0 || a2[SECOND] > 59 ? SECOND : a2[MILLISECOND] < 0 || a2[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m2).overflow = overflow;
        }
        return m2;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i2, l2, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i2 = 0, l2 = isoDatesLen; i2 < l2; i2++) {
            if (isoDates[i2][1].exec(match[1])) {
              dateFormat = isoDates[i2][0];
              allowTime = isoDates[i2][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i2 = 0, l2 = isoTimesLen; i2 < l2; i2++) {
              if (isoTimes[i2][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i2][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s2) {
        return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
            parsedInput[0],
            parsedInput[1],
            parsedInput[2]
          ).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m2 = hm % 100, h2 = (hm - m2) / 100;
          return h2 * 60 + m2;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(
            match[4],
            match[3],
            match[2],
            match[5],
            match[6],
            match[7]
          );
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = /* @__PURE__ */ new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate(
        "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
        function(config) {
          config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
        }
      );
      function defaults(a2, b2, c2) {
        if (a2 != null) {
          return a2;
        }
        if (b2 != null) {
          return b2;
        }
        return c2;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i2, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i2 = 0; i2 < 3 && config._a[i2] == null; ++i2) {
          config._a[i2] = input[i2] = currentDate[i2];
        }
        for (; i2 < 7; i2++) {
          config._a[i2] = input[i2] = config._a[i2] == null ? i2 === 2 ? 1 : 0 : config._a[i2];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(
          null,
          input
        );
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w2 = config._w;
        if (w2.GG != null || w2.W != null || w2.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(
            w2.GG,
            config._a[YEAR],
            weekOfYear(createLocal(), 1, 4).year
          );
          week = defaults(w2.W, 1);
          weekday = defaults(w2.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w2.gg, config._a[YEAR], curWeek.year);
          week = defaults(w2.w, curWeek.week);
          if (w2.d != null) {
            weekday = w2.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w2.e != null) {
            weekday = w2.e + dow;
            if (w2.e < 0 || w2.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i2 = 0; i2 < tokenLen; i2++) {
          token2 = tokens2[i2];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(
              string.indexOf(parsedInput) + parsedInput.length
            );
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(
          config._locale,
          config._a[HOUR],
          config._meridiem
        );
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = /* @__PURE__ */ new Date(NaN);
          return;
        }
        for (i2 = 0; i2 < configfLen; i2++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i2];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i2 = normalizeObjectUnits(config._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
        config._a = map(
          [i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond],
          function(obj) {
            return obj && parseInt(obj, 10);
          }
        );
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c2 = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c2._isAMomentObject = true;
        c2._useUTC = c2._isUTC = isUTC;
        c2._l = locale2;
        c2._i = input;
        c2._f = format2;
        c2._strict = strict;
        return createFromConfig(c2);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate(
        "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid();
          }
        }
      ), prototypeMax = deprecate(
        "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid();
          }
        }
      );
      function pickBy(fn, moments) {
        var res, i2;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i2 = 1; i2 < moments.length; ++i2) {
          if (!moments[i2].isValid() || moments[i2][fn](res)) {
            res = moments[i2];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m2) {
        var key, unitHasDecimal = false, i2, orderLen = ordering.length;
        for (key in m2) {
          if (hasOwnProp(m2, key) && !(indexOf.call(ordering, key) !== -1 && (m2[key] == null || !isNaN(m2[key])))) {
            return false;
          }
        }
        for (i2 = 0; i2 < orderLen; ++i2) {
          if (m2[ordering[i2]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m2[ordering[i2]]) !== toInt(m2[ordering[i2]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
        minutes2 * 6e4 + // 1000 * 60
        hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
        for (i2 = 0; i2 < len; i2++) {
          if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m2) {
        return -Math.round(m2._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(
                this,
                createDuration(input - offset2, "m"),
                1,
                false
              );
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c2 = {}, other;
        copyConfig(c2, this);
        c2 = prepareConfig(c2);
        if (c2._a) {
          other = c2._isUTC ? createUTC(c2._a) : createLocal(c2._a);
          this._isDSTShifted = this.isValid() && compareArrays(c2._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
            // the millisecond decimal point is included in the match
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(
            createLocal(duration.from),
            createLocal(duration.to)
          );
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(
              name,
              "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
            );
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i2, property, propertyLen = properties.length;
        for (i2 = 0; i2 < propertyLen; i2 += 1) {
          property = properties[i2];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i2, property;
        for (i2 = 0; i2 < properties.length; i2 += 1) {
          property = properties[i2];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(
          output || this.localeData().calendar(format2, this, createLocal(now2))
        );
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a2, b2) {
        if (a2.date() < b2.date()) {
          return -monthDiff(b2, a2);
        }
        var wholeMonthDiff = (b2.year() - a2.year()) * 12 + (b2.month() - a2.month()), anchor = a2.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b2 - anchor < 0) {
          anchor2 = a2.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b2 - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a2.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b2 - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
        if (m2.year() < 0 || m2.year() > 9999) {
          return formatMoment(
            m2,
            utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
          }
        }
        return formatMoment(
          m2,
          utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate(
        "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
        function(key) {
          if (key === void 0) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        }
      );
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y2, m2, d2) {
        if (y2 < 100 && y2 >= 0) {
          return new Date(y2 + 400, m2, d2) - MS_PER_400_YEARS;
        } else {
          return new Date(y2, m2, d2).valueOf();
        }
      }
      function utcStartOfDate(y2, m2, d2) {
        if (y2 < 100 && y2 >= 0) {
          return Date.UTC(y2 + 400, m2, d2) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y2, m2, d2);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3,
              1
            );
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday()
            );
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1)
            );
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            );
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3 + 3,
              1
            ) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday() + 7
            ) - 1;
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1) + 7
            ) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            ) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m2 = this;
        return [
          m2.year(),
          m2.month(),
          m2.date(),
          m2.hour(),
          m2.minute(),
          m2.second(),
          m2.millisecond()
        ];
      }
      function toObject() {
        var m2 = this;
        return {
          years: m2.year(),
          months: m2.month(),
          date: m2.date(),
          hours: m2.hours(),
          minutes: m2.minutes(),
          seconds: m2.seconds(),
          milliseconds: m2.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(
        ["N", "NN", "NNN", "NNNN", "NNNNN"],
        function(input, array, config, token2) {
          var era = config._locale.erasParse(input, token2, config._strict);
          if (era) {
            getParsingFlags(config).era = era;
          } else {
            getParsingFlags(config).invalidEra = input;
          }
        }
      );
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m2, format2) {
        var i2, l2, date, eras = this._eras || getLocale("en")._eras;
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          switch (typeof eras[i2].since) {
            case "string":
              date = hooks(eras[i2].since).startOf("day");
              eras[i2].since = date.valueOf();
              break;
          }
          switch (typeof eras[i2].until) {
            case "undefined":
              eras[i2].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i2].until).startOf("day").valueOf();
              eras[i2].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i2, l2, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          name = eras[i2].name.toUpperCase();
          abbr = eras[i2].abbr.toUpperCase();
          narrow = eras[i2].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i2];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i2];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i2];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i2];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i2, l2, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].name;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i2, l2, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].narrow;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i2, l2, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].abbr;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i2, l2, dir, val, eras = this.localeData().eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          dir = eras[i2].since <= eras[i2].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
            return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l2, eras = this.eras();
        for (i2 = 0, l2 = eras.length; i2 < l2; ++i2) {
          namePieces.push(regexEscape(eras[i2].name));
          abbrPieces.push(regexEscape(eras[i2].abbr));
          narrowPieces.push(regexEscape(eras[i2].narrow));
          mixedPieces.push(regexEscape(eras[i2].name));
          mixedPieces.push(regexEscape(eras[i2].abbr));
          mixedPieces.push(regexEscape(eras[i2].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp(
          "^(" + narrowPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(
        ["gggg", "ggggg", "GGGG", "GGGGG"],
        function(input, week, config, token2) {
          week[token2.substr(0, 2)] = toInt(input);
        }
      );
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday(),
          this.localeData()._week.dow,
          this.localeData()._week.doy
        );
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
        );
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round(
          (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
        ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate(
        "dates accessor is deprecated. Use date instead.",
        getSetDayOfMonth
      );
      proto.months = deprecate(
        "months accessor is deprecated. Use month instead",
        getSetMonth
      );
      proto.years = deprecate(
        "years accessor is deprecated. Use year instead",
        getSetYear
      );
      proto.zone = deprecate(
        "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
        getSetZone
      );
      proto.isDSTShifted = deprecate(
        "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
        isDaylightSavingTimeShifted
      );
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i2, out = [];
        for (i2 = 0; i2 < 12; i2++) {
          out[i2] = get$1(format2, i2, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i2 = 0; i2 < 7; i2++) {
          out[i2] = get$1(format2, (i2 + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b2 = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        getSetGlobalLocale
      );
      hooks.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        getLocale
      );
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month/week
        w: null,
        // weeks to month
        M: 11
        // months to year
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a2 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a2 = a2 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a2 = a2 || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a2[2] = withoutSuffix;
        a2[3] = +posNegDuration > 0;
        a2[4] = locale2;
        return substituteTimeAgo.apply(null, a2);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s2, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s2 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s2 + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate(
        "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
        toISOString$1
      );
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.29.4";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        // <input type="datetime-local" step="0.001" />
        DATE: "YYYY-MM-DD",
        // <input type="date" />
        TIME: "HH:mm",
        // <input type="time" />
        TIME_SECONDS: "HH:mm:ss",
        // <input type="time" step="1" />
        TIME_MS: "HH:mm:ss.SSS",
        // <input type="time" step="0.001" />
        WEEK: "GGGG-[W]WW",
        // <input type="week" />
        MONTH: "YYYY-MM"
        // <input type="month" />
      };
      return hooks;
    });
  }
});

// node_modules/chart.js/dist/Chart.js
var require_Chart = __commonJS({
  "node_modules/chart.js/dist/Chart.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(function() {
        try {
          return require_moment();
        } catch (e2) {
        }
      }()) : typeof define === "function" && define.amd ? define(["require"], function(require2) {
        return factory(function() {
          try {
            return require2("moment");
          } catch (e2) {
          }
        }());
      }) : (global2 = global2 || self, global2.Chart = factory(global2.moment));
    })(exports, function(moment) {
      "use strict";
      moment = moment && moment.hasOwnProperty("default") ? moment["default"] : moment;
      function createCommonjsModule(fn, module2) {
        return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
      }
      function getCjsExportFromNamespace(n2) {
        return n2 && n2["default"] || n2;
      }
      var colorName = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
      var conversions = createCommonjsModule(function(module2) {
        var reverseKeywords = {};
        for (var key in colorName) {
          if (colorName.hasOwnProperty(key)) {
            reverseKeywords[colorName[key]] = key;
          }
        }
        var convert2 = module2.exports = {
          rgb: { channels: 3, labels: "rgb" },
          hsl: { channels: 3, labels: "hsl" },
          hsv: { channels: 3, labels: "hsv" },
          hwb: { channels: 3, labels: "hwb" },
          cmyk: { channels: 4, labels: "cmyk" },
          xyz: { channels: 3, labels: "xyz" },
          lab: { channels: 3, labels: "lab" },
          lch: { channels: 3, labels: "lch" },
          hex: { channels: 1, labels: ["hex"] },
          keyword: { channels: 1, labels: ["keyword"] },
          ansi16: { channels: 1, labels: ["ansi16"] },
          ansi256: { channels: 1, labels: ["ansi256"] },
          hcg: { channels: 3, labels: ["h", "c", "g"] },
          apple: { channels: 3, labels: ["r16", "g16", "b16"] },
          gray: { channels: 1, labels: ["gray"] }
        };
        for (var model in convert2) {
          if (convert2.hasOwnProperty(model)) {
            if (!("channels" in convert2[model])) {
              throw new Error("missing channels property: " + model);
            }
            if (!("labels" in convert2[model])) {
              throw new Error("missing channel labels property: " + model);
            }
            if (convert2[model].labels.length !== convert2[model].channels) {
              throw new Error("channel and label counts mismatch: " + model);
            }
            var channels = convert2[model].channels;
            var labels = convert2[model].labels;
            delete convert2[model].channels;
            delete convert2[model].labels;
            Object.defineProperty(convert2[model], "channels", { value: channels });
            Object.defineProperty(convert2[model], "labels", { value: labels });
          }
        }
        convert2.rgb.hsl = function(rgb) {
          var r2 = rgb[0] / 255;
          var g2 = rgb[1] / 255;
          var b2 = rgb[2] / 255;
          var min = Math.min(r2, g2, b2);
          var max = Math.max(r2, g2, b2);
          var delta = max - min;
          var h2;
          var s2;
          var l2;
          if (max === min) {
            h2 = 0;
          } else if (r2 === max) {
            h2 = (g2 - b2) / delta;
          } else if (g2 === max) {
            h2 = 2 + (b2 - r2) / delta;
          } else if (b2 === max) {
            h2 = 4 + (r2 - g2) / delta;
          }
          h2 = Math.min(h2 * 60, 360);
          if (h2 < 0) {
            h2 += 360;
          }
          l2 = (min + max) / 2;
          if (max === min) {
            s2 = 0;
          } else if (l2 <= 0.5) {
            s2 = delta / (max + min);
          } else {
            s2 = delta / (2 - max - min);
          }
          return [h2, s2 * 100, l2 * 100];
        };
        convert2.rgb.hsv = function(rgb) {
          var rdif;
          var gdif;
          var bdif;
          var h2;
          var s2;
          var r2 = rgb[0] / 255;
          var g2 = rgb[1] / 255;
          var b2 = rgb[2] / 255;
          var v2 = Math.max(r2, g2, b2);
          var diff = v2 - Math.min(r2, g2, b2);
          var diffc = function(c2) {
            return (v2 - c2) / 6 / diff + 1 / 2;
          };
          if (diff === 0) {
            h2 = s2 = 0;
          } else {
            s2 = diff / v2;
            rdif = diffc(r2);
            gdif = diffc(g2);
            bdif = diffc(b2);
            if (r2 === v2) {
              h2 = bdif - gdif;
            } else if (g2 === v2) {
              h2 = 1 / 3 + rdif - bdif;
            } else if (b2 === v2) {
              h2 = 2 / 3 + gdif - rdif;
            }
            if (h2 < 0) {
              h2 += 1;
            } else if (h2 > 1) {
              h2 -= 1;
            }
          }
          return [
            h2 * 360,
            s2 * 100,
            v2 * 100
          ];
        };
        convert2.rgb.hwb = function(rgb) {
          var r2 = rgb[0];
          var g2 = rgb[1];
          var b2 = rgb[2];
          var h2 = convert2.rgb.hsl(rgb)[0];
          var w2 = 1 / 255 * Math.min(r2, Math.min(g2, b2));
          b2 = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b2));
          return [h2, w2 * 100, b2 * 100];
        };
        convert2.rgb.cmyk = function(rgb) {
          var r2 = rgb[0] / 255;
          var g2 = rgb[1] / 255;
          var b2 = rgb[2] / 255;
          var c2;
          var m2;
          var y2;
          var k2;
          k2 = Math.min(1 - r2, 1 - g2, 1 - b2);
          c2 = (1 - r2 - k2) / (1 - k2) || 0;
          m2 = (1 - g2 - k2) / (1 - k2) || 0;
          y2 = (1 - b2 - k2) / (1 - k2) || 0;
          return [c2 * 100, m2 * 100, y2 * 100, k2 * 100];
        };
        function comparativeDistance(x, y2) {
          return Math.pow(x[0] - y2[0], 2) + Math.pow(x[1] - y2[1], 2) + Math.pow(x[2] - y2[2], 2);
        }
        convert2.rgb.keyword = function(rgb) {
          var reversed = reverseKeywords[rgb];
          if (reversed) {
            return reversed;
          }
          var currentClosestDistance = Infinity;
          var currentClosestKeyword;
          for (var keyword2 in colorName) {
            if (colorName.hasOwnProperty(keyword2)) {
              var value = colorName[keyword2];
              var distance = comparativeDistance(rgb, value);
              if (distance < currentClosestDistance) {
                currentClosestDistance = distance;
                currentClosestKeyword = keyword2;
              }
            }
          }
          return currentClosestKeyword;
        };
        convert2.keyword.rgb = function(keyword2) {
          return colorName[keyword2];
        };
        convert2.rgb.xyz = function(rgb) {
          var r2 = rgb[0] / 255;
          var g2 = rgb[1] / 255;
          var b2 = rgb[2] / 255;
          r2 = r2 > 0.04045 ? Math.pow((r2 + 0.055) / 1.055, 2.4) : r2 / 12.92;
          g2 = g2 > 0.04045 ? Math.pow((g2 + 0.055) / 1.055, 2.4) : g2 / 12.92;
          b2 = b2 > 0.04045 ? Math.pow((b2 + 0.055) / 1.055, 2.4) : b2 / 12.92;
          var x = r2 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
          var y2 = r2 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
          var z2 = r2 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
          return [x * 100, y2 * 100, z2 * 100];
        };
        convert2.rgb.lab = function(rgb) {
          var xyz = convert2.rgb.xyz(rgb);
          var x = xyz[0];
          var y2 = xyz[1];
          var z2 = xyz[2];
          var l2;
          var a2;
          var b2;
          x /= 95.047;
          y2 /= 100;
          z2 /= 108.883;
          x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
          z2 = z2 > 8856e-6 ? Math.pow(z2, 1 / 3) : 7.787 * z2 + 16 / 116;
          l2 = 116 * y2 - 16;
          a2 = 500 * (x - y2);
          b2 = 200 * (y2 - z2);
          return [l2, a2, b2];
        };
        convert2.hsl.rgb = function(hsl) {
          var h2 = hsl[0] / 360;
          var s2 = hsl[1] / 100;
          var l2 = hsl[2] / 100;
          var t1;
          var t2;
          var t3;
          var rgb;
          var val;
          if (s2 === 0) {
            val = l2 * 255;
            return [val, val, val];
          }
          if (l2 < 0.5) {
            t2 = l2 * (1 + s2);
          } else {
            t2 = l2 + s2 - l2 * s2;
          }
          t1 = 2 * l2 - t2;
          rgb = [0, 0, 0];
          for (var i2 = 0; i2 < 3; i2++) {
            t3 = h2 + 1 / 3 * -(i2 - 1);
            if (t3 < 0) {
              t3++;
            }
            if (t3 > 1) {
              t3--;
            }
            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }
            rgb[i2] = val * 255;
          }
          return rgb;
        };
        convert2.hsl.hsv = function(hsl) {
          var h2 = hsl[0];
          var s2 = hsl[1] / 100;
          var l2 = hsl[2] / 100;
          var smin = s2;
          var lmin = Math.max(l2, 0.01);
          var sv;
          var v2;
          l2 *= 2;
          s2 *= l2 <= 1 ? l2 : 2 - l2;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          v2 = (l2 + s2) / 2;
          sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
          return [h2, sv * 100, v2 * 100];
        };
        convert2.hsv.rgb = function(hsv) {
          var h2 = hsv[0] / 60;
          var s2 = hsv[1] / 100;
          var v2 = hsv[2] / 100;
          var hi = Math.floor(h2) % 6;
          var f2 = h2 - Math.floor(h2);
          var p2 = 255 * v2 * (1 - s2);
          var q = 255 * v2 * (1 - s2 * f2);
          var t2 = 255 * v2 * (1 - s2 * (1 - f2));
          v2 *= 255;
          switch (hi) {
            case 0:
              return [v2, t2, p2];
            case 1:
              return [q, v2, p2];
            case 2:
              return [p2, v2, t2];
            case 3:
              return [p2, q, v2];
            case 4:
              return [t2, p2, v2];
            case 5:
              return [v2, p2, q];
          }
        };
        convert2.hsv.hsl = function(hsv) {
          var h2 = hsv[0];
          var s2 = hsv[1] / 100;
          var v2 = hsv[2] / 100;
          var vmin = Math.max(v2, 0.01);
          var lmin;
          var sl;
          var l2;
          l2 = (2 - s2) * v2;
          lmin = (2 - s2) * vmin;
          sl = s2 * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l2 /= 2;
          return [h2, sl * 100, l2 * 100];
        };
        convert2.hwb.rgb = function(hwb) {
          var h2 = hwb[0] / 360;
          var wh = hwb[1] / 100;
          var bl = hwb[2] / 100;
          var ratio = wh + bl;
          var i2;
          var v2;
          var f2;
          var n2;
          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }
          i2 = Math.floor(6 * h2);
          v2 = 1 - bl;
          f2 = 6 * h2 - i2;
          if ((i2 & 1) !== 0) {
            f2 = 1 - f2;
          }
          n2 = wh + f2 * (v2 - wh);
          var r2;
          var g2;
          var b2;
          switch (i2) {
            default:
            case 6:
            case 0:
              r2 = v2;
              g2 = n2;
              b2 = wh;
              break;
            case 1:
              r2 = n2;
              g2 = v2;
              b2 = wh;
              break;
            case 2:
              r2 = wh;
              g2 = v2;
              b2 = n2;
              break;
            case 3:
              r2 = wh;
              g2 = n2;
              b2 = v2;
              break;
            case 4:
              r2 = n2;
              g2 = wh;
              b2 = v2;
              break;
            case 5:
              r2 = v2;
              g2 = wh;
              b2 = n2;
              break;
          }
          return [r2 * 255, g2 * 255, b2 * 255];
        };
        convert2.cmyk.rgb = function(cmyk) {
          var c2 = cmyk[0] / 100;
          var m2 = cmyk[1] / 100;
          var y2 = cmyk[2] / 100;
          var k2 = cmyk[3] / 100;
          var r2;
          var g2;
          var b2;
          r2 = 1 - Math.min(1, c2 * (1 - k2) + k2);
          g2 = 1 - Math.min(1, m2 * (1 - k2) + k2);
          b2 = 1 - Math.min(1, y2 * (1 - k2) + k2);
          return [r2 * 255, g2 * 255, b2 * 255];
        };
        convert2.xyz.rgb = function(xyz) {
          var x = xyz[0] / 100;
          var y2 = xyz[1] / 100;
          var z2 = xyz[2] / 100;
          var r2;
          var g2;
          var b2;
          r2 = x * 3.2406 + y2 * -1.5372 + z2 * -0.4986;
          g2 = x * -0.9689 + y2 * 1.8758 + z2 * 0.0415;
          b2 = x * 0.0557 + y2 * -0.204 + z2 * 1.057;
          r2 = r2 > 31308e-7 ? 1.055 * Math.pow(r2, 1 / 2.4) - 0.055 : r2 * 12.92;
          g2 = g2 > 31308e-7 ? 1.055 * Math.pow(g2, 1 / 2.4) - 0.055 : g2 * 12.92;
          b2 = b2 > 31308e-7 ? 1.055 * Math.pow(b2, 1 / 2.4) - 0.055 : b2 * 12.92;
          r2 = Math.min(Math.max(0, r2), 1);
          g2 = Math.min(Math.max(0, g2), 1);
          b2 = Math.min(Math.max(0, b2), 1);
          return [r2 * 255, g2 * 255, b2 * 255];
        };
        convert2.xyz.lab = function(xyz) {
          var x = xyz[0];
          var y2 = xyz[1];
          var z2 = xyz[2];
          var l2;
          var a2;
          var b2;
          x /= 95.047;
          y2 /= 100;
          z2 /= 108.883;
          x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
          y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
          z2 = z2 > 8856e-6 ? Math.pow(z2, 1 / 3) : 7.787 * z2 + 16 / 116;
          l2 = 116 * y2 - 16;
          a2 = 500 * (x - y2);
          b2 = 200 * (y2 - z2);
          return [l2, a2, b2];
        };
        convert2.lab.xyz = function(lab) {
          var l2 = lab[0];
          var a2 = lab[1];
          var b2 = lab[2];
          var x;
          var y2;
          var z2;
          y2 = (l2 + 16) / 116;
          x = a2 / 500 + y2;
          z2 = y2 - b2 / 200;
          var y22 = Math.pow(y2, 3);
          var x2 = Math.pow(x, 3);
          var z22 = Math.pow(z2, 3);
          y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
          x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
          z2 = z22 > 8856e-6 ? z22 : (z2 - 16 / 116) / 7.787;
          x *= 95.047;
          y2 *= 100;
          z2 *= 108.883;
          return [x, y2, z2];
        };
        convert2.lab.lch = function(lab) {
          var l2 = lab[0];
          var a2 = lab[1];
          var b2 = lab[2];
          var hr;
          var h2;
          var c2;
          hr = Math.atan2(b2, a2);
          h2 = hr * 360 / 2 / Math.PI;
          if (h2 < 0) {
            h2 += 360;
          }
          c2 = Math.sqrt(a2 * a2 + b2 * b2);
          return [l2, c2, h2];
        };
        convert2.lch.lab = function(lch) {
          var l2 = lch[0];
          var c2 = lch[1];
          var h2 = lch[2];
          var a2;
          var b2;
          var hr;
          hr = h2 / 360 * 2 * Math.PI;
          a2 = c2 * Math.cos(hr);
          b2 = c2 * Math.sin(hr);
          return [l2, a2, b2];
        };
        convert2.rgb.ansi16 = function(args) {
          var r2 = args[0];
          var g2 = args[1];
          var b2 = args[2];
          var value = 1 in arguments ? arguments[1] : convert2.rgb.hsv(args)[2];
          value = Math.round(value / 50);
          if (value === 0) {
            return 30;
          }
          var ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
          if (value === 2) {
            ansi += 60;
          }
          return ansi;
        };
        convert2.hsv.ansi16 = function(args) {
          return convert2.rgb.ansi16(convert2.hsv.rgb(args), args[2]);
        };
        convert2.rgb.ansi256 = function(args) {
          var r2 = args[0];
          var g2 = args[1];
          var b2 = args[2];
          if (r2 === g2 && g2 === b2) {
            if (r2 < 8) {
              return 16;
            }
            if (r2 > 248) {
              return 231;
            }
            return Math.round((r2 - 8) / 247 * 24) + 232;
          }
          var ansi = 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
          return ansi;
        };
        convert2.ansi16.rgb = function(args) {
          var color = args % 10;
          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }
            color = color / 10.5 * 255;
            return [color, color, color];
          }
          var mult = (~~(args > 50) + 1) * 0.5;
          var r2 = (color & 1) * mult * 255;
          var g2 = (color >> 1 & 1) * mult * 255;
          var b2 = (color >> 2 & 1) * mult * 255;
          return [r2, g2, b2];
        };
        convert2.ansi256.rgb = function(args) {
          if (args >= 232) {
            var c2 = (args - 232) * 10 + 8;
            return [c2, c2, c2];
          }
          args -= 16;
          var rem;
          var r2 = Math.floor(args / 36) / 5 * 255;
          var g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
          var b2 = rem % 6 / 5 * 255;
          return [r2, g2, b2];
        };
        convert2.rgb.hex = function(args) {
          var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert2.hex.rgb = function(args) {
          var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
          if (!match) {
            return [0, 0, 0];
          }
          var colorString2 = match[0];
          if (match[0].length === 3) {
            colorString2 = colorString2.split("").map(function(char) {
              return char + char;
            }).join("");
          }
          var integer = parseInt(colorString2, 16);
          var r2 = integer >> 16 & 255;
          var g2 = integer >> 8 & 255;
          var b2 = integer & 255;
          return [r2, g2, b2];
        };
        convert2.rgb.hcg = function(rgb) {
          var r2 = rgb[0] / 255;
          var g2 = rgb[1] / 255;
          var b2 = rgb[2] / 255;
          var max = Math.max(Math.max(r2, g2), b2);
          var min = Math.min(Math.min(r2, g2), b2);
          var chroma = max - min;
          var grayscale;
          var hue;
          if (chroma < 1) {
            grayscale = min / (1 - chroma);
          } else {
            grayscale = 0;
          }
          if (chroma <= 0) {
            hue = 0;
          } else if (max === r2) {
            hue = (g2 - b2) / chroma % 6;
          } else if (max === g2) {
            hue = 2 + (b2 - r2) / chroma;
          } else {
            hue = 4 + (r2 - g2) / chroma + 4;
          }
          hue /= 6;
          hue %= 1;
          return [hue * 360, chroma * 100, grayscale * 100];
        };
        convert2.hsl.hcg = function(hsl) {
          var s2 = hsl[1] / 100;
          var l2 = hsl[2] / 100;
          var c2 = 1;
          var f2 = 0;
          if (l2 < 0.5) {
            c2 = 2 * s2 * l2;
          } else {
            c2 = 2 * s2 * (1 - l2);
          }
          if (c2 < 1) {
            f2 = (l2 - 0.5 * c2) / (1 - c2);
          }
          return [hsl[0], c2 * 100, f2 * 100];
        };
        convert2.hsv.hcg = function(hsv) {
          var s2 = hsv[1] / 100;
          var v2 = hsv[2] / 100;
          var c2 = s2 * v2;
          var f2 = 0;
          if (c2 < 1) {
            f2 = (v2 - c2) / (1 - c2);
          }
          return [hsv[0], c2 * 100, f2 * 100];
        };
        convert2.hcg.rgb = function(hcg) {
          var h2 = hcg[0] / 360;
          var c2 = hcg[1] / 100;
          var g2 = hcg[2] / 100;
          if (c2 === 0) {
            return [g2 * 255, g2 * 255, g2 * 255];
          }
          var pure = [0, 0, 0];
          var hi = h2 % 1 * 6;
          var v2 = hi % 1;
          var w2 = 1 - v2;
          var mg = 0;
          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v2;
              pure[2] = 0;
              break;
            case 1:
              pure[0] = w2;
              pure[1] = 1;
              pure[2] = 0;
              break;
            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v2;
              break;
            case 3:
              pure[0] = 0;
              pure[1] = w2;
              pure[2] = 1;
              break;
            case 4:
              pure[0] = v2;
              pure[1] = 0;
              pure[2] = 1;
              break;
            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w2;
          }
          mg = (1 - c2) * g2;
          return [
            (c2 * pure[0] + mg) * 255,
            (c2 * pure[1] + mg) * 255,
            (c2 * pure[2] + mg) * 255
          ];
        };
        convert2.hcg.hsv = function(hcg) {
          var c2 = hcg[1] / 100;
          var g2 = hcg[2] / 100;
          var v2 = c2 + g2 * (1 - c2);
          var f2 = 0;
          if (v2 > 0) {
            f2 = c2 / v2;
          }
          return [hcg[0], f2 * 100, v2 * 100];
        };
        convert2.hcg.hsl = function(hcg) {
          var c2 = hcg[1] / 100;
          var g2 = hcg[2] / 100;
          var l2 = g2 * (1 - c2) + 0.5 * c2;
          var s2 = 0;
          if (l2 > 0 && l2 < 0.5) {
            s2 = c2 / (2 * l2);
          } else if (l2 >= 0.5 && l2 < 1) {
            s2 = c2 / (2 * (1 - l2));
          }
          return [hcg[0], s2 * 100, l2 * 100];
        };
        convert2.hcg.hwb = function(hcg) {
          var c2 = hcg[1] / 100;
          var g2 = hcg[2] / 100;
          var v2 = c2 + g2 * (1 - c2);
          return [hcg[0], (v2 - c2) * 100, (1 - v2) * 100];
        };
        convert2.hwb.hcg = function(hwb) {
          var w2 = hwb[1] / 100;
          var b2 = hwb[2] / 100;
          var v2 = 1 - b2;
          var c2 = v2 - w2;
          var g2 = 0;
          if (c2 < 1) {
            g2 = (v2 - c2) / (1 - c2);
          }
          return [hwb[0], c2 * 100, g2 * 100];
        };
        convert2.apple.rgb = function(apple) {
          return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
        };
        convert2.rgb.apple = function(rgb) {
          return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
        };
        convert2.gray.rgb = function(args) {
          return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
        };
        convert2.gray.hsl = convert2.gray.hsv = function(args) {
          return [0, 0, args[0]];
        };
        convert2.gray.hwb = function(gray) {
          return [0, 100, gray[0]];
        };
        convert2.gray.cmyk = function(gray) {
          return [0, 0, 0, gray[0]];
        };
        convert2.gray.lab = function(gray) {
          return [gray[0], 0, 0];
        };
        convert2.gray.hex = function(gray) {
          var val = Math.round(gray[0] / 100 * 255) & 255;
          var integer = (val << 16) + (val << 8) + val;
          var string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert2.rgb.gray = function(rgb) {
          var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [val / 255 * 100];
        };
      });
      var conversions_1 = conversions.rgb;
      var conversions_2 = conversions.hsl;
      var conversions_3 = conversions.hsv;
      var conversions_4 = conversions.hwb;
      var conversions_5 = conversions.cmyk;
      var conversions_6 = conversions.xyz;
      var conversions_7 = conversions.lab;
      var conversions_8 = conversions.lch;
      var conversions_9 = conversions.hex;
      var conversions_10 = conversions.keyword;
      var conversions_11 = conversions.ansi16;
      var conversions_12 = conversions.ansi256;
      var conversions_13 = conversions.hcg;
      var conversions_14 = conversions.apple;
      var conversions_15 = conversions.gray;
      function buildGraph() {
        var graph = {};
        var models2 = Object.keys(conversions);
        for (var len = models2.length, i2 = 0; i2 < len; i2++) {
          graph[models2[i2]] = {
            // http://jsperf.com/1-vs-infinity
            // micro-opt, but this is simple.
            distance: -1,
            parent: null
          };
        }
        return graph;
      }
      function deriveBFS(fromModel) {
        var graph = buildGraph();
        var queue = [fromModel];
        graph[fromModel].distance = 0;
        while (queue.length) {
          var current = queue.pop();
          var adjacents = Object.keys(conversions[current]);
          for (var len = adjacents.length, i2 = 0; i2 < len; i2++) {
            var adjacent = adjacents[i2];
            var node = graph[adjacent];
            if (node.distance === -1) {
              node.distance = graph[current].distance + 1;
              node.parent = current;
              queue.unshift(adjacent);
            }
          }
        }
        return graph;
      }
      function link(from, to) {
        return function(args) {
          return to(from(args));
        };
      }
      function wrapConversion(toModel, graph) {
        var path = [graph[toModel].parent, toModel];
        var fn = conversions[graph[toModel].parent][toModel];
        var cur = graph[toModel].parent;
        while (graph[cur].parent) {
          path.unshift(graph[cur].parent);
          fn = link(conversions[graph[cur].parent][cur], fn);
          cur = graph[cur].parent;
        }
        fn.conversion = path;
        return fn;
      }
      var route = function(fromModel) {
        var graph = deriveBFS(fromModel);
        var conversion = {};
        var models2 = Object.keys(graph);
        for (var len = models2.length, i2 = 0; i2 < len; i2++) {
          var toModel = models2[i2];
          var node = graph[toModel];
          if (node.parent === null) {
            continue;
          }
          conversion[toModel] = wrapConversion(toModel, graph);
        }
        return conversion;
      };
      var convert = {};
      var models = Object.keys(conversions);
      function wrapRaw(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          return fn(args);
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      function wrapRounded(fn) {
        var wrappedFn = function(args) {
          if (args === void 0 || args === null) {
            return args;
          }
          if (arguments.length > 1) {
            args = Array.prototype.slice.call(arguments);
          }
          var result = fn(args);
          if (typeof result === "object") {
            for (var len = result.length, i2 = 0; i2 < len; i2++) {
              result[i2] = Math.round(result[i2]);
            }
          }
          return result;
        };
        if ("conversion" in fn) {
          wrappedFn.conversion = fn.conversion;
        }
        return wrappedFn;
      }
      models.forEach(function(fromModel) {
        convert[fromModel] = {};
        Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
        Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
        var routes = route(fromModel);
        var routeModels = Object.keys(routes);
        routeModels.forEach(function(toModel) {
          var fn = routes[toModel];
          convert[fromModel][toModel] = wrapRounded(fn);
          convert[fromModel][toModel].raw = wrapRaw(fn);
        });
      });
      var colorConvert = convert;
      var colorName$1 = {
        "aliceblue": [240, 248, 255],
        "antiquewhite": [250, 235, 215],
        "aqua": [0, 255, 255],
        "aquamarine": [127, 255, 212],
        "azure": [240, 255, 255],
        "beige": [245, 245, 220],
        "bisque": [255, 228, 196],
        "black": [0, 0, 0],
        "blanchedalmond": [255, 235, 205],
        "blue": [0, 0, 255],
        "blueviolet": [138, 43, 226],
        "brown": [165, 42, 42],
        "burlywood": [222, 184, 135],
        "cadetblue": [95, 158, 160],
        "chartreuse": [127, 255, 0],
        "chocolate": [210, 105, 30],
        "coral": [255, 127, 80],
        "cornflowerblue": [100, 149, 237],
        "cornsilk": [255, 248, 220],
        "crimson": [220, 20, 60],
        "cyan": [0, 255, 255],
        "darkblue": [0, 0, 139],
        "darkcyan": [0, 139, 139],
        "darkgoldenrod": [184, 134, 11],
        "darkgray": [169, 169, 169],
        "darkgreen": [0, 100, 0],
        "darkgrey": [169, 169, 169],
        "darkkhaki": [189, 183, 107],
        "darkmagenta": [139, 0, 139],
        "darkolivegreen": [85, 107, 47],
        "darkorange": [255, 140, 0],
        "darkorchid": [153, 50, 204],
        "darkred": [139, 0, 0],
        "darksalmon": [233, 150, 122],
        "darkseagreen": [143, 188, 143],
        "darkslateblue": [72, 61, 139],
        "darkslategray": [47, 79, 79],
        "darkslategrey": [47, 79, 79],
        "darkturquoise": [0, 206, 209],
        "darkviolet": [148, 0, 211],
        "deeppink": [255, 20, 147],
        "deepskyblue": [0, 191, 255],
        "dimgray": [105, 105, 105],
        "dimgrey": [105, 105, 105],
        "dodgerblue": [30, 144, 255],
        "firebrick": [178, 34, 34],
        "floralwhite": [255, 250, 240],
        "forestgreen": [34, 139, 34],
        "fuchsia": [255, 0, 255],
        "gainsboro": [220, 220, 220],
        "ghostwhite": [248, 248, 255],
        "gold": [255, 215, 0],
        "goldenrod": [218, 165, 32],
        "gray": [128, 128, 128],
        "green": [0, 128, 0],
        "greenyellow": [173, 255, 47],
        "grey": [128, 128, 128],
        "honeydew": [240, 255, 240],
        "hotpink": [255, 105, 180],
        "indianred": [205, 92, 92],
        "indigo": [75, 0, 130],
        "ivory": [255, 255, 240],
        "khaki": [240, 230, 140],
        "lavender": [230, 230, 250],
        "lavenderblush": [255, 240, 245],
        "lawngreen": [124, 252, 0],
        "lemonchiffon": [255, 250, 205],
        "lightblue": [173, 216, 230],
        "lightcoral": [240, 128, 128],
        "lightcyan": [224, 255, 255],
        "lightgoldenrodyellow": [250, 250, 210],
        "lightgray": [211, 211, 211],
        "lightgreen": [144, 238, 144],
        "lightgrey": [211, 211, 211],
        "lightpink": [255, 182, 193],
        "lightsalmon": [255, 160, 122],
        "lightseagreen": [32, 178, 170],
        "lightskyblue": [135, 206, 250],
        "lightslategray": [119, 136, 153],
        "lightslategrey": [119, 136, 153],
        "lightsteelblue": [176, 196, 222],
        "lightyellow": [255, 255, 224],
        "lime": [0, 255, 0],
        "limegreen": [50, 205, 50],
        "linen": [250, 240, 230],
        "magenta": [255, 0, 255],
        "maroon": [128, 0, 0],
        "mediumaquamarine": [102, 205, 170],
        "mediumblue": [0, 0, 205],
        "mediumorchid": [186, 85, 211],
        "mediumpurple": [147, 112, 219],
        "mediumseagreen": [60, 179, 113],
        "mediumslateblue": [123, 104, 238],
        "mediumspringgreen": [0, 250, 154],
        "mediumturquoise": [72, 209, 204],
        "mediumvioletred": [199, 21, 133],
        "midnightblue": [25, 25, 112],
        "mintcream": [245, 255, 250],
        "mistyrose": [255, 228, 225],
        "moccasin": [255, 228, 181],
        "navajowhite": [255, 222, 173],
        "navy": [0, 0, 128],
        "oldlace": [253, 245, 230],
        "olive": [128, 128, 0],
        "olivedrab": [107, 142, 35],
        "orange": [255, 165, 0],
        "orangered": [255, 69, 0],
        "orchid": [218, 112, 214],
        "palegoldenrod": [238, 232, 170],
        "palegreen": [152, 251, 152],
        "paleturquoise": [175, 238, 238],
        "palevioletred": [219, 112, 147],
        "papayawhip": [255, 239, 213],
        "peachpuff": [255, 218, 185],
        "peru": [205, 133, 63],
        "pink": [255, 192, 203],
        "plum": [221, 160, 221],
        "powderblue": [176, 224, 230],
        "purple": [128, 0, 128],
        "rebeccapurple": [102, 51, 153],
        "red": [255, 0, 0],
        "rosybrown": [188, 143, 143],
        "royalblue": [65, 105, 225],
        "saddlebrown": [139, 69, 19],
        "salmon": [250, 128, 114],
        "sandybrown": [244, 164, 96],
        "seagreen": [46, 139, 87],
        "seashell": [255, 245, 238],
        "sienna": [160, 82, 45],
        "silver": [192, 192, 192],
        "skyblue": [135, 206, 235],
        "slateblue": [106, 90, 205],
        "slategray": [112, 128, 144],
        "slategrey": [112, 128, 144],
        "snow": [255, 250, 250],
        "springgreen": [0, 255, 127],
        "steelblue": [70, 130, 180],
        "tan": [210, 180, 140],
        "teal": [0, 128, 128],
        "thistle": [216, 191, 216],
        "tomato": [255, 99, 71],
        "turquoise": [64, 224, 208],
        "violet": [238, 130, 238],
        "wheat": [245, 222, 179],
        "white": [255, 255, 255],
        "whitesmoke": [245, 245, 245],
        "yellow": [255, 255, 0],
        "yellowgreen": [154, 205, 50]
      };
      var colorString = {
        getRgba,
        getHsla,
        getRgb,
        getHsl,
        getHwb,
        getAlpha,
        hexString,
        rgbString,
        rgbaString,
        percentString,
        percentaString,
        hslString,
        hslaString,
        hwbString,
        keyword
      };
      function getRgba(string) {
        if (!string) {
          return;
        }
        var abbr = /^#([a-fA-F0-9]{3,4})$/i, hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i, rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, keyword2 = /(\w+)/;
        var rgb = [0, 0, 0], a2 = 1, match = string.match(abbr), hexAlpha = "";
        if (match) {
          match = match[1];
          hexAlpha = match[3];
          for (var i2 = 0; i2 < rgb.length; i2++) {
            rgb[i2] = parseInt(match[i2] + match[i2], 16);
          }
          if (hexAlpha) {
            a2 = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
          }
        } else if (match = string.match(hex)) {
          hexAlpha = match[2];
          match = match[1];
          for (var i2 = 0; i2 < rgb.length; i2++) {
            rgb[i2] = parseInt(match.slice(i2 * 2, i2 * 2 + 2), 16);
          }
          if (hexAlpha) {
            a2 = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
          }
        } else if (match = string.match(rgba)) {
          for (var i2 = 0; i2 < rgb.length; i2++) {
            rgb[i2] = parseInt(match[i2 + 1]);
          }
          a2 = parseFloat(match[4]);
        } else if (match = string.match(per)) {
          for (var i2 = 0; i2 < rgb.length; i2++) {
            rgb[i2] = Math.round(parseFloat(match[i2 + 1]) * 2.55);
          }
          a2 = parseFloat(match[4]);
        } else if (match = string.match(keyword2)) {
          if (match[1] == "transparent") {
            return [0, 0, 0, 0];
          }
          rgb = colorName$1[match[1]];
          if (!rgb) {
            return;
          }
        }
        for (var i2 = 0; i2 < rgb.length; i2++) {
          rgb[i2] = scale(rgb[i2], 0, 255);
        }
        if (!a2 && a2 != 0) {
          a2 = 1;
        } else {
          a2 = scale(a2, 0, 1);
        }
        rgb[3] = a2;
        return rgb;
      }
      function getHsla(string) {
        if (!string) {
          return;
        }
        var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
        var match = string.match(hsl);
        if (match) {
          var alpha = parseFloat(match[4]);
          var h2 = scale(parseInt(match[1]), 0, 360), s2 = scale(parseFloat(match[2]), 0, 100), l2 = scale(parseFloat(match[3]), 0, 100), a2 = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h2, s2, l2, a2];
        }
      }
      function getHwb(string) {
        if (!string) {
          return;
        }
        var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
        var match = string.match(hwb);
        if (match) {
          var alpha = parseFloat(match[4]);
          var h2 = scale(parseInt(match[1]), 0, 360), w2 = scale(parseFloat(match[2]), 0, 100), b2 = scale(parseFloat(match[3]), 0, 100), a2 = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h2, w2, b2, a2];
        }
      }
      function getRgb(string) {
        var rgba = getRgba(string);
        return rgba && rgba.slice(0, 3);
      }
      function getHsl(string) {
        var hsla = getHsla(string);
        return hsla && hsla.slice(0, 3);
      }
      function getAlpha(string) {
        var vals = getRgba(string);
        if (vals) {
          return vals[3];
        } else if (vals = getHsla(string)) {
          return vals[3];
        } else if (vals = getHwb(string)) {
          return vals[3];
        }
      }
      function hexString(rgba, a2) {
        var a2 = a2 !== void 0 && rgba.length === 3 ? a2 : rgba[3];
        return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a2 >= 0 && a2 < 1 ? hexDouble(Math.round(a2 * 255)) : "");
      }
      function rgbString(rgba, alpha) {
        if (alpha < 1 || rgba[3] && rgba[3] < 1) {
          return rgbaString(rgba, alpha);
        }
        return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
      }
      function rgbaString(rgba, alpha) {
        if (alpha === void 0) {
          alpha = rgba[3] !== void 0 ? rgba[3] : 1;
        }
        return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
      }
      function percentString(rgba, alpha) {
        if (alpha < 1 || rgba[3] && rgba[3] < 1) {
          return percentaString(rgba, alpha);
        }
        var r2 = Math.round(rgba[0] / 255 * 100), g2 = Math.round(rgba[1] / 255 * 100), b2 = Math.round(rgba[2] / 255 * 100);
        return "rgb(" + r2 + "%, " + g2 + "%, " + b2 + "%)";
      }
      function percentaString(rgba, alpha) {
        var r2 = Math.round(rgba[0] / 255 * 100), g2 = Math.round(rgba[1] / 255 * 100), b2 = Math.round(rgba[2] / 255 * 100);
        return "rgba(" + r2 + "%, " + g2 + "%, " + b2 + "%, " + (alpha || rgba[3] || 1) + ")";
      }
      function hslString(hsla, alpha) {
        if (alpha < 1 || hsla[3] && hsla[3] < 1) {
          return hslaString(hsla, alpha);
        }
        return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
      }
      function hslaString(hsla, alpha) {
        if (alpha === void 0) {
          alpha = hsla[3] !== void 0 ? hsla[3] : 1;
        }
        return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
      }
      function hwbString(hwb, alpha) {
        if (alpha === void 0) {
          alpha = hwb[3] !== void 0 ? hwb[3] : 1;
        }
        return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== void 0 && alpha !== 1 ? ", " + alpha : "") + ")";
      }
      function keyword(rgb) {
        return reverseNames[rgb.slice(0, 3)];
      }
      function scale(num, min, max) {
        return Math.min(Math.max(min, num), max);
      }
      function hexDouble(num) {
        var str = num.toString(16).toUpperCase();
        return str.length < 2 ? "0" + str : str;
      }
      var reverseNames = {};
      for (var name in colorName$1) {
        reverseNames[colorName$1[name]] = name;
      }
      var Color = function(obj) {
        if (obj instanceof Color) {
          return obj;
        }
        if (!(this instanceof Color)) {
          return new Color(obj);
        }
        this.valid = false;
        this.values = {
          rgb: [0, 0, 0],
          hsl: [0, 0, 0],
          hsv: [0, 0, 0],
          hwb: [0, 0, 0],
          cmyk: [0, 0, 0, 0],
          alpha: 1
        };
        var vals;
        if (typeof obj === "string") {
          vals = colorString.getRgba(obj);
          if (vals) {
            this.setValues("rgb", vals);
          } else if (vals = colorString.getHsla(obj)) {
            this.setValues("hsl", vals);
          } else if (vals = colorString.getHwb(obj)) {
            this.setValues("hwb", vals);
          }
        } else if (typeof obj === "object") {
          vals = obj;
          if (vals.r !== void 0 || vals.red !== void 0) {
            this.setValues("rgb", vals);
          } else if (vals.l !== void 0 || vals.lightness !== void 0) {
            this.setValues("hsl", vals);
          } else if (vals.v !== void 0 || vals.value !== void 0) {
            this.setValues("hsv", vals);
          } else if (vals.w !== void 0 || vals.whiteness !== void 0) {
            this.setValues("hwb", vals);
          } else if (vals.c !== void 0 || vals.cyan !== void 0) {
            this.setValues("cmyk", vals);
          }
        }
      };
      Color.prototype = {
        isValid: function() {
          return this.valid;
        },
        rgb: function() {
          return this.setSpace("rgb", arguments);
        },
        hsl: function() {
          return this.setSpace("hsl", arguments);
        },
        hsv: function() {
          return this.setSpace("hsv", arguments);
        },
        hwb: function() {
          return this.setSpace("hwb", arguments);
        },
        cmyk: function() {
          return this.setSpace("cmyk", arguments);
        },
        rgbArray: function() {
          return this.values.rgb;
        },
        hslArray: function() {
          return this.values.hsl;
        },
        hsvArray: function() {
          return this.values.hsv;
        },
        hwbArray: function() {
          var values = this.values;
          if (values.alpha !== 1) {
            return values.hwb.concat([values.alpha]);
          }
          return values.hwb;
        },
        cmykArray: function() {
          return this.values.cmyk;
        },
        rgbaArray: function() {
          var values = this.values;
          return values.rgb.concat([values.alpha]);
        },
        hslaArray: function() {
          var values = this.values;
          return values.hsl.concat([values.alpha]);
        },
        alpha: function(val) {
          if (val === void 0) {
            return this.values.alpha;
          }
          this.setValues("alpha", val);
          return this;
        },
        red: function(val) {
          return this.setChannel("rgb", 0, val);
        },
        green: function(val) {
          return this.setChannel("rgb", 1, val);
        },
        blue: function(val) {
          return this.setChannel("rgb", 2, val);
        },
        hue: function(val) {
          if (val) {
            val %= 360;
            val = val < 0 ? 360 + val : val;
          }
          return this.setChannel("hsl", 0, val);
        },
        saturation: function(val) {
          return this.setChannel("hsl", 1, val);
        },
        lightness: function(val) {
          return this.setChannel("hsl", 2, val);
        },
        saturationv: function(val) {
          return this.setChannel("hsv", 1, val);
        },
        whiteness: function(val) {
          return this.setChannel("hwb", 1, val);
        },
        blackness: function(val) {
          return this.setChannel("hwb", 2, val);
        },
        value: function(val) {
          return this.setChannel("hsv", 2, val);
        },
        cyan: function(val) {
          return this.setChannel("cmyk", 0, val);
        },
        magenta: function(val) {
          return this.setChannel("cmyk", 1, val);
        },
        yellow: function(val) {
          return this.setChannel("cmyk", 2, val);
        },
        black: function(val) {
          return this.setChannel("cmyk", 3, val);
        },
        hexString: function() {
          return colorString.hexString(this.values.rgb);
        },
        rgbString: function() {
          return colorString.rgbString(this.values.rgb, this.values.alpha);
        },
        rgbaString: function() {
          return colorString.rgbaString(this.values.rgb, this.values.alpha);
        },
        percentString: function() {
          return colorString.percentString(this.values.rgb, this.values.alpha);
        },
        hslString: function() {
          return colorString.hslString(this.values.hsl, this.values.alpha);
        },
        hslaString: function() {
          return colorString.hslaString(this.values.hsl, this.values.alpha);
        },
        hwbString: function() {
          return colorString.hwbString(this.values.hwb, this.values.alpha);
        },
        keyword: function() {
          return colorString.keyword(this.values.rgb, this.values.alpha);
        },
        rgbNumber: function() {
          var rgb = this.values.rgb;
          return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
        },
        luminosity: function() {
          var rgb = this.values.rgb;
          var lum = [];
          for (var i2 = 0; i2 < rgb.length; i2++) {
            var chan = rgb[i2] / 255;
            lum[i2] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
        },
        contrast: function(color2) {
          var lum1 = this.luminosity();
          var lum2 = color2.luminosity();
          if (lum1 > lum2) {
            return (lum1 + 0.05) / (lum2 + 0.05);
          }
          return (lum2 + 0.05) / (lum1 + 0.05);
        },
        level: function(color2) {
          var contrastRatio = this.contrast(color2);
          if (contrastRatio >= 7.1) {
            return "AAA";
          }
          return contrastRatio >= 4.5 ? "AA" : "";
        },
        dark: function() {
          var rgb = this.values.rgb;
          var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
          return yiq < 128;
        },
        light: function() {
          return !this.dark();
        },
        negate: function() {
          var rgb = [];
          for (var i2 = 0; i2 < 3; i2++) {
            rgb[i2] = 255 - this.values.rgb[i2];
          }
          this.setValues("rgb", rgb);
          return this;
        },
        lighten: function(ratio) {
          var hsl = this.values.hsl;
          hsl[2] += hsl[2] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        darken: function(ratio) {
          var hsl = this.values.hsl;
          hsl[2] -= hsl[2] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        saturate: function(ratio) {
          var hsl = this.values.hsl;
          hsl[1] += hsl[1] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        desaturate: function(ratio) {
          var hsl = this.values.hsl;
          hsl[1] -= hsl[1] * ratio;
          this.setValues("hsl", hsl);
          return this;
        },
        whiten: function(ratio) {
          var hwb = this.values.hwb;
          hwb[1] += hwb[1] * ratio;
          this.setValues("hwb", hwb);
          return this;
        },
        blacken: function(ratio) {
          var hwb = this.values.hwb;
          hwb[2] += hwb[2] * ratio;
          this.setValues("hwb", hwb);
          return this;
        },
        greyscale: function() {
          var rgb = this.values.rgb;
          var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
          this.setValues("rgb", [val, val, val]);
          return this;
        },
        clearer: function(ratio) {
          var alpha = this.values.alpha;
          this.setValues("alpha", alpha - alpha * ratio);
          return this;
        },
        opaquer: function(ratio) {
          var alpha = this.values.alpha;
          this.setValues("alpha", alpha + alpha * ratio);
          return this;
        },
        rotate: function(degrees) {
          var hsl = this.values.hsl;
          var hue = (hsl[0] + degrees) % 360;
          hsl[0] = hue < 0 ? 360 + hue : hue;
          this.setValues("hsl", hsl);
          return this;
        },
        /**
         * Ported from sass implementation in C
         * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
         */
        mix: function(mixinColor, weight) {
          var color1 = this;
          var color2 = mixinColor;
          var p2 = weight === void 0 ? 0.5 : weight;
          var w2 = 2 * p2 - 1;
          var a2 = color1.alpha() - color2.alpha();
          var w1 = ((w2 * a2 === -1 ? w2 : (w2 + a2) / (1 + w2 * a2)) + 1) / 2;
          var w22 = 1 - w1;
          return this.rgb(
            w1 * color1.red() + w22 * color2.red(),
            w1 * color1.green() + w22 * color2.green(),
            w1 * color1.blue() + w22 * color2.blue()
          ).alpha(color1.alpha() * p2 + color2.alpha() * (1 - p2));
        },
        toJSON: function() {
          return this.rgb();
        },
        clone: function() {
          var result = new Color();
          var source = this.values;
          var target = result.values;
          var value, type;
          for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
              value = source[prop];
              type = {}.toString.call(value);
              if (type === "[object Array]") {
                target[prop] = value.slice(0);
              } else if (type === "[object Number]") {
                target[prop] = value;
              } else {
                console.error("unexpected color value:", value);
              }
            }
          }
          return result;
        }
      };
      Color.prototype.spaces = {
        rgb: ["red", "green", "blue"],
        hsl: ["hue", "saturation", "lightness"],
        hsv: ["hue", "saturation", "value"],
        hwb: ["hue", "whiteness", "blackness"],
        cmyk: ["cyan", "magenta", "yellow", "black"]
      };
      Color.prototype.maxes = {
        rgb: [255, 255, 255],
        hsl: [360, 100, 100],
        hsv: [360, 100, 100],
        hwb: [360, 100, 100],
        cmyk: [100, 100, 100, 100]
      };
      Color.prototype.getValues = function(space) {
        var values = this.values;
        var vals = {};
        for (var i2 = 0; i2 < space.length; i2++) {
          vals[space.charAt(i2)] = values[space][i2];
        }
        if (values.alpha !== 1) {
          vals.a = values.alpha;
        }
        return vals;
      };
      Color.prototype.setValues = function(space, vals) {
        var values = this.values;
        var spaces = this.spaces;
        var maxes = this.maxes;
        var alpha = 1;
        var i2;
        this.valid = true;
        if (space === "alpha") {
          alpha = vals;
        } else if (vals.length) {
          values[space] = vals.slice(0, space.length);
          alpha = vals[space.length];
        } else if (vals[space.charAt(0)] !== void 0) {
          for (i2 = 0; i2 < space.length; i2++) {
            values[space][i2] = vals[space.charAt(i2)];
          }
          alpha = vals.a;
        } else if (vals[spaces[space][0]] !== void 0) {
          var chans = spaces[space];
          for (i2 = 0; i2 < space.length; i2++) {
            values[space][i2] = vals[chans[i2]];
          }
          alpha = vals.alpha;
        }
        values.alpha = Math.max(0, Math.min(1, alpha === void 0 ? values.alpha : alpha));
        if (space === "alpha") {
          return false;
        }
        var capped;
        for (i2 = 0; i2 < space.length; i2++) {
          capped = Math.max(0, Math.min(maxes[space][i2], values[space][i2]));
          values[space][i2] = Math.round(capped);
        }
        for (var sname in spaces) {
          if (sname !== space) {
            values[sname] = colorConvert[space][sname](values[space]);
          }
        }
        return true;
      };
      Color.prototype.setSpace = function(space, args) {
        var vals = args[0];
        if (vals === void 0) {
          return this.getValues(space);
        }
        if (typeof vals === "number") {
          vals = Array.prototype.slice.call(args);
        }
        this.setValues(space, vals);
        return this;
      };
      Color.prototype.setChannel = function(space, index, val) {
        var svalues = this.values[space];
        if (val === void 0) {
          return svalues[index];
        } else if (val === svalues[index]) {
          return this;
        }
        svalues[index] = val;
        this.setValues(space, svalues);
        return this;
      };
      if (typeof window !== "undefined") {
        window.Color = Color;
      }
      var chartjsColor = Color;
      function isValidKey(key) {
        return ["__proto__", "prototype", "constructor"].indexOf(key) === -1;
      }
      var helpers = {
        /**
         * An empty function that can be used, for example, for optional callback.
         */
        noop: function() {
        },
        /**
         * Returns a unique id, sequentially generated from a global variable.
         * @returns {number}
         * @function
         */
        uid: function() {
          var id = 0;
          return function() {
            return id++;
          };
        }(),
        /**
         * Returns true if `value` is neither null nor undefined, else returns false.
         * @param {*} value - The value to test.
         * @returns {boolean}
         * @since 2.7.0
         */
        isNullOrUndef: function(value) {
          return value === null || typeof value === "undefined";
        },
        /**
         * Returns true if `value` is an array (including typed arrays), else returns false.
         * @param {*} value - The value to test.
         * @returns {boolean}
         * @function
         */
        isArray: function(value) {
          if (Array.isArray && Array.isArray(value)) {
            return true;
          }
          var type = Object.prototype.toString.call(value);
          if (type.substr(0, 7) === "[object" && type.substr(-6) === "Array]") {
            return true;
          }
          return false;
        },
        /**
         * Returns true if `value` is an object (excluding null), else returns false.
         * @param {*} value - The value to test.
         * @returns {boolean}
         * @since 2.7.0
         */
        isObject: function(value) {
          return value !== null && Object.prototype.toString.call(value) === "[object Object]";
        },
        /**
         * Returns true if `value` is a finite number, else returns false
         * @param {*} value  - The value to test.
         * @returns {boolean}
         */
        isFinite: function(value) {
          return (typeof value === "number" || value instanceof Number) && isFinite(value);
        },
        /**
         * Returns `value` if defined, else returns `defaultValue`.
         * @param {*} value - The value to return if defined.
         * @param {*} defaultValue - The value to return if `value` is undefined.
         * @returns {*}
         */
        valueOrDefault: function(value, defaultValue) {
          return typeof value === "undefined" ? defaultValue : value;
        },
        /**
         * Returns value at the given `index` in array if defined, else returns `defaultValue`.
         * @param {Array} value - The array to lookup for value at `index`.
         * @param {number} index - The index in `value` to lookup for value.
         * @param {*} defaultValue - The value to return if `value[index]` is undefined.
         * @returns {*}
         */
        valueAtIndexOrDefault: function(value, index, defaultValue) {
          return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
        },
        /**
         * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
         * value returned by `fn`. If `fn` is not a function, this method returns undefined.
         * @param {function} fn - The function to call.
         * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
         * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
         * @returns {*}
         */
        callback: function(fn, args, thisArg) {
          if (fn && typeof fn.call === "function") {
            return fn.apply(thisArg, args);
          }
        },
        /**
         * Note(SB) for performance sake, this method should only be used when loopable type
         * is unknown or in none intensive code (not called often and small loopable). Else
         * it's preferable to use a regular for() loop and save extra function calls.
         * @param {object|Array} loopable - The object or array to be iterated.
         * @param {function} fn - The function to call for each item.
         * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
         * @param {boolean} [reverse] - If true, iterates backward on the loopable.
         */
        each: function(loopable, fn, thisArg, reverse) {
          var i2, len, keys;
          if (helpers.isArray(loopable)) {
            len = loopable.length;
            if (reverse) {
              for (i2 = len - 1; i2 >= 0; i2--) {
                fn.call(thisArg, loopable[i2], i2);
              }
            } else {
              for (i2 = 0; i2 < len; i2++) {
                fn.call(thisArg, loopable[i2], i2);
              }
            }
          } else if (helpers.isObject(loopable)) {
            keys = Object.keys(loopable);
            len = keys.length;
            for (i2 = 0; i2 < len; i2++) {
              fn.call(thisArg, loopable[keys[i2]], keys[i2]);
            }
          }
        },
        /**
         * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
         * @see https://stackoverflow.com/a/14853974
         * @param {Array} a0 - The array to compare
         * @param {Array} a1 - The array to compare
         * @returns {boolean}
         */
        arrayEquals: function(a0, a1) {
          var i2, ilen, v0, v1;
          if (!a0 || !a1 || a0.length !== a1.length) {
            return false;
          }
          for (i2 = 0, ilen = a0.length; i2 < ilen; ++i2) {
            v0 = a0[i2];
            v1 = a1[i2];
            if (v0 instanceof Array && v1 instanceof Array) {
              if (!helpers.arrayEquals(v0, v1)) {
                return false;
              }
            } else if (v0 !== v1) {
              return false;
            }
          }
          return true;
        },
        /**
         * Returns a deep copy of `source` without keeping references on objects and arrays.
         * @param {*} source - The value to clone.
         * @returns {*}
         */
        clone: function(source) {
          if (helpers.isArray(source)) {
            return source.map(helpers.clone);
          }
          if (helpers.isObject(source)) {
            var target = Object.create(source);
            var keys = Object.keys(source);
            var klen = keys.length;
            var k2 = 0;
            for (; k2 < klen; ++k2) {
              target[keys[k2]] = helpers.clone(source[keys[k2]]);
            }
            return target;
          }
          return source;
        },
        /**
         * The default merger when Chart.helpers.merge is called without merger option.
         * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
         * @private
         */
        _merger: function(key, target, source, options2) {
          if (!isValidKey(key)) {
            return;
          }
          var tval = target[key];
          var sval = source[key];
          if (helpers.isObject(tval) && helpers.isObject(sval)) {
            helpers.merge(tval, sval, options2);
          } else {
            target[key] = helpers.clone(sval);
          }
        },
        /**
         * Merges source[key] in target[key] only if target[key] is undefined.
         * @private
         */
        _mergerIf: function(key, target, source) {
          if (!isValidKey(key)) {
            return;
          }
          var tval = target[key];
          var sval = source[key];
          if (helpers.isObject(tval) && helpers.isObject(sval)) {
            helpers.mergeIf(tval, sval);
          } else if (!target.hasOwnProperty(key)) {
            target[key] = helpers.clone(sval);
          }
        },
        /**
         * Recursively deep copies `source` properties into `target` with the given `options`.
         * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
         * @param {object} target - The target object in which all sources are merged into.
         * @param {object|object[]} source - Object(s) to merge into `target`.
         * @param {object} [options] - Merging options:
         * @param {function} [options.merger] - The merge method (key, target, source, options)
         * @returns {object} The `target` object.
         */
        merge: function(target, source, options2) {
          var sources = helpers.isArray(source) ? source : [source];
          var ilen = sources.length;
          var merge, i2, keys, klen, k2;
          if (!helpers.isObject(target)) {
            return target;
          }
          options2 = options2 || {};
          merge = options2.merger || helpers._merger;
          for (i2 = 0; i2 < ilen; ++i2) {
            source = sources[i2];
            if (!helpers.isObject(source)) {
              continue;
            }
            keys = Object.keys(source);
            for (k2 = 0, klen = keys.length; k2 < klen; ++k2) {
              merge(keys[k2], target, source, options2);
            }
          }
          return target;
        },
        /**
         * Recursively deep copies `source` properties into `target` *only* if not defined in target.
         * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
         * @param {object} target - The target object in which all sources are merged into.
         * @param {object|object[]} source - Object(s) to merge into `target`.
         * @returns {object} The `target` object.
         */
        mergeIf: function(target, source) {
          return helpers.merge(target, source, { merger: helpers._mergerIf });
        },
        /**
         * Applies the contents of two or more objects together into the first object.
         * @param {object} target - The target object in which all objects are merged into.
         * @param {object} arg1 - Object containing additional properties to merge in target.
         * @param {object} argN - Additional objects containing properties to merge in target.
         * @returns {object} The `target` object.
         */
        extend: Object.assign || function(target) {
          return helpers.merge(target, [].slice.call(arguments, 1), {
            merger: function(key, dst, src2) {
              dst[key] = src2[key];
            }
          });
        },
        /**
         * Basic javascript inheritance based on the model created in Backbone.js
         */
        inherits: function(extensions) {
          var me = this;
          var ChartElement = extensions && extensions.hasOwnProperty("constructor") ? extensions.constructor : function() {
            return me.apply(this, arguments);
          };
          var Surrogate = function() {
            this.constructor = ChartElement;
          };
          Surrogate.prototype = me.prototype;
          ChartElement.prototype = new Surrogate();
          ChartElement.extend = helpers.inherits;
          if (extensions) {
            helpers.extend(ChartElement.prototype, extensions);
          }
          ChartElement.__super__ = me.prototype;
          return ChartElement;
        },
        _deprecated: function(scope, value, previous, current) {
          if (value !== void 0) {
            console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
          }
        }
      };
      var helpers_core = helpers;
      helpers.callCallback = helpers.callback;
      helpers.indexOf = function(array, item, fromIndex) {
        return Array.prototype.indexOf.call(array, item, fromIndex);
      };
      helpers.getValueOrDefault = helpers.valueOrDefault;
      helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
      var effects = {
        linear: function(t2) {
          return t2;
        },
        easeInQuad: function(t2) {
          return t2 * t2;
        },
        easeOutQuad: function(t2) {
          return -t2 * (t2 - 2);
        },
        easeInOutQuad: function(t2) {
          if ((t2 /= 0.5) < 1) {
            return 0.5 * t2 * t2;
          }
          return -0.5 * (--t2 * (t2 - 2) - 1);
        },
        easeInCubic: function(t2) {
          return t2 * t2 * t2;
        },
        easeOutCubic: function(t2) {
          return (t2 = t2 - 1) * t2 * t2 + 1;
        },
        easeInOutCubic: function(t2) {
          if ((t2 /= 0.5) < 1) {
            return 0.5 * t2 * t2 * t2;
          }
          return 0.5 * ((t2 -= 2) * t2 * t2 + 2);
        },
        easeInQuart: function(t2) {
          return t2 * t2 * t2 * t2;
        },
        easeOutQuart: function(t2) {
          return -((t2 = t2 - 1) * t2 * t2 * t2 - 1);
        },
        easeInOutQuart: function(t2) {
          if ((t2 /= 0.5) < 1) {
            return 0.5 * t2 * t2 * t2 * t2;
          }
          return -0.5 * ((t2 -= 2) * t2 * t2 * t2 - 2);
        },
        easeInQuint: function(t2) {
          return t2 * t2 * t2 * t2 * t2;
        },
        easeOutQuint: function(t2) {
          return (t2 = t2 - 1) * t2 * t2 * t2 * t2 + 1;
        },
        easeInOutQuint: function(t2) {
          if ((t2 /= 0.5) < 1) {
            return 0.5 * t2 * t2 * t2 * t2 * t2;
          }
          return 0.5 * ((t2 -= 2) * t2 * t2 * t2 * t2 + 2);
        },
        easeInSine: function(t2) {
          return -Math.cos(t2 * (Math.PI / 2)) + 1;
        },
        easeOutSine: function(t2) {
          return Math.sin(t2 * (Math.PI / 2));
        },
        easeInOutSine: function(t2) {
          return -0.5 * (Math.cos(Math.PI * t2) - 1);
        },
        easeInExpo: function(t2) {
          return t2 === 0 ? 0 : Math.pow(2, 10 * (t2 - 1));
        },
        easeOutExpo: function(t2) {
          return t2 === 1 ? 1 : -Math.pow(2, -10 * t2) + 1;
        },
        easeInOutExpo: function(t2) {
          if (t2 === 0) {
            return 0;
          }
          if (t2 === 1) {
            return 1;
          }
          if ((t2 /= 0.5) < 1) {
            return 0.5 * Math.pow(2, 10 * (t2 - 1));
          }
          return 0.5 * (-Math.pow(2, -10 * --t2) + 2);
        },
        easeInCirc: function(t2) {
          if (t2 >= 1) {
            return t2;
          }
          return -(Math.sqrt(1 - t2 * t2) - 1);
        },
        easeOutCirc: function(t2) {
          return Math.sqrt(1 - (t2 = t2 - 1) * t2);
        },
        easeInOutCirc: function(t2) {
          if ((t2 /= 0.5) < 1) {
            return -0.5 * (Math.sqrt(1 - t2 * t2) - 1);
          }
          return 0.5 * (Math.sqrt(1 - (t2 -= 2) * t2) + 1);
        },
        easeInElastic: function(t2) {
          var s2 = 1.70158;
          var p2 = 0;
          var a2 = 1;
          if (t2 === 0) {
            return 0;
          }
          if (t2 === 1) {
            return 1;
          }
          if (!p2) {
            p2 = 0.3;
          }
          if (a2 < 1) {
            a2 = 1;
            s2 = p2 / 4;
          } else {
            s2 = p2 / (2 * Math.PI) * Math.asin(1 / a2);
          }
          return -(a2 * Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s2) * (2 * Math.PI) / p2));
        },
        easeOutElastic: function(t2) {
          var s2 = 1.70158;
          var p2 = 0;
          var a2 = 1;
          if (t2 === 0) {
            return 0;
          }
          if (t2 === 1) {
            return 1;
          }
          if (!p2) {
            p2 = 0.3;
          }
          if (a2 < 1) {
            a2 = 1;
            s2 = p2 / 4;
          } else {
            s2 = p2 / (2 * Math.PI) * Math.asin(1 / a2);
          }
          return a2 * Math.pow(2, -10 * t2) * Math.sin((t2 - s2) * (2 * Math.PI) / p2) + 1;
        },
        easeInOutElastic: function(t2) {
          var s2 = 1.70158;
          var p2 = 0;
          var a2 = 1;
          if (t2 === 0) {
            return 0;
          }
          if ((t2 /= 0.5) === 2) {
            return 1;
          }
          if (!p2) {
            p2 = 0.45;
          }
          if (a2 < 1) {
            a2 = 1;
            s2 = p2 / 4;
          } else {
            s2 = p2 / (2 * Math.PI) * Math.asin(1 / a2);
          }
          if (t2 < 1) {
            return -0.5 * (a2 * Math.pow(2, 10 * (t2 -= 1)) * Math.sin((t2 - s2) * (2 * Math.PI) / p2));
          }
          return a2 * Math.pow(2, -10 * (t2 -= 1)) * Math.sin((t2 - s2) * (2 * Math.PI) / p2) * 0.5 + 1;
        },
        easeInBack: function(t2) {
          var s2 = 1.70158;
          return t2 * t2 * ((s2 + 1) * t2 - s2);
        },
        easeOutBack: function(t2) {
          var s2 = 1.70158;
          return (t2 = t2 - 1) * t2 * ((s2 + 1) * t2 + s2) + 1;
        },
        easeInOutBack: function(t2) {
          var s2 = 1.70158;
          if ((t2 /= 0.5) < 1) {
            return 0.5 * (t2 * t2 * (((s2 *= 1.525) + 1) * t2 - s2));
          }
          return 0.5 * ((t2 -= 2) * t2 * (((s2 *= 1.525) + 1) * t2 + s2) + 2);
        },
        easeInBounce: function(t2) {
          return 1 - effects.easeOutBounce(1 - t2);
        },
        easeOutBounce: function(t2) {
          if (t2 < 1 / 2.75) {
            return 7.5625 * t2 * t2;
          }
          if (t2 < 2 / 2.75) {
            return 7.5625 * (t2 -= 1.5 / 2.75) * t2 + 0.75;
          }
          if (t2 < 2.5 / 2.75) {
            return 7.5625 * (t2 -= 2.25 / 2.75) * t2 + 0.9375;
          }
          return 7.5625 * (t2 -= 2.625 / 2.75) * t2 + 0.984375;
        },
        easeInOutBounce: function(t2) {
          if (t2 < 0.5) {
            return effects.easeInBounce(t2 * 2) * 0.5;
          }
          return effects.easeOutBounce(t2 * 2 - 1) * 0.5 + 0.5;
        }
      };
      var helpers_easing = {
        effects
      };
      helpers_core.easingEffects = effects;
      var PI = Math.PI;
      var RAD_PER_DEG = PI / 180;
      var DOUBLE_PI = PI * 2;
      var HALF_PI = PI / 2;
      var QUARTER_PI = PI / 4;
      var TWO_THIRDS_PI = PI * 2 / 3;
      var exports$1 = {
        /**
         * Clears the entire canvas associated to the given `chart`.
         * @param {Chart} chart - The chart for which to clear the canvas.
         */
        clear: function(chart) {
          chart.ctx.clearRect(0, 0, chart.width, chart.height);
        },
        /**
         * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
         * given size (width, height) and the same `radius` for all corners.
         * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
         * @param {number} x - The x axis of the coordinate for the rectangle starting point.
         * @param {number} y - The y axis of the coordinate for the rectangle starting point.
         * @param {number} width - The rectangle's width.
         * @param {number} height - The rectangle's height.
         * @param {number} radius - The rounded amount (in pixels) for the four corners.
         * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
         */
        roundedRect: function(ctx, x, y2, width, height, radius) {
          if (radius) {
            var r2 = Math.min(radius, height / 2, width / 2);
            var left = x + r2;
            var top = y2 + r2;
            var right = x + width - r2;
            var bottom = y2 + height - r2;
            ctx.moveTo(x, top);
            if (left < right && top < bottom) {
              ctx.arc(left, top, r2, -PI, -HALF_PI);
              ctx.arc(right, top, r2, -HALF_PI, 0);
              ctx.arc(right, bottom, r2, 0, HALF_PI);
              ctx.arc(left, bottom, r2, HALF_PI, PI);
            } else if (left < right) {
              ctx.moveTo(left, y2);
              ctx.arc(right, top, r2, -HALF_PI, HALF_PI);
              ctx.arc(left, top, r2, HALF_PI, PI + HALF_PI);
            } else if (top < bottom) {
              ctx.arc(left, top, r2, -PI, 0);
              ctx.arc(left, bottom, r2, 0, PI);
            } else {
              ctx.arc(left, top, r2, -PI, PI);
            }
            ctx.closePath();
            ctx.moveTo(x, y2);
          } else {
            ctx.rect(x, y2, width, height);
          }
        },
        drawPoint: function(ctx, style, radius, x, y2, rotation) {
          var type, xOffset, yOffset, size, cornerRadius;
          var rad = (rotation || 0) * RAD_PER_DEG;
          if (style && typeof style === "object") {
            type = style.toString();
            if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
              ctx.save();
              ctx.translate(x, y2);
              ctx.rotate(rad);
              ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
              ctx.restore();
              return;
            }
          }
          if (isNaN(radius) || radius <= 0) {
            return;
          }
          ctx.beginPath();
          switch (style) {
            default:
              ctx.arc(x, y2, radius, 0, DOUBLE_PI);
              ctx.closePath();
              break;
            case "triangle":
              ctx.moveTo(x + Math.sin(rad) * radius, y2 - Math.cos(rad) * radius);
              rad += TWO_THIRDS_PI;
              ctx.lineTo(x + Math.sin(rad) * radius, y2 - Math.cos(rad) * radius);
              rad += TWO_THIRDS_PI;
              ctx.lineTo(x + Math.sin(rad) * radius, y2 - Math.cos(rad) * radius);
              ctx.closePath();
              break;
            case "rectRounded":
              cornerRadius = radius * 0.516;
              size = radius - cornerRadius;
              xOffset = Math.cos(rad + QUARTER_PI) * size;
              yOffset = Math.sin(rad + QUARTER_PI) * size;
              ctx.arc(x - xOffset, y2 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
              ctx.arc(x + yOffset, y2 - xOffset, cornerRadius, rad - HALF_PI, rad);
              ctx.arc(x + xOffset, y2 + yOffset, cornerRadius, rad, rad + HALF_PI);
              ctx.arc(x - yOffset, y2 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
              ctx.closePath();
              break;
            case "rect":
              if (!rotation) {
                size = Math.SQRT1_2 * radius;
                ctx.rect(x - size, y2 - size, 2 * size, 2 * size);
                break;
              }
              rad += QUARTER_PI;
            case "rectRot":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y2 - yOffset);
              ctx.lineTo(x + yOffset, y2 - xOffset);
              ctx.lineTo(x + xOffset, y2 + yOffset);
              ctx.lineTo(x - yOffset, y2 + xOffset);
              ctx.closePath();
              break;
            case "crossRot":
              rad += QUARTER_PI;
            case "cross":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y2 - yOffset);
              ctx.lineTo(x + xOffset, y2 + yOffset);
              ctx.moveTo(x + yOffset, y2 - xOffset);
              ctx.lineTo(x - yOffset, y2 + xOffset);
              break;
            case "star":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y2 - yOffset);
              ctx.lineTo(x + xOffset, y2 + yOffset);
              ctx.moveTo(x + yOffset, y2 - xOffset);
              ctx.lineTo(x - yOffset, y2 + xOffset);
              rad += QUARTER_PI;
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y2 - yOffset);
              ctx.lineTo(x + xOffset, y2 + yOffset);
              ctx.moveTo(x + yOffset, y2 - xOffset);
              ctx.lineTo(x - yOffset, y2 + xOffset);
              break;
            case "line":
              xOffset = Math.cos(rad) * radius;
              yOffset = Math.sin(rad) * radius;
              ctx.moveTo(x - xOffset, y2 - yOffset);
              ctx.lineTo(x + xOffset, y2 + yOffset);
              break;
            case "dash":
              ctx.moveTo(x, y2);
              ctx.lineTo(x + Math.cos(rad) * radius, y2 + Math.sin(rad) * radius);
              break;
          }
          ctx.fill();
          ctx.stroke();
        },
        /**
         * Returns true if the point is inside the rectangle
         * @param {object} point - The point to test
         * @param {object} area - The rectangle
         * @returns {boolean}
         * @private
         */
        _isPointInArea: function(point, area) {
          var epsilon = 1e-6;
          return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;
        },
        clipArea: function(ctx, area) {
          ctx.save();
          ctx.beginPath();
          ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
          ctx.clip();
        },
        unclipArea: function(ctx) {
          ctx.restore();
        },
        lineTo: function(ctx, previous, target, flip) {
          var stepped = target.steppedLine;
          if (stepped) {
            if (stepped === "middle") {
              var midpoint = (previous.x + target.x) / 2;
              ctx.lineTo(midpoint, flip ? target.y : previous.y);
              ctx.lineTo(midpoint, flip ? previous.y : target.y);
            } else if (stepped === "after" && !flip || stepped !== "after" && flip) {
              ctx.lineTo(previous.x, target.y);
            } else {
              ctx.lineTo(target.x, previous.y);
            }
            ctx.lineTo(target.x, target.y);
            return;
          }
          if (!target.tension) {
            ctx.lineTo(target.x, target.y);
            return;
          }
          ctx.bezierCurveTo(
            flip ? previous.controlPointPreviousX : previous.controlPointNextX,
            flip ? previous.controlPointPreviousY : previous.controlPointNextY,
            flip ? target.controlPointNextX : target.controlPointPreviousX,
            flip ? target.controlPointNextY : target.controlPointPreviousY,
            target.x,
            target.y
          );
        }
      };
      var helpers_canvas = exports$1;
      helpers_core.clear = exports$1.clear;
      helpers_core.drawRoundedRectangle = function(ctx) {
        ctx.beginPath();
        exports$1.roundedRect.apply(exports$1, arguments);
      };
      var defaults = {
        /**
         * @private
         */
        _set: function(scope, values) {
          return helpers_core.merge(this[scope] || (this[scope] = {}), values);
        }
      };
      defaults._set("global", {
        defaultColor: "rgba(0,0,0,0.1)",
        defaultFontColor: "#666",
        defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
        defaultFontSize: 12,
        defaultFontStyle: "normal",
        defaultLineHeight: 1.2,
        showLines: true
      });
      var core_defaults = defaults;
      var valueOrDefault = helpers_core.valueOrDefault;
      function toFontString(font) {
        if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
          return null;
        }
        return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
      }
      var helpers_options = {
        /**
         * Converts the given line height `value` in pixels for a specific font `size`.
         * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
         * @param {number} size - The font size (in pixels) used to resolve relative `value`.
         * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
         * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
         * @since 2.7.0
         */
        toLineHeight: function(value, size) {
          var matches = ("" + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
          if (!matches || matches[1] === "normal") {
            return size * 1.2;
          }
          value = +matches[2];
          switch (matches[3]) {
            case "px":
              return value;
            case "%":
              value /= 100;
              break;
          }
          return size * value;
        },
        /**
         * Converts the given value into a padding object with pre-computed width/height.
         * @param {number|object} value - If a number, set the value to all TRBL component,
         *  else, if and object, use defined properties and sets undefined ones to 0.
         * @returns {object} The padding values (top, right, bottom, left, width, height)
         * @since 2.7.0
         */
        toPadding: function(value) {
          var t2, r2, b2, l2;
          if (helpers_core.isObject(value)) {
            t2 = +value.top || 0;
            r2 = +value.right || 0;
            b2 = +value.bottom || 0;
            l2 = +value.left || 0;
          } else {
            t2 = r2 = b2 = l2 = +value || 0;
          }
          return {
            top: t2,
            right: r2,
            bottom: b2,
            left: l2,
            height: t2 + b2,
            width: l2 + r2
          };
        },
        /**
         * Parses font options and returns the font object.
         * @param {object} options - A object that contains font options to be parsed.
         * @return {object} The font object.
         * @todo Support font.* options and renamed to toFont().
         * @private
         */
        _parseFont: function(options2) {
          var globalDefaults = core_defaults.global;
          var size = valueOrDefault(options2.fontSize, globalDefaults.defaultFontSize);
          var font = {
            family: valueOrDefault(options2.fontFamily, globalDefaults.defaultFontFamily),
            lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options2.lineHeight, globalDefaults.defaultLineHeight), size),
            size,
            style: valueOrDefault(options2.fontStyle, globalDefaults.defaultFontStyle),
            weight: null,
            string: ""
          };
          font.string = toFontString(font);
          return font;
        },
        /**
         * Evaluates the given `inputs` sequentially and returns the first defined value.
         * @param {Array} inputs - An array of values, falling back to the last value.
         * @param {object} [context] - If defined and the current value is a function, the value
         * is called with `context` as first argument and the result becomes the new input.
         * @param {number} [index] - If defined and the current value is an array, the value
         * at `index` become the new input.
         * @param {object} [info] - object to return information about resolution in
         * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
         * @since 2.7.0
         */
        resolve: function(inputs, context, index, info) {
          var cacheable = true;
          var i2, ilen, value;
          for (i2 = 0, ilen = inputs.length; i2 < ilen; ++i2) {
            value = inputs[i2];
            if (value === void 0) {
              continue;
            }
            if (context !== void 0 && typeof value === "function") {
              value = value(context);
              cacheable = false;
            }
            if (index !== void 0 && helpers_core.isArray(value)) {
              value = value[index];
              cacheable = false;
            }
            if (value !== void 0) {
              if (info && !cacheable) {
                info.cacheable = false;
              }
              return value;
            }
          }
        }
      };
      var exports$2 = {
        /**
         * Returns an array of factors sorted from 1 to sqrt(value)
         * @private
         */
        _factorize: function(value) {
          var result = [];
          var sqrt = Math.sqrt(value);
          var i2;
          for (i2 = 1; i2 < sqrt; i2++) {
            if (value % i2 === 0) {
              result.push(i2);
              result.push(value / i2);
            }
          }
          if (sqrt === (sqrt | 0)) {
            result.push(sqrt);
          }
          result.sort(function(a2, b2) {
            return a2 - b2;
          }).pop();
          return result;
        },
        log10: Math.log10 || function(x) {
          var exponent = Math.log(x) * Math.LOG10E;
          var powerOf10 = Math.round(exponent);
          var isPowerOf10 = x === Math.pow(10, powerOf10);
          return isPowerOf10 ? powerOf10 : exponent;
        }
      };
      var helpers_math = exports$2;
      helpers_core.log10 = exports$2.log10;
      var getRtlAdapter = function(rectX, width) {
        return {
          x: function(x) {
            return rectX + rectX + width - x;
          },
          setWidth: function(w2) {
            width = w2;
          },
          textAlign: function(align) {
            if (align === "center") {
              return align;
            }
            return align === "right" ? "left" : "right";
          },
          xPlus: function(x, value) {
            return x - value;
          },
          leftForLtr: function(x, itemWidth) {
            return x - itemWidth;
          }
        };
      };
      var getLtrAdapter = function() {
        return {
          x: function(x) {
            return x;
          },
          setWidth: function(w2) {
          },
          textAlign: function(align) {
            return align;
          },
          xPlus: function(x, value) {
            return x + value;
          },
          leftForLtr: function(x, _itemWidth) {
            return x;
          }
        };
      };
      var getAdapter = function(rtl2, rectX, width) {
        return rtl2 ? getRtlAdapter(rectX, width) : getLtrAdapter();
      };
      var overrideTextDirection = function(ctx, direction) {
        var style, original;
        if (direction === "ltr" || direction === "rtl") {
          style = ctx.canvas.style;
          original = [
            style.getPropertyValue("direction"),
            style.getPropertyPriority("direction")
          ];
          style.setProperty("direction", direction, "important");
          ctx.prevTextDirection = original;
        }
      };
      var restoreTextDirection = function(ctx) {
        var original = ctx.prevTextDirection;
        if (original !== void 0) {
          delete ctx.prevTextDirection;
          ctx.canvas.style.setProperty("direction", original[0], original[1]);
        }
      };
      var helpers_rtl = {
        getRtlAdapter: getAdapter,
        overrideTextDirection,
        restoreTextDirection
      };
      var helpers$1 = helpers_core;
      var easing = helpers_easing;
      var canvas = helpers_canvas;
      var options = helpers_options;
      var math = helpers_math;
      var rtl = helpers_rtl;
      helpers$1.easing = easing;
      helpers$1.canvas = canvas;
      helpers$1.options = options;
      helpers$1.math = math;
      helpers$1.rtl = rtl;
      function interpolate(start, view, model, ease) {
        var keys = Object.keys(model);
        var i2, ilen, key, actual, origin, target, type, c0, c1;
        for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
          key = keys[i2];
          target = model[key];
          if (!view.hasOwnProperty(key)) {
            view[key] = target;
          }
          actual = view[key];
          if (actual === target || key[0] === "_") {
            continue;
          }
          if (!start.hasOwnProperty(key)) {
            start[key] = actual;
          }
          origin = start[key];
          type = typeof target;
          if (type === typeof origin) {
            if (type === "string") {
              c0 = chartjsColor(origin);
              if (c0.valid) {
                c1 = chartjsColor(target);
                if (c1.valid) {
                  view[key] = c1.mix(c0, ease).rgbString();
                  continue;
                }
              }
            } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
              view[key] = origin + (target - origin) * ease;
              continue;
            }
          }
          view[key] = target;
        }
      }
      var Element2 = function(configuration) {
        helpers$1.extend(this, configuration);
        this.initialize.apply(this, arguments);
      };
      helpers$1.extend(Element2.prototype, {
        _type: void 0,
        initialize: function() {
          this.hidden = false;
        },
        pivot: function() {
          var me = this;
          if (!me._view) {
            me._view = helpers$1.extend({}, me._model);
          }
          me._start = {};
          return me;
        },
        transition: function(ease) {
          var me = this;
          var model = me._model;
          var start = me._start;
          var view = me._view;
          if (!model || ease === 1) {
            me._view = helpers$1.extend({}, model);
            me._start = null;
            return me;
          }
          if (!view) {
            view = me._view = {};
          }
          if (!start) {
            start = me._start = {};
          }
          interpolate(start, view, model, ease);
          return me;
        },
        tooltipPosition: function() {
          return {
            x: this._model.x,
            y: this._model.y
          };
        },
        hasValue: function() {
          return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
        }
      });
      Element2.extend = helpers$1.inherits;
      var core_element = Element2;
      var exports$3 = core_element.extend({
        chart: null,
        // the animation associated chart instance
        currentStep: 0,
        // the current animation step
        numSteps: 60,
        // default number of steps
        easing: "",
        // the easing to use for this animation
        render: null,
        // render function used by the animation service
        onAnimationProgress: null,
        // user specified callback to fire on each step of the animation
        onAnimationComplete: null
        // user specified callback to fire when the animation finishes
      });
      var core_animation = exports$3;
      Object.defineProperty(exports$3.prototype, "animationObject", {
        get: function() {
          return this;
        }
      });
      Object.defineProperty(exports$3.prototype, "chartInstance", {
        get: function() {
          return this.chart;
        },
        set: function(value) {
          this.chart = value;
        }
      });
      core_defaults._set("global", {
        animation: {
          duration: 1e3,
          easing: "easeOutQuart",
          onProgress: helpers$1.noop,
          onComplete: helpers$1.noop
        }
      });
      var core_animations = {
        animations: [],
        request: null,
        /**
         * @param {Chart} chart - The chart to animate.
         * @param {Chart.Animation} animation - The animation that we will animate.
         * @param {number} duration - The animation duration in ms.
         * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
         */
        addAnimation: function(chart, animation, duration, lazy) {
          var animations = this.animations;
          var i2, ilen;
          animation.chart = chart;
          animation.startTime = Date.now();
          animation.duration = duration;
          if (!lazy) {
            chart.animating = true;
          }
          for (i2 = 0, ilen = animations.length; i2 < ilen; ++i2) {
            if (animations[i2].chart === chart) {
              animations[i2] = animation;
              return;
            }
          }
          animations.push(animation);
          if (animations.length === 1) {
            this.requestAnimationFrame();
          }
        },
        cancelAnimation: function(chart) {
          var index = helpers$1.findIndex(this.animations, function(animation) {
            return animation.chart === chart;
          });
          if (index !== -1) {
            this.animations.splice(index, 1);
            chart.animating = false;
          }
        },
        requestAnimationFrame: function() {
          var me = this;
          if (me.request === null) {
            me.request = helpers$1.requestAnimFrame.call(window, function() {
              me.request = null;
              me.startDigest();
            });
          }
        },
        /**
         * @private
         */
        startDigest: function() {
          var me = this;
          me.advance();
          if (me.animations.length > 0) {
            me.requestAnimationFrame();
          }
        },
        /**
         * @private
         */
        advance: function() {
          var animations = this.animations;
          var animation, chart, numSteps, nextStep;
          var i2 = 0;
          while (i2 < animations.length) {
            animation = animations[i2];
            chart = animation.chart;
            numSteps = animation.numSteps;
            nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
            animation.currentStep = Math.min(nextStep, numSteps);
            helpers$1.callback(animation.render, [chart, animation], chart);
            helpers$1.callback(animation.onAnimationProgress, [animation], chart);
            if (animation.currentStep >= numSteps) {
              helpers$1.callback(animation.onAnimationComplete, [animation], chart);
              chart.animating = false;
              animations.splice(i2, 1);
            } else {
              ++i2;
            }
          }
        }
      };
      var resolve = helpers$1.options.resolve;
      var arrayEvents = ["push", "pop", "shift", "splice", "unshift"];
      function listenArrayEvents(array, listener) {
        if (array._chartjs) {
          array._chartjs.listeners.push(listener);
          return;
        }
        Object.defineProperty(array, "_chartjs", {
          configurable: true,
          enumerable: false,
          value: {
            listeners: [listener]
          }
        });
        arrayEvents.forEach(function(key) {
          var method = "onData" + key.charAt(0).toUpperCase() + key.slice(1);
          var base = array[key];
          Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value: function() {
              var args = Array.prototype.slice.call(arguments);
              var res = base.apply(this, args);
              helpers$1.each(array._chartjs.listeners, function(object) {
                if (typeof object[method] === "function") {
                  object[method].apply(object, args);
                }
              });
              return res;
            }
          });
        });
      }
      function unlistenArrayEvents(array, listener) {
        var stub = array._chartjs;
        if (!stub) {
          return;
        }
        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);
        if (index !== -1) {
          listeners.splice(index, 1);
        }
        if (listeners.length > 0) {
          return;
        }
        arrayEvents.forEach(function(key) {
          delete array[key];
        });
        delete array._chartjs;
      }
      var DatasetController = function(chart, datasetIndex) {
        this.initialize(chart, datasetIndex);
      };
      helpers$1.extend(DatasetController.prototype, {
        /**
         * Element type used to generate a meta dataset (e.g. Chart.element.Line).
         * @type {Chart.core.element}
         */
        datasetElementType: null,
        /**
         * Element type used to generate a meta data (e.g. Chart.element.Point).
         * @type {Chart.core.element}
         */
        dataElementType: null,
        /**
         * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
         * A derived controller may override this to resolve controller-specific options.
         * The keys defined here are for backward compatibility for legend styles.
         * @private
         */
        _datasetElementOptions: [
          "backgroundColor",
          "borderCapStyle",
          "borderColor",
          "borderDash",
          "borderDashOffset",
          "borderJoinStyle",
          "borderWidth"
        ],
        /**
         * Data element option keys to be resolved in _resolveDataElementOptions.
         * A derived controller may override this to resolve controller-specific options.
         * The keys defined here are for backward compatibility for legend styles.
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "pointStyle"
        ],
        initialize: function(chart, datasetIndex) {
          var me = this;
          me.chart = chart;
          me.index = datasetIndex;
          me.linkScales();
          me.addElements();
          me._type = me.getMeta().type;
        },
        updateIndex: function(datasetIndex) {
          this.index = datasetIndex;
        },
        linkScales: function() {
          var me = this;
          var meta = me.getMeta();
          var chart = me.chart;
          var scales2 = chart.scales;
          var dataset = me.getDataset();
          var scalesOpts = chart.options.scales;
          if (meta.xAxisID === null || !(meta.xAxisID in scales2) || dataset.xAxisID) {
            meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
          }
          if (meta.yAxisID === null || !(meta.yAxisID in scales2) || dataset.yAxisID) {
            meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
          }
        },
        getDataset: function() {
          return this.chart.data.datasets[this.index];
        },
        getMeta: function() {
          return this.chart.getDatasetMeta(this.index);
        },
        getScaleForId: function(scaleID) {
          return this.chart.scales[scaleID];
        },
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.getMeta().yAxisID;
        },
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.getMeta().xAxisID;
        },
        /**
         * @private
         */
        _getValueScale: function() {
          return this.getScaleForId(this._getValueScaleId());
        },
        /**
         * @private
         */
        _getIndexScale: function() {
          return this.getScaleForId(this._getIndexScaleId());
        },
        reset: function() {
          this._update(true);
        },
        /**
         * @private
         */
        destroy: function() {
          if (this._data) {
            unlistenArrayEvents(this._data, this);
          }
        },
        createMetaDataset: function() {
          var me = this;
          var type = me.datasetElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index
          });
        },
        createMetaData: function(index) {
          var me = this;
          var type = me.dataElementType;
          return type && new type({
            _chart: me.chart,
            _datasetIndex: me.index,
            _index: index
          });
        },
        addElements: function() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data || [];
          var metaData = meta.data;
          var i2, ilen;
          for (i2 = 0, ilen = data.length; i2 < ilen; ++i2) {
            metaData[i2] = metaData[i2] || me.createMetaData(i2);
          }
          meta.dataset = meta.dataset || me.createMetaDataset();
        },
        addElementAndReset: function(index) {
          var element = this.createMetaData(index);
          this.getMeta().data.splice(index, 0, element);
          this.updateElement(element, index, true);
        },
        buildOrUpdateElements: function() {
          var me = this;
          var dataset = me.getDataset();
          var data = dataset.data || (dataset.data = []);
          if (me._data !== data) {
            if (me._data) {
              unlistenArrayEvents(me._data, me);
            }
            if (data && Object.isExtensible(data)) {
              listenArrayEvents(data, me);
            }
            me._data = data;
          }
          me.resyncElements();
        },
        /**
         * Returns the merged user-supplied and default dataset-level options
         * @private
         */
        _configure: function() {
          var me = this;
          me._config = helpers$1.merge(/* @__PURE__ */ Object.create(null), [
            me.chart.options.datasets[me._type],
            me.getDataset()
          ], {
            merger: function(key, target, source) {
              if (key !== "_meta" && key !== "data") {
                helpers$1._merger(key, target, source);
              }
            }
          });
        },
        _update: function(reset) {
          var me = this;
          me._configure();
          me._cachedDataOpts = null;
          me.update(reset);
        },
        update: helpers$1.noop,
        transition: function(easingValue) {
          var meta = this.getMeta();
          var elements2 = meta.data || [];
          var ilen = elements2.length;
          var i2 = 0;
          for (; i2 < ilen; ++i2) {
            elements2[i2].transition(easingValue);
          }
          if (meta.dataset) {
            meta.dataset.transition(easingValue);
          }
        },
        draw: function() {
          var meta = this.getMeta();
          var elements2 = meta.data || [];
          var ilen = elements2.length;
          var i2 = 0;
          if (meta.dataset) {
            meta.dataset.draw();
          }
          for (; i2 < ilen; ++i2) {
            elements2[i2].draw();
          }
        },
        /**
         * Returns a set of predefined style properties that should be used to represent the dataset
         * or the data if the index is specified
         * @param {number} index - data index
         * @return {IStyleInterface} style object
         */
        getStyle: function(index) {
          var me = this;
          var meta = me.getMeta();
          var dataset = meta.dataset;
          var style;
          me._configure();
          if (dataset && index === void 0) {
            style = me._resolveDatasetElementOptions(dataset || {});
          } else {
            index = index || 0;
            style = me._resolveDataElementOptions(meta.data[index] || {}, index);
          }
          if (style.fill === false || style.fill === null) {
            style.backgroundColor = style.borderColor;
          }
          return style;
        },
        /**
         * @private
         */
        _resolveDatasetElementOptions: function(element, hover) {
          var me = this;
          var chart = me.chart;
          var datasetOpts = me._config;
          var custom = element.custom || {};
          var options2 = chart.options.elements[me.datasetElementType.prototype._type] || {};
          var elementOptions = me._datasetElementOptions;
          var values = {};
          var i2, ilen, key, readKey;
          var context = {
            chart,
            dataset: me.getDataset(),
            datasetIndex: me.index,
            hover
          };
          for (i2 = 0, ilen = elementOptions.length; i2 < ilen; ++i2) {
            key = elementOptions[i2];
            readKey = hover ? "hover" + key.charAt(0).toUpperCase() + key.slice(1) : key;
            values[key] = resolve([
              custom[readKey],
              datasetOpts[readKey],
              options2[readKey]
            ], context);
          }
          return values;
        },
        /**
         * @private
         */
        _resolveDataElementOptions: function(element, index) {
          var me = this;
          var custom = element && element.custom;
          var cached = me._cachedDataOpts;
          if (cached && !custom) {
            return cached;
          }
          var chart = me.chart;
          var datasetOpts = me._config;
          var options2 = chart.options.elements[me.dataElementType.prototype._type] || {};
          var elementOptions = me._dataElementOptions;
          var values = {};
          var context = {
            chart,
            dataIndex: index,
            dataset: me.getDataset(),
            datasetIndex: me.index
          };
          var info = { cacheable: !custom };
          var keys, i2, ilen, key;
          custom = custom || {};
          if (helpers$1.isArray(elementOptions)) {
            for (i2 = 0, ilen = elementOptions.length; i2 < ilen; ++i2) {
              key = elementOptions[i2];
              values[key] = resolve([
                custom[key],
                datasetOpts[key],
                options2[key]
              ], context, index, info);
            }
          } else {
            keys = Object.keys(elementOptions);
            for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
              key = keys[i2];
              values[key] = resolve([
                custom[key],
                datasetOpts[elementOptions[key]],
                datasetOpts[key],
                options2[key]
              ], context, index, info);
            }
          }
          if (info.cacheable) {
            me._cachedDataOpts = Object.freeze(values);
          }
          return values;
        },
        removeHoverStyle: function(element) {
          helpers$1.merge(element._model, element.$previousStyle || {});
          delete element.$previousStyle;
        },
        setHoverStyle: function(element) {
          var dataset = this.chart.data.datasets[element._datasetIndex];
          var index = element._index;
          var custom = element.custom || {};
          var model = element._model;
          var getHoverColor = helpers$1.getHoverColor;
          element.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], void 0, index);
          model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], void 0, index);
          model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], void 0, index);
        },
        /**
         * @private
         */
        _removeDatasetHoverStyle: function() {
          var element = this.getMeta().dataset;
          if (element) {
            this.removeHoverStyle(element);
          }
        },
        /**
         * @private
         */
        _setDatasetHoverStyle: function() {
          var element = this.getMeta().dataset;
          var prev = {};
          var i2, ilen, key, keys, hoverOptions, model;
          if (!element) {
            return;
          }
          model = element._model;
          hoverOptions = this._resolveDatasetElementOptions(element, true);
          keys = Object.keys(hoverOptions);
          for (i2 = 0, ilen = keys.length; i2 < ilen; ++i2) {
            key = keys[i2];
            prev[key] = model[key];
            model[key] = hoverOptions[key];
          }
          element.$previousStyle = prev;
        },
        /**
         * @private
         */
        resyncElements: function() {
          var me = this;
          var meta = me.getMeta();
          var data = me.getDataset().data;
          var numMeta = meta.data.length;
          var numData = data.length;
          if (numData < numMeta) {
            meta.data.splice(numData, numMeta - numData);
          } else if (numData > numMeta) {
            me.insertElements(numMeta, numData - numMeta);
          }
        },
        /**
         * @private
         */
        insertElements: function(start, count) {
          for (var i2 = 0; i2 < count; ++i2) {
            this.addElementAndReset(start + i2);
          }
        },
        /**
         * @private
         */
        onDataPush: function() {
          var count = arguments.length;
          this.insertElements(this.getDataset().data.length - count, count);
        },
        /**
         * @private
         */
        onDataPop: function() {
          this.getMeta().data.pop();
        },
        /**
         * @private
         */
        onDataShift: function() {
          this.getMeta().data.shift();
        },
        /**
         * @private
         */
        onDataSplice: function(start, count) {
          this.getMeta().data.splice(start, count);
          this.insertElements(start, arguments.length - 2);
        },
        /**
         * @private
         */
        onDataUnshift: function() {
          this.insertElements(0, arguments.length);
        }
      });
      DatasetController.extend = helpers$1.inherits;
      var core_datasetController = DatasetController;
      var TAU = Math.PI * 2;
      core_defaults._set("global", {
        elements: {
          arc: {
            backgroundColor: core_defaults.global.defaultColor,
            borderColor: "#fff",
            borderWidth: 2,
            borderAlign: "center"
          }
        }
      });
      function clipArc(ctx, arc) {
        var startAngle = arc.startAngle;
        var endAngle = arc.endAngle;
        var pixelMargin = arc.pixelMargin;
        var angleMargin = pixelMargin / arc.outerRadius;
        var x = arc.x;
        var y2 = arc.y;
        ctx.beginPath();
        ctx.arc(x, y2, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
        if (arc.innerRadius > pixelMargin) {
          angleMargin = pixelMargin / arc.innerRadius;
          ctx.arc(x, y2, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
        } else {
          ctx.arc(x, y2, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
        }
        ctx.closePath();
        ctx.clip();
      }
      function drawFullCircleBorders(ctx, vm, arc, inner) {
        var endAngle = arc.endAngle;
        var i2;
        if (inner) {
          arc.endAngle = arc.startAngle + TAU;
          clipArc(ctx, arc);
          arc.endAngle = endAngle;
          if (arc.endAngle === arc.startAngle && arc.fullCircles) {
            arc.endAngle += TAU;
            arc.fullCircles--;
          }
        }
        ctx.beginPath();
        ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
        for (i2 = 0; i2 < arc.fullCircles; ++i2) {
          ctx.stroke();
        }
        ctx.beginPath();
        ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
        for (i2 = 0; i2 < arc.fullCircles; ++i2) {
          ctx.stroke();
        }
      }
      function drawBorder(ctx, vm, arc) {
        var inner = vm.borderAlign === "inner";
        if (inner) {
          ctx.lineWidth = vm.borderWidth * 2;
          ctx.lineJoin = "round";
        } else {
          ctx.lineWidth = vm.borderWidth;
          ctx.lineJoin = "bevel";
        }
        if (arc.fullCircles) {
          drawFullCircleBorders(ctx, vm, arc, inner);
        }
        if (inner) {
          clipArc(ctx, arc);
        }
        ctx.beginPath();
        ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
        ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
        ctx.closePath();
        ctx.stroke();
      }
      var element_arc = core_element.extend({
        _type: "arc",
        inLabelRange: function(mouseX) {
          var vm = this._view;
          if (vm) {
            return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
          }
          return false;
        },
        inRange: function(chartX, chartY) {
          var vm = this._view;
          if (vm) {
            var pointRelativePosition = helpers$1.getAngleFromPoint(vm, { x: chartX, y: chartY });
            var angle = pointRelativePosition.angle;
            var distance = pointRelativePosition.distance;
            var startAngle = vm.startAngle;
            var endAngle = vm.endAngle;
            while (endAngle < startAngle) {
              endAngle += TAU;
            }
            while (angle > endAngle) {
              angle -= TAU;
            }
            while (angle < startAngle) {
              angle += TAU;
            }
            var betweenAngles = angle >= startAngle && angle <= endAngle;
            var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
            return betweenAngles && withinRadius;
          }
          return false;
        },
        getCenterPoint: function() {
          var vm = this._view;
          var halfAngle = (vm.startAngle + vm.endAngle) / 2;
          var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
          return {
            x: vm.x + Math.cos(halfAngle) * halfRadius,
            y: vm.y + Math.sin(halfAngle) * halfRadius
          };
        },
        getArea: function() {
          var vm = this._view;
          return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
        },
        tooltipPosition: function() {
          var vm = this._view;
          var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;
          var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
          return {
            x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
            y: vm.y + Math.sin(centreAngle) * rangeFromCentre
          };
        },
        draw: function() {
          var ctx = this._chart.ctx;
          var vm = this._view;
          var pixelMargin = vm.borderAlign === "inner" ? 0.33 : 0;
          var arc = {
            x: vm.x,
            y: vm.y,
            innerRadius: vm.innerRadius,
            outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
            pixelMargin,
            startAngle: vm.startAngle,
            endAngle: vm.endAngle,
            fullCircles: Math.floor(vm.circumference / TAU)
          };
          var i2;
          ctx.save();
          ctx.fillStyle = vm.backgroundColor;
          ctx.strokeStyle = vm.borderColor;
          if (arc.fullCircles) {
            arc.endAngle = arc.startAngle + TAU;
            ctx.beginPath();
            ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
            ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
            ctx.closePath();
            for (i2 = 0; i2 < arc.fullCircles; ++i2) {
              ctx.fill();
            }
            arc.endAngle = arc.startAngle + vm.circumference % TAU;
          }
          ctx.beginPath();
          ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
          ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
          ctx.closePath();
          ctx.fill();
          if (vm.borderWidth) {
            drawBorder(ctx, vm, arc);
          }
          ctx.restore();
        }
      });
      var valueOrDefault$1 = helpers$1.valueOrDefault;
      var defaultColor = core_defaults.global.defaultColor;
      core_defaults._set("global", {
        elements: {
          line: {
            tension: 0.4,
            backgroundColor: defaultColor,
            borderWidth: 3,
            borderColor: defaultColor,
            borderCapStyle: "butt",
            borderDash: [],
            borderDashOffset: 0,
            borderJoinStyle: "miter",
            capBezierPoints: true,
            fill: true
            // do we fill in the area between the line and its base axis
          }
        }
      });
      var element_line = core_element.extend({
        _type: "line",
        draw: function() {
          var me = this;
          var vm = me._view;
          var ctx = me._chart.ctx;
          var spanGaps = vm.spanGaps;
          var points = me._children.slice();
          var globalDefaults = core_defaults.global;
          var globalOptionLineElements = globalDefaults.elements.line;
          var lastDrawnIndex = -1;
          var closePath = me._loop;
          var index, previous, currentVM;
          if (!points.length) {
            return;
          }
          if (me._loop) {
            for (index = 0; index < points.length; ++index) {
              previous = helpers$1.previousItem(points, index);
              if (!points[index]._view.skip && previous._view.skip) {
                points = points.slice(index).concat(points.slice(0, index));
                closePath = spanGaps;
                break;
              }
            }
            if (closePath) {
              points.push(points[0]);
            }
          }
          ctx.save();
          ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
          if (ctx.setLineDash) {
            ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
          }
          ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
          ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
          ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
          ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
          ctx.beginPath();
          currentVM = points[0]._view;
          if (!currentVM.skip) {
            ctx.moveTo(currentVM.x, currentVM.y);
            lastDrawnIndex = 0;
          }
          for (index = 1; index < points.length; ++index) {
            currentVM = points[index]._view;
            previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];
            if (!currentVM.skip) {
              if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                ctx.moveTo(currentVM.x, currentVM.y);
              } else {
                helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
              }
              lastDrawnIndex = index;
            }
          }
          if (closePath) {
            ctx.closePath();
          }
          ctx.stroke();
          ctx.restore();
        }
      });
      var valueOrDefault$2 = helpers$1.valueOrDefault;
      var defaultColor$1 = core_defaults.global.defaultColor;
      core_defaults._set("global", {
        elements: {
          point: {
            radius: 3,
            pointStyle: "circle",
            backgroundColor: defaultColor$1,
            borderColor: defaultColor$1,
            borderWidth: 1,
            // Hover
            hitRadius: 1,
            hoverRadius: 4,
            hoverBorderWidth: 1
          }
        }
      });
      function xRange(mouseX) {
        var vm = this._view;
        return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;
      }
      function yRange(mouseY) {
        var vm = this._view;
        return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;
      }
      var element_point = core_element.extend({
        _type: "point",
        inRange: function(mouseX, mouseY) {
          var vm = this._view;
          return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
        },
        inLabelRange: xRange,
        inXRange: xRange,
        inYRange: yRange,
        getCenterPoint: function() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y
          };
        },
        getArea: function() {
          return Math.PI * Math.pow(this._view.radius, 2);
        },
        tooltipPosition: function() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y,
            padding: vm.radius + vm.borderWidth
          };
        },
        draw: function(chartArea) {
          var vm = this._view;
          var ctx = this._chart.ctx;
          var pointStyle = vm.pointStyle;
          var rotation = vm.rotation;
          var radius = vm.radius;
          var x = vm.x;
          var y2 = vm.y;
          var globalDefaults = core_defaults.global;
          var defaultColor2 = globalDefaults.defaultColor;
          if (vm.skip) {
            return;
          }
          if (chartArea === void 0 || helpers$1.canvas._isPointInArea(vm, chartArea)) {
            ctx.strokeStyle = vm.borderColor || defaultColor2;
            ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
            ctx.fillStyle = vm.backgroundColor || defaultColor2;
            helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y2, rotation);
          }
        }
      });
      var defaultColor$2 = core_defaults.global.defaultColor;
      core_defaults._set("global", {
        elements: {
          rectangle: {
            backgroundColor: defaultColor$2,
            borderColor: defaultColor$2,
            borderSkipped: "bottom",
            borderWidth: 0
          }
        }
      });
      function isVertical(vm) {
        return vm && vm.width !== void 0;
      }
      function getBarBounds(vm) {
        var x1, x2, y1, y2, half;
        if (isVertical(vm)) {
          half = vm.width / 2;
          x1 = vm.x - half;
          x2 = vm.x + half;
          y1 = Math.min(vm.y, vm.base);
          y2 = Math.max(vm.y, vm.base);
        } else {
          half = vm.height / 2;
          x1 = Math.min(vm.x, vm.base);
          x2 = Math.max(vm.x, vm.base);
          y1 = vm.y - half;
          y2 = vm.y + half;
        }
        return {
          left: x1,
          top: y1,
          right: x2,
          bottom: y2
        };
      }
      function swap(orig, v1, v2) {
        return orig === v1 ? v2 : orig === v2 ? v1 : orig;
      }
      function parseBorderSkipped(vm) {
        var edge = vm.borderSkipped;
        var res = {};
        if (!edge) {
          return res;
        }
        if (vm.horizontal) {
          if (vm.base > vm.x) {
            edge = swap(edge, "left", "right");
          }
        } else if (vm.base < vm.y) {
          edge = swap(edge, "bottom", "top");
        }
        res[edge] = true;
        return res;
      }
      function parseBorderWidth(vm, maxW, maxH) {
        var value = vm.borderWidth;
        var skip2 = parseBorderSkipped(vm);
        var t2, r2, b2, l2;
        if (helpers$1.isObject(value)) {
          t2 = +value.top || 0;
          r2 = +value.right || 0;
          b2 = +value.bottom || 0;
          l2 = +value.left || 0;
        } else {
          t2 = r2 = b2 = l2 = +value || 0;
        }
        return {
          t: skip2.top || t2 < 0 ? 0 : t2 > maxH ? maxH : t2,
          r: skip2.right || r2 < 0 ? 0 : r2 > maxW ? maxW : r2,
          b: skip2.bottom || b2 < 0 ? 0 : b2 > maxH ? maxH : b2,
          l: skip2.left || l2 < 0 ? 0 : l2 > maxW ? maxW : l2
        };
      }
      function boundingRects(vm) {
        var bounds = getBarBounds(vm);
        var width = bounds.right - bounds.left;
        var height = bounds.bottom - bounds.top;
        var border = parseBorderWidth(vm, width / 2, height / 2);
        return {
          outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height
          },
          inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b
          }
        };
      }
      function inRange(vm, x, y2) {
        var skipX = x === null;
        var skipY = y2 === null;
        var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);
        return bounds && (skipX || x >= bounds.left && x <= bounds.right) && (skipY || y2 >= bounds.top && y2 <= bounds.bottom);
      }
      var element_rectangle = core_element.extend({
        _type: "rectangle",
        draw: function() {
          var ctx = this._chart.ctx;
          var vm = this._view;
          var rects = boundingRects(vm);
          var outer = rects.outer;
          var inner = rects.inner;
          ctx.fillStyle = vm.backgroundColor;
          ctx.fillRect(outer.x, outer.y, outer.w, outer.h);
          if (outer.w === inner.w && outer.h === inner.h) {
            return;
          }
          ctx.save();
          ctx.beginPath();
          ctx.rect(outer.x, outer.y, outer.w, outer.h);
          ctx.clip();
          ctx.fillStyle = vm.borderColor;
          ctx.rect(inner.x, inner.y, inner.w, inner.h);
          ctx.fill("evenodd");
          ctx.restore();
        },
        height: function() {
          var vm = this._view;
          return vm.base - vm.y;
        },
        inRange: function(mouseX, mouseY) {
          return inRange(this._view, mouseX, mouseY);
        },
        inLabelRange: function(mouseX, mouseY) {
          var vm = this._view;
          return isVertical(vm) ? inRange(vm, mouseX, null) : inRange(vm, null, mouseY);
        },
        inXRange: function(mouseX) {
          return inRange(this._view, mouseX, null);
        },
        inYRange: function(mouseY) {
          return inRange(this._view, null, mouseY);
        },
        getCenterPoint: function() {
          var vm = this._view;
          var x, y2;
          if (isVertical(vm)) {
            x = vm.x;
            y2 = (vm.y + vm.base) / 2;
          } else {
            x = (vm.x + vm.base) / 2;
            y2 = vm.y;
          }
          return { x, y: y2 };
        },
        getArea: function() {
          var vm = this._view;
          return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);
        },
        tooltipPosition: function() {
          var vm = this._view;
          return {
            x: vm.x,
            y: vm.y
          };
        }
      });
      var elements = {};
      var Arc = element_arc;
      var Line = element_line;
      var Point = element_point;
      var Rectangle = element_rectangle;
      elements.Arc = Arc;
      elements.Line = Line;
      elements.Point = Point;
      elements.Rectangle = Rectangle;
      var deprecated = helpers$1._deprecated;
      var valueOrDefault$3 = helpers$1.valueOrDefault;
      core_defaults._set("bar", {
        hover: {
          mode: "label"
        },
        scales: {
          xAxes: [{
            type: "category",
            offset: true,
            gridLines: {
              offsetGridLines: true
            }
          }],
          yAxes: [{
            type: "linear"
          }]
        }
      });
      core_defaults._set("global", {
        datasets: {
          bar: {
            categoryPercentage: 0.8,
            barPercentage: 0.9
          }
        }
      });
      function computeMinSampleSize(scale2, pixels) {
        var min = scale2._length;
        var prev, curr, i2, ilen;
        for (i2 = 1, ilen = pixels.length; i2 < ilen; ++i2) {
          min = Math.min(min, Math.abs(pixels[i2] - pixels[i2 - 1]));
        }
        for (i2 = 0, ilen = scale2.getTicks().length; i2 < ilen; ++i2) {
          curr = scale2.getPixelForTick(i2);
          min = i2 > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
          prev = curr;
        }
        return min;
      }
      function computeFitCategoryTraits(index, ruler, options2) {
        var thickness = options2.barThickness;
        var count = ruler.stackCount;
        var curr = ruler.pixels[index];
        var min = helpers$1.isNullOrUndef(thickness) ? computeMinSampleSize(ruler.scale, ruler.pixels) : -1;
        var size, ratio;
        if (helpers$1.isNullOrUndef(thickness)) {
          size = min * options2.categoryPercentage;
          ratio = options2.barPercentage;
        } else {
          size = thickness * count;
          ratio = 1;
        }
        return {
          chunk: size / count,
          ratio,
          start: curr - size / 2
        };
      }
      function computeFlexCategoryTraits(index, ruler, options2) {
        var pixels = ruler.pixels;
        var curr = pixels[index];
        var prev = index > 0 ? pixels[index - 1] : null;
        var next = index < pixels.length - 1 ? pixels[index + 1] : null;
        var percent = options2.categoryPercentage;
        var start, size;
        if (prev === null) {
          prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
        }
        if (next === null) {
          next = curr + curr - prev;
        }
        start = curr - (curr - Math.min(prev, next)) / 2 * percent;
        size = Math.abs(next - prev) / 2 * percent;
        return {
          chunk: size / ruler.stackCount,
          ratio: options2.barPercentage,
          start
        };
      }
      var controller_bar = core_datasetController.extend({
        dataElementType: elements.Rectangle,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderSkipped",
          "borderWidth",
          "barPercentage",
          "barThickness",
          "categoryPercentage",
          "maxBarThickness",
          "minBarLength"
        ],
        initialize: function() {
          var me = this;
          var meta, scaleOpts;
          core_datasetController.prototype.initialize.apply(me, arguments);
          meta = me.getMeta();
          meta.stack = me.getDataset().stack;
          meta.bar = true;
          scaleOpts = me._getIndexScale().options;
          deprecated("bar chart", scaleOpts.barPercentage, "scales.[x/y]Axes.barPercentage", "dataset.barPercentage");
          deprecated("bar chart", scaleOpts.barThickness, "scales.[x/y]Axes.barThickness", "dataset.barThickness");
          deprecated("bar chart", scaleOpts.categoryPercentage, "scales.[x/y]Axes.categoryPercentage", "dataset.categoryPercentage");
          deprecated("bar chart", me._getValueScale().options.minBarLength, "scales.[x/y]Axes.minBarLength", "dataset.minBarLength");
          deprecated("bar chart", scaleOpts.maxBarThickness, "scales.[x/y]Axes.maxBarThickness", "dataset.maxBarThickness");
        },
        update: function(reset) {
          var me = this;
          var rects = me.getMeta().data;
          var i2, ilen;
          me._ruler = me.getRuler();
          for (i2 = 0, ilen = rects.length; i2 < ilen; ++i2) {
            me.updateElement(rects[i2], i2, reset);
          }
        },
        updateElement: function(rectangle, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var dataset = me.getDataset();
          var options2 = me._resolveDataElementOptions(rectangle, index);
          rectangle._xScale = me.getScaleForId(meta.xAxisID);
          rectangle._yScale = me.getScaleForId(meta.yAxisID);
          rectangle._datasetIndex = me.index;
          rectangle._index = index;
          rectangle._model = {
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderSkipped: options2.borderSkipped,
            borderWidth: options2.borderWidth,
            datasetLabel: dataset.label,
            label: me.chart.data.labels[index]
          };
          if (helpers$1.isArray(dataset.data[index])) {
            rectangle._model.borderSkipped = null;
          }
          me._updateElementGeometry(rectangle, index, reset, options2);
          rectangle.pivot();
        },
        /**
         * @private
         */
        _updateElementGeometry: function(rectangle, index, reset, options2) {
          var me = this;
          var model = rectangle._model;
          var vscale = me._getValueScale();
          var base = vscale.getBasePixel();
          var horizontal = vscale.isHorizontal();
          var ruler = me._ruler || me.getRuler();
          var vpixels = me.calculateBarValuePixels(me.index, index, options2);
          var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options2);
          model.horizontal = horizontal;
          model.base = reset ? base : vpixels.base;
          model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
          model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
          model.height = horizontal ? ipixels.size : void 0;
          model.width = horizontal ? void 0 : ipixels.size;
        },
        /**
         * Returns the stacks based on groups and bar visibility.
         * @param {number} [last] - The dataset index
         * @returns {string[]} The list of stack IDs
         * @private
         */
        _getStacks: function(last) {
          var me = this;
          var scale2 = me._getIndexScale();
          var metasets = scale2._getMatchingVisibleMetas(me._type);
          var stacked = scale2.options.stacked;
          var ilen = metasets.length;
          var stacks = [];
          var i2, meta;
          for (i2 = 0; i2 < ilen; ++i2) {
            meta = metasets[i2];
            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
              stacks.push(meta.stack);
            }
            if (meta.index === last) {
              break;
            }
          }
          return stacks;
        },
        /**
         * Returns the effective number of stacks based on groups and bar visibility.
         * @private
         */
        getStackCount: function() {
          return this._getStacks().length;
        },
        /**
         * Returns the stack index for the given dataset based on groups and bar visibility.
         * @param {number} [datasetIndex] - The dataset index
         * @param {string} [name] - The stack name to find
         * @returns {number} The stack index
         * @private
         */
        getStackIndex: function(datasetIndex, name2) {
          var stacks = this._getStacks(datasetIndex);
          var index = name2 !== void 0 ? stacks.indexOf(name2) : -1;
          return index === -1 ? stacks.length - 1 : index;
        },
        /**
         * @private
         */
        getRuler: function() {
          var me = this;
          var scale2 = me._getIndexScale();
          var pixels = [];
          var i2, ilen;
          for (i2 = 0, ilen = me.getMeta().data.length; i2 < ilen; ++i2) {
            pixels.push(scale2.getPixelForValue(null, i2, me.index));
          }
          return {
            pixels,
            start: scale2._startPixel,
            end: scale2._endPixel,
            stackCount: me.getStackCount(),
            scale: scale2
          };
        },
        /**
         * Note: pixel values are not clamped to the scale area.
         * @private
         */
        calculateBarValuePixels: function(datasetIndex, index, options2) {
          var me = this;
          var chart = me.chart;
          var scale2 = me._getValueScale();
          var isHorizontal = scale2.isHorizontal();
          var datasets = chart.data.datasets;
          var metasets = scale2._getMatchingVisibleMetas(me._type);
          var value = scale2._parseValue(datasets[datasetIndex].data[index]);
          var minBarLength = options2.minBarLength;
          var stacked = scale2.options.stacked;
          var stack = me.getMeta().stack;
          var start = value.start === void 0 ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
          var length = value.start === void 0 ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
          var ilen = metasets.length;
          var i2, imeta, ivalue, base, head, size, stackLength;
          if (stacked || stacked === void 0 && stack !== void 0) {
            for (i2 = 0; i2 < ilen; ++i2) {
              imeta = metasets[i2];
              if (imeta.index === datasetIndex) {
                break;
              }
              if (imeta.stack === stack) {
                stackLength = scale2._parseValue(datasets[imeta.index].data[index]);
                ivalue = stackLength.start === void 0 ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;
                if (value.min < 0 && ivalue < 0 || value.max >= 0 && ivalue > 0) {
                  start += ivalue;
                }
              }
            }
          }
          base = scale2.getPixelForValue(start);
          head = scale2.getPixelForValue(start + length);
          size = head - base;
          if (minBarLength !== void 0 && Math.abs(size) < minBarLength) {
            size = minBarLength;
            if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
              head = base - minBarLength;
            } else {
              head = base + minBarLength;
            }
          }
          return {
            size,
            base,
            head,
            center: head + size / 2
          };
        },
        /**
         * @private
         */
        calculateBarIndexPixels: function(datasetIndex, index, ruler, options2) {
          var me = this;
          var range = options2.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options2) : computeFitCategoryTraits(index, ruler, options2);
          var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
          var center = range.start + range.chunk * stackIndex + range.chunk / 2;
          var size = Math.min(
            valueOrDefault$3(options2.maxBarThickness, Infinity),
            range.chunk * range.ratio
          );
          return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
          };
        },
        draw: function() {
          var me = this;
          var chart = me.chart;
          var scale2 = me._getValueScale();
          var rects = me.getMeta().data;
          var dataset = me.getDataset();
          var ilen = rects.length;
          var i2 = 0;
          helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);
          for (; i2 < ilen; ++i2) {
            var val = scale2._parseValue(dataset.data[i2]);
            if (!isNaN(val.min) && !isNaN(val.max)) {
              rects[i2].draw();
            }
          }
          helpers$1.canvas.unclipArea(chart.ctx);
        },
        /**
         * @private
         */
        _resolveDataElementOptions: function() {
          var me = this;
          var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
          var indexOpts = me._getIndexScale().options;
          var valueOpts = me._getValueScale().options;
          values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
          values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
          values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
          values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
          values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);
          return values;
        }
      });
      var valueOrDefault$4 = helpers$1.valueOrDefault;
      var resolve$1 = helpers$1.options.resolve;
      core_defaults._set("bubble", {
        hover: {
          mode: "single"
        },
        scales: {
          xAxes: [{
            type: "linear",
            // bubble should probably use a linear scale by default
            position: "bottom",
            id: "x-axis-0"
            // need an ID so datasets can reference the scale
          }],
          yAxes: [{
            type: "linear",
            position: "left",
            id: "y-axis-0"
          }]
        },
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(item, data) {
              var datasetLabel = data.datasets[item.datasetIndex].label || "";
              var dataPoint = data.datasets[item.datasetIndex].data[item.index];
              return datasetLabel + ": (" + item.xLabel + ", " + item.yLabel + ", " + dataPoint.r + ")";
            }
          }
        }
      });
      var controller_bubble = core_datasetController.extend({
        /**
         * @protected
         */
        dataElementType: elements.Point,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "hoverBackgroundColor",
          "hoverBorderColor",
          "hoverBorderWidth",
          "hoverRadius",
          "hitRadius",
          "pointStyle",
          "rotation"
        ],
        /**
         * @protected
         */
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var points = meta.data;
          helpers$1.each(points, function(point, index) {
            me.updateElement(point, index, reset);
          });
        },
        /**
         * @protected
         */
        updateElement: function(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var xScale = me.getScaleForId(meta.xAxisID);
          var yScale = me.getScaleForId(meta.yAxisID);
          var options2 = me._resolveDataElementOptions(point, index);
          var data = me.getDataset().data[index];
          var dsIndex = me.index;
          var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === "object" ? data : NaN, index, dsIndex);
          var y2 = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
          point._xScale = xScale;
          point._yScale = yScale;
          point._options = options2;
          point._datasetIndex = dsIndex;
          point._index = index;
          point._model = {
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderWidth: options2.borderWidth,
            hitRadius: options2.hitRadius,
            pointStyle: options2.pointStyle,
            rotation: options2.rotation,
            radius: reset ? 0 : options2.radius,
            skip: custom.skip || isNaN(x) || isNaN(y2),
            x,
            y: y2
          };
          point.pivot();
        },
        /**
         * @protected
         */
        setHoverStyle: function(point) {
          var model = point._model;
          var options2 = point._options;
          var getHoverColor = helpers$1.getHoverColor;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = valueOrDefault$4(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$4(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$4(options2.hoverBorderWidth, options2.borderWidth);
          model.radius = options2.radius + options2.hoverRadius;
        },
        /**
         * @private
         */
        _resolveDataElementOptions: function(point, index) {
          var me = this;
          var chart = me.chart;
          var dataset = me.getDataset();
          var custom = point.custom || {};
          var data = dataset.data[index] || {};
          var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);
          var context = {
            chart,
            dataIndex: index,
            dataset,
            datasetIndex: me.index
          };
          if (me._cachedDataOpts === values) {
            values = helpers$1.extend({}, values);
          }
          values.radius = resolve$1([
            custom.radius,
            data.r,
            me._config.radius,
            chart.options.elements.point.radius
          ], context, index);
          return values;
        }
      });
      var valueOrDefault$5 = helpers$1.valueOrDefault;
      var PI$1 = Math.PI;
      var DOUBLE_PI$1 = PI$1 * 2;
      var HALF_PI$1 = PI$1 / 2;
      core_defaults._set("doughnut", {
        animation: {
          // Boolean - Whether we animate the rotation of the Doughnut
          animateRotate: true,
          // Boolean - Whether we animate scaling the Doughnut from the centre
          animateScale: false
        },
        hover: {
          mode: "single"
        },
        legendCallback: function(chart) {
          var list = document.createElement("ul");
          var data = chart.data;
          var datasets = data.datasets;
          var labels = data.labels;
          var i2, ilen, listItem, listItemSpan;
          list.setAttribute("class", chart.id + "-legend");
          if (datasets.length) {
            for (i2 = 0, ilen = datasets[0].data.length; i2 < ilen; ++i2) {
              listItem = list.appendChild(document.createElement("li"));
              listItemSpan = listItem.appendChild(document.createElement("span"));
              listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i2];
              if (labels[i2]) {
                listItem.appendChild(document.createTextNode(labels[i2]));
              }
            }
          }
          return list.outerHTML;
        },
        legend: {
          labels: {
            generateLabels: function(chart) {
              var data = chart.data;
              if (data.labels.length && data.datasets.length) {
                return data.labels.map(function(label, i2) {
                  var meta = chart.getDatasetMeta(0);
                  var style = meta.controller.getStyle(i2);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    hidden: isNaN(data.datasets[0].data[i2]) || meta.data[i2].hidden,
                    // Extra data used for toggling the correct item
                    index: i2
                  };
                });
              }
              return [];
            }
          },
          onClick: function(e2, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i2, ilen, meta;
            for (i2 = 0, ilen = (chart.data.datasets || []).length; i2 < ilen; ++i2) {
              meta = chart.getDatasetMeta(i2);
              if (meta.data[index]) {
                meta.data[index].hidden = !meta.data[index].hidden;
              }
            }
            chart.update();
          }
        },
        // The percentage of the chart that we cut out of the middle.
        cutoutPercentage: 50,
        // The rotation of the chart, where the first data arc begins.
        rotation: -HALF_PI$1,
        // The total circumference of the chart.
        circumference: DOUBLE_PI$1,
        // Need to override these to give a nice default
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(tooltipItem, data) {
              var dataLabel = data.labels[tooltipItem.index];
              var value = ": " + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
              if (helpers$1.isArray(dataLabel)) {
                dataLabel = dataLabel.slice();
                dataLabel[0] += value;
              } else {
                dataLabel += value;
              }
              return dataLabel;
            }
          }
        }
      });
      var controller_doughnut = core_datasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers$1.noop,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "borderAlign",
          "hoverBackgroundColor",
          "hoverBorderColor",
          "hoverBorderWidth"
        ],
        // Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
        getRingIndex: function(datasetIndex) {
          var ringIndex = 0;
          for (var j2 = 0; j2 < datasetIndex; ++j2) {
            if (this.chart.isDatasetVisible(j2)) {
              ++ringIndex;
            }
          }
          return ringIndex;
        },
        update: function(reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var ratioX = 1;
          var ratioY = 1;
          var offsetX = 0;
          var offsetY = 0;
          var meta = me.getMeta();
          var arcs = meta.data;
          var cutout = opts.cutoutPercentage / 100 || 0;
          var circumference = opts.circumference;
          var chartWeight = me._getRingWeight(me.index);
          var maxWidth, maxHeight, i2, ilen;
          if (circumference < DOUBLE_PI$1) {
            var startAngle = opts.rotation % DOUBLE_PI$1;
            startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
            var endAngle = startAngle + circumference;
            var startX = Math.cos(startAngle);
            var startY = Math.sin(startAngle);
            var endX = Math.cos(endAngle);
            var endY = Math.sin(endAngle);
            var contains0 = startAngle <= 0 && endAngle >= 0 || endAngle >= DOUBLE_PI$1;
            var contains90 = startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1 || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
            var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
            var contains270 = startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1 || endAngle >= PI$1 + HALF_PI$1;
            var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
            var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
            var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
            var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
            ratioX = (maxX - minX) / 2;
            ratioY = (maxY - minY) / 2;
            offsetX = -(maxX + minX) / 2;
            offsetY = -(maxY + minY) / 2;
          }
          for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
            arcs[i2]._options = me._resolveDataElementOptions(arcs[i2], i2);
          }
          chart.borderWidth = me.getMaxBorderWidth();
          maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
          maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
          chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
          chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
          chart.offsetX = offsetX * chart.outerRadius;
          chart.offsetY = offsetY * chart.outerRadius;
          meta.total = me.calculateTotal();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
          me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);
          for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
            me.updateElement(arcs[i2], i2, reset);
          }
        },
        updateElement: function(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var animationOpts = opts.animation;
          var centerX = (chartArea.left + chartArea.right) / 2;
          var centerY = (chartArea.top + chartArea.bottom) / 2;
          var startAngle = opts.rotation;
          var endAngle = opts.rotation;
          var dataset = me.getDataset();
          var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
          var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
          var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
          var options2 = arc._options || {};
          helpers$1.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            // Desired view properties
            _model: {
              backgroundColor: options2.backgroundColor,
              borderColor: options2.borderColor,
              borderWidth: options2.borderWidth,
              borderAlign: options2.borderAlign,
              x: centerX + chart.offsetX,
              y: centerY + chart.offsetY,
              startAngle,
              endAngle,
              circumference,
              outerRadius,
              innerRadius,
              label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
            }
          });
          var model = arc._model;
          if (!reset || !animationOpts.animateRotate) {
            if (index === 0) {
              model.startAngle = opts.rotation;
            } else {
              model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
            }
            model.endAngle = model.startAngle + model.circumference;
          }
          arc.pivot();
        },
        calculateTotal: function() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var total = 0;
          var value;
          helpers$1.each(meta.data, function(element, index) {
            value = dataset.data[index];
            if (!isNaN(value) && !element.hidden) {
              total += Math.abs(value);
            }
          });
          return total;
        },
        calculateCircumference: function(value) {
          var total = this.getMeta().total;
          if (total > 0 && !isNaN(value)) {
            return DOUBLE_PI$1 * (Math.abs(value) / total);
          }
          return 0;
        },
        // gets the max border or hover width to properly scale pie charts
        getMaxBorderWidth: function(arcs) {
          var me = this;
          var max = 0;
          var chart = me.chart;
          var i2, ilen, meta, arc, controller, options2, borderWidth, hoverWidth;
          if (!arcs) {
            for (i2 = 0, ilen = chart.data.datasets.length; i2 < ilen; ++i2) {
              if (chart.isDatasetVisible(i2)) {
                meta = chart.getDatasetMeta(i2);
                arcs = meta.data;
                if (i2 !== me.index) {
                  controller = meta.controller;
                }
                break;
              }
            }
          }
          if (!arcs) {
            return 0;
          }
          for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
            arc = arcs[i2];
            if (controller) {
              controller._configure();
              options2 = controller._resolveDataElementOptions(arc, i2);
            } else {
              options2 = arc._options;
            }
            if (options2.borderAlign !== "inner") {
              borderWidth = options2.borderWidth;
              hoverWidth = options2.hoverBorderWidth;
              max = borderWidth > max ? borderWidth : max;
              max = hoverWidth > max ? hoverWidth : max;
            }
          }
          return max;
        },
        /**
         * @protected
         */
        setHoverStyle: function(arc) {
          var model = arc._model;
          var options2 = arc._options;
          var getHoverColor = helpers$1.getHoverColor;
          arc.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = valueOrDefault$5(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$5(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$5(options2.hoverBorderWidth, options2.borderWidth);
        },
        /**
         * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
         * @private
         */
        _getRingWeightOffset: function(datasetIndex) {
          var ringWeightOffset = 0;
          for (var i2 = 0; i2 < datasetIndex; ++i2) {
            if (this.chart.isDatasetVisible(i2)) {
              ringWeightOffset += this._getRingWeight(i2);
            }
          }
          return ringWeightOffset;
        },
        /**
         * @private
         */
        _getRingWeight: function(dataSetIndex) {
          return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
        },
        /**
         * Returns the sum of all visibile data set weights.  This value can be 0.
         * @private
         */
        _getVisibleDatasetWeightTotal: function() {
          return this._getRingWeightOffset(this.chart.data.datasets.length);
        }
      });
      core_defaults._set("horizontalBar", {
        hover: {
          mode: "index",
          axis: "y"
        },
        scales: {
          xAxes: [{
            type: "linear",
            position: "bottom"
          }],
          yAxes: [{
            type: "category",
            position: "left",
            offset: true,
            gridLines: {
              offsetGridLines: true
            }
          }]
        },
        elements: {
          rectangle: {
            borderSkipped: "left"
          }
        },
        tooltips: {
          mode: "index",
          axis: "y"
        }
      });
      core_defaults._set("global", {
        datasets: {
          horizontalBar: {
            categoryPercentage: 0.8,
            barPercentage: 0.9
          }
        }
      });
      var controller_horizontalBar = controller_bar.extend({
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.getMeta().xAxisID;
        },
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.getMeta().yAxisID;
        }
      });
      var valueOrDefault$6 = helpers$1.valueOrDefault;
      var resolve$2 = helpers$1.options.resolve;
      var isPointInArea = helpers$1.canvas._isPointInArea;
      core_defaults._set("line", {
        showLines: true,
        spanGaps: false,
        hover: {
          mode: "label"
        },
        scales: {
          xAxes: [{
            type: "category",
            id: "x-axis-0"
          }],
          yAxes: [{
            type: "linear",
            id: "y-axis-0"
          }]
        }
      });
      function scaleClip(scale2, halfBorderWidth) {
        var tickOpts = scale2 && scale2.options.ticks || {};
        var reverse = tickOpts.reverse;
        var min = tickOpts.min === void 0 ? halfBorderWidth : 0;
        var max = tickOpts.max === void 0 ? halfBorderWidth : 0;
        return {
          start: reverse ? max : min,
          end: reverse ? min : max
        };
      }
      function defaultClip(xScale, yScale, borderWidth) {
        var halfBorderWidth = borderWidth / 2;
        var x = scaleClip(xScale, halfBorderWidth);
        var y2 = scaleClip(yScale, halfBorderWidth);
        return {
          top: y2.end,
          right: x.end,
          bottom: y2.start,
          left: x.start
        };
      }
      function toClip(value) {
        var t2, r2, b2, l2;
        if (helpers$1.isObject(value)) {
          t2 = value.top;
          r2 = value.right;
          b2 = value.bottom;
          l2 = value.left;
        } else {
          t2 = r2 = b2 = l2 = value;
        }
        return {
          top: t2,
          right: r2,
          bottom: b2,
          left: l2
        };
      }
      var controller_line = core_datasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        /**
         * @private
         */
        _datasetElementOptions: [
          "backgroundColor",
          "borderCapStyle",
          "borderColor",
          "borderDash",
          "borderDashOffset",
          "borderJoinStyle",
          "borderWidth",
          "cubicInterpolationMode",
          "fill"
        ],
        /**
         * @private
         */
        _dataElementOptions: {
          backgroundColor: "pointBackgroundColor",
          borderColor: "pointBorderColor",
          borderWidth: "pointBorderWidth",
          hitRadius: "pointHitRadius",
          hoverBackgroundColor: "pointHoverBackgroundColor",
          hoverBorderColor: "pointHoverBorderColor",
          hoverBorderWidth: "pointHoverBorderWidth",
          hoverRadius: "pointHoverRadius",
          pointStyle: "pointStyle",
          radius: "pointRadius",
          rotation: "pointRotation"
        },
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data || [];
          var options2 = me.chart.options;
          var config = me._config;
          var showLine = me._showLine = valueOrDefault$6(config.showLine, options2.showLines);
          var i2, ilen;
          me._xScale = me.getScaleForId(meta.xAxisID);
          me._yScale = me.getScaleForId(meta.yAxisID);
          if (showLine) {
            if (config.tension !== void 0 && config.lineTension === void 0) {
              config.lineTension = config.tension;
            }
            line._scale = me._yScale;
            line._datasetIndex = me.index;
            line._children = points;
            line._model = me._resolveDatasetElementOptions(line);
            line.pivot();
          }
          for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
            me.updateElement(points[i2], i2, reset);
          }
          if (showLine && line._model.tension !== 0) {
            me.updateBezierControlPoints();
          }
          for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
            points[i2].pivot();
          }
        },
        updateElement: function(point, index, reset) {
          var me = this;
          var meta = me.getMeta();
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var datasetIndex = me.index;
          var value = dataset.data[index];
          var xScale = me._xScale;
          var yScale = me._yScale;
          var lineModel = meta.dataset._model;
          var x, y2;
          var options2 = me._resolveDataElementOptions(point, index);
          x = xScale.getPixelForValue(typeof value === "object" ? value : NaN, index, datasetIndex);
          y2 = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
          point._xScale = xScale;
          point._yScale = yScale;
          point._options = options2;
          point._datasetIndex = datasetIndex;
          point._index = index;
          point._model = {
            x,
            y: y2,
            skip: custom.skip || isNaN(x) || isNaN(y2),
            // Appearance
            radius: options2.radius,
            pointStyle: options2.pointStyle,
            rotation: options2.rotation,
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderWidth: options2.borderWidth,
            tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
            steppedLine: lineModel ? lineModel.steppedLine : false,
            // Tooltip
            hitRadius: options2.hitRadius
          };
        },
        /**
         * @private
         */
        _resolveDatasetElementOptions: function(element) {
          var me = this;
          var config = me._config;
          var custom = element.custom || {};
          var options2 = me.chart.options;
          var lineOptions = options2.elements.line;
          var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
          values.spanGaps = valueOrDefault$6(config.spanGaps, options2.spanGaps);
          values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
          values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
          values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));
          return values;
        },
        calculatePointY: function(value, index, datasetIndex) {
          var me = this;
          var chart = me.chart;
          var yScale = me._yScale;
          var sumPos = 0;
          var sumNeg = 0;
          var i2, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;
          if (yScale.options.stacked) {
            rightValue = +yScale.getRightValue(value);
            metasets = chart._getSortedVisibleDatasetMetas();
            ilen = metasets.length;
            for (i2 = 0; i2 < ilen; ++i2) {
              dsMeta = metasets[i2];
              if (dsMeta.index === datasetIndex) {
                break;
              }
              ds = chart.data.datasets[dsMeta.index];
              if (dsMeta.type === "line" && dsMeta.yAxisID === yScale.id) {
                stackedRightValue = +yScale.getRightValue(ds.data[index]);
                if (stackedRightValue < 0) {
                  sumNeg += stackedRightValue || 0;
                } else {
                  sumPos += stackedRightValue || 0;
                }
              }
            }
            if (rightValue < 0) {
              return yScale.getPixelForValue(sumNeg + rightValue);
            }
            return yScale.getPixelForValue(sumPos + rightValue);
          }
          return yScale.getPixelForValue(value);
        },
        updateBezierControlPoints: function() {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var lineModel = meta.dataset._model;
          var area = chart.chartArea;
          var points = meta.data || [];
          var i2, ilen, model, controlPoints;
          if (lineModel.spanGaps) {
            points = points.filter(function(pt) {
              return !pt._model.skip;
            });
          }
          function capControlPoint(pt, min, max) {
            return Math.max(Math.min(pt, max), min);
          }
          if (lineModel.cubicInterpolationMode === "monotone") {
            helpers$1.splineCurveMonotone(points);
          } else {
            for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
              model = points[i2]._model;
              controlPoints = helpers$1.splineCurve(
                helpers$1.previousItem(points, i2)._model,
                model,
                helpers$1.nextItem(points, i2)._model,
                lineModel.tension
              );
              model.controlPointPreviousX = controlPoints.previous.x;
              model.controlPointPreviousY = controlPoints.previous.y;
              model.controlPointNextX = controlPoints.next.x;
              model.controlPointNextY = controlPoints.next.y;
            }
          }
          if (chart.options.elements.line.capBezierPoints) {
            for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
              model = points[i2]._model;
              if (isPointInArea(model, area)) {
                if (i2 > 0 && isPointInArea(points[i2 - 1]._model, area)) {
                  model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                  model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                }
                if (i2 < points.length - 1 && isPointInArea(points[i2 + 1]._model, area)) {
                  model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                  model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                }
              }
            }
          }
        },
        draw: function() {
          var me = this;
          var chart = me.chart;
          var meta = me.getMeta();
          var points = meta.data || [];
          var area = chart.chartArea;
          var canvas2 = chart.canvas;
          var i2 = 0;
          var ilen = points.length;
          var clip;
          if (me._showLine) {
            clip = meta.dataset._model.clip;
            helpers$1.canvas.clipArea(chart.ctx, {
              left: clip.left === false ? 0 : area.left - clip.left,
              right: clip.right === false ? canvas2.width : area.right + clip.right,
              top: clip.top === false ? 0 : area.top - clip.top,
              bottom: clip.bottom === false ? canvas2.height : area.bottom + clip.bottom
            });
            meta.dataset.draw();
            helpers$1.canvas.unclipArea(chart.ctx);
          }
          for (; i2 < ilen; ++i2) {
            points[i2].draw(area);
          }
        },
        /**
         * @protected
         */
        setHoverStyle: function(point) {
          var model = point._model;
          var options2 = point._options;
          var getHoverColor = helpers$1.getHoverColor;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = valueOrDefault$6(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$6(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$6(options2.hoverBorderWidth, options2.borderWidth);
          model.radius = valueOrDefault$6(options2.hoverRadius, options2.radius);
        }
      });
      var resolve$3 = helpers$1.options.resolve;
      core_defaults._set("polarArea", {
        scale: {
          type: "radialLinear",
          angleLines: {
            display: false
          },
          gridLines: {
            circular: true
          },
          pointLabels: {
            display: false
          },
          ticks: {
            beginAtZero: true
          }
        },
        // Boolean - Whether to animate the rotation of the chart
        animation: {
          animateRotate: true,
          animateScale: true
        },
        startAngle: -0.5 * Math.PI,
        legendCallback: function(chart) {
          var list = document.createElement("ul");
          var data = chart.data;
          var datasets = data.datasets;
          var labels = data.labels;
          var i2, ilen, listItem, listItemSpan;
          list.setAttribute("class", chart.id + "-legend");
          if (datasets.length) {
            for (i2 = 0, ilen = datasets[0].data.length; i2 < ilen; ++i2) {
              listItem = list.appendChild(document.createElement("li"));
              listItemSpan = listItem.appendChild(document.createElement("span"));
              listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i2];
              if (labels[i2]) {
                listItem.appendChild(document.createTextNode(labels[i2]));
              }
            }
          }
          return list.outerHTML;
        },
        legend: {
          labels: {
            generateLabels: function(chart) {
              var data = chart.data;
              if (data.labels.length && data.datasets.length) {
                return data.labels.map(function(label, i2) {
                  var meta = chart.getDatasetMeta(0);
                  var style = meta.controller.getStyle(i2);
                  return {
                    text: label,
                    fillStyle: style.backgroundColor,
                    strokeStyle: style.borderColor,
                    lineWidth: style.borderWidth,
                    hidden: isNaN(data.datasets[0].data[i2]) || meta.data[i2].hidden,
                    // Extra data used for toggling the correct item
                    index: i2
                  };
                });
              }
              return [];
            }
          },
          onClick: function(e2, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i2, ilen, meta;
            for (i2 = 0, ilen = (chart.data.datasets || []).length; i2 < ilen; ++i2) {
              meta = chart.getDatasetMeta(i2);
              meta.data[index].hidden = !meta.data[index].hidden;
            }
            chart.update();
          }
        },
        // Need to override these to give a nice default
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(item, data) {
              return data.labels[item.index] + ": " + item.yLabel;
            }
          }
        }
      });
      var controller_polarArea = core_datasetController.extend({
        dataElementType: elements.Arc,
        linkScales: helpers$1.noop,
        /**
         * @private
         */
        _dataElementOptions: [
          "backgroundColor",
          "borderColor",
          "borderWidth",
          "borderAlign",
          "hoverBackgroundColor",
          "hoverBorderColor",
          "hoverBorderWidth"
        ],
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.chart.scale.id;
        },
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.chart.scale.id;
        },
        update: function(reset) {
          var me = this;
          var dataset = me.getDataset();
          var meta = me.getMeta();
          var start = me.chart.options.startAngle || 0;
          var starts = me._starts = [];
          var angles = me._angles = [];
          var arcs = meta.data;
          var i2, ilen, angle;
          me._updateRadius();
          meta.count = me.countVisibleElements();
          for (i2 = 0, ilen = dataset.data.length; i2 < ilen; i2++) {
            starts[i2] = start;
            angle = me._computeAngle(i2);
            angles[i2] = angle;
            start += angle;
          }
          for (i2 = 0, ilen = arcs.length; i2 < ilen; ++i2) {
            arcs[i2]._options = me._resolveDataElementOptions(arcs[i2], i2);
            me.updateElement(arcs[i2], i2, reset);
          }
        },
        /**
         * @private
         */
        _updateRadius: function() {
          var me = this;
          var chart = me.chart;
          var chartArea = chart.chartArea;
          var opts = chart.options;
          var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
          chart.outerRadius = Math.max(minSize / 2, 0);
          chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
          chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
          me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
          me.innerRadius = me.outerRadius - chart.radiusLength;
        },
        updateElement: function(arc, index, reset) {
          var me = this;
          var chart = me.chart;
          var dataset = me.getDataset();
          var opts = chart.options;
          var animationOpts = opts.animation;
          var scale2 = chart.scale;
          var labels = chart.data.labels;
          var centerX = scale2.xCenter;
          var centerY = scale2.yCenter;
          var datasetStartAngle = opts.startAngle;
          var distance = arc.hidden ? 0 : scale2.getDistanceFromCenterForValue(dataset.data[index]);
          var startAngle = me._starts[index];
          var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);
          var resetRadius = animationOpts.animateScale ? 0 : scale2.getDistanceFromCenterForValue(dataset.data[index]);
          var options2 = arc._options || {};
          helpers$1.extend(arc, {
            // Utility
            _datasetIndex: me.index,
            _index: index,
            _scale: scale2,
            // Desired view properties
            _model: {
              backgroundColor: options2.backgroundColor,
              borderColor: options2.borderColor,
              borderWidth: options2.borderWidth,
              borderAlign: options2.borderAlign,
              x: centerX,
              y: centerY,
              innerRadius: 0,
              outerRadius: reset ? resetRadius : distance,
              startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
              endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
              label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
            }
          });
          arc.pivot();
        },
        countVisibleElements: function() {
          var dataset = this.getDataset();
          var meta = this.getMeta();
          var count = 0;
          helpers$1.each(meta.data, function(element, index) {
            if (!isNaN(dataset.data[index]) && !element.hidden) {
              count++;
            }
          });
          return count;
        },
        /**
         * @protected
         */
        setHoverStyle: function(arc) {
          var model = arc._model;
          var options2 = arc._options;
          var getHoverColor = helpers$1.getHoverColor;
          var valueOrDefault2 = helpers$1.valueOrDefault;
          arc.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth
          };
          model.backgroundColor = valueOrDefault2(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault2(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault2(options2.hoverBorderWidth, options2.borderWidth);
        },
        /**
         * @private
         */
        _computeAngle: function(index) {
          var me = this;
          var count = this.getMeta().count;
          var dataset = me.getDataset();
          var meta = me.getMeta();
          if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
            return 0;
          }
          var context = {
            chart: me.chart,
            dataIndex: index,
            dataset,
            datasetIndex: me.index
          };
          return resolve$3([
            me.chart.options.elements.arc.angle,
            2 * Math.PI / count
          ], context, index);
        }
      });
      core_defaults._set("pie", helpers$1.clone(core_defaults.doughnut));
      core_defaults._set("pie", {
        cutoutPercentage: 0
      });
      var controller_pie = controller_doughnut;
      var valueOrDefault$7 = helpers$1.valueOrDefault;
      core_defaults._set("radar", {
        spanGaps: false,
        scale: {
          type: "radialLinear"
        },
        elements: {
          line: {
            fill: "start",
            tension: 0
            // no bezier in radar
          }
        }
      });
      var controller_radar = core_datasetController.extend({
        datasetElementType: elements.Line,
        dataElementType: elements.Point,
        linkScales: helpers$1.noop,
        /**
         * @private
         */
        _datasetElementOptions: [
          "backgroundColor",
          "borderWidth",
          "borderColor",
          "borderCapStyle",
          "borderDash",
          "borderDashOffset",
          "borderJoinStyle",
          "fill"
        ],
        /**
         * @private
         */
        _dataElementOptions: {
          backgroundColor: "pointBackgroundColor",
          borderColor: "pointBorderColor",
          borderWidth: "pointBorderWidth",
          hitRadius: "pointHitRadius",
          hoverBackgroundColor: "pointHoverBackgroundColor",
          hoverBorderColor: "pointHoverBorderColor",
          hoverBorderWidth: "pointHoverBorderWidth",
          hoverRadius: "pointHoverRadius",
          pointStyle: "pointStyle",
          radius: "pointRadius",
          rotation: "pointRotation"
        },
        /**
         * @private
         */
        _getIndexScaleId: function() {
          return this.chart.scale.id;
        },
        /**
         * @private
         */
        _getValueScaleId: function() {
          return this.chart.scale.id;
        },
        update: function(reset) {
          var me = this;
          var meta = me.getMeta();
          var line = meta.dataset;
          var points = meta.data || [];
          var scale2 = me.chart.scale;
          var config = me._config;
          var i2, ilen;
          if (config.tension !== void 0 && config.lineTension === void 0) {
            config.lineTension = config.tension;
          }
          line._scale = scale2;
          line._datasetIndex = me.index;
          line._children = points;
          line._loop = true;
          line._model = me._resolveDatasetElementOptions(line);
          line.pivot();
          for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
            me.updateElement(points[i2], i2, reset);
          }
          me.updateBezierControlPoints();
          for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
            points[i2].pivot();
          }
        },
        updateElement: function(point, index, reset) {
          var me = this;
          var custom = point.custom || {};
          var dataset = me.getDataset();
          var scale2 = me.chart.scale;
          var pointPosition = scale2.getPointPositionForValue(index, dataset.data[index]);
          var options2 = me._resolveDataElementOptions(point, index);
          var lineModel = me.getMeta().dataset._model;
          var x = reset ? scale2.xCenter : pointPosition.x;
          var y2 = reset ? scale2.yCenter : pointPosition.y;
          point._scale = scale2;
          point._options = options2;
          point._datasetIndex = me.index;
          point._index = index;
          point._model = {
            x,
            // value not used in dataset scale, but we want a consistent API between scales
            y: y2,
            skip: custom.skip || isNaN(x) || isNaN(y2),
            // Appearance
            radius: options2.radius,
            pointStyle: options2.pointStyle,
            rotation: options2.rotation,
            backgroundColor: options2.backgroundColor,
            borderColor: options2.borderColor,
            borderWidth: options2.borderWidth,
            tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),
            // Tooltip
            hitRadius: options2.hitRadius
          };
        },
        /**
         * @private
         */
        _resolveDatasetElementOptions: function() {
          var me = this;
          var config = me._config;
          var options2 = me.chart.options;
          var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
          values.spanGaps = valueOrDefault$7(config.spanGaps, options2.spanGaps);
          values.tension = valueOrDefault$7(config.lineTension, options2.elements.line.tension);
          return values;
        },
        updateBezierControlPoints: function() {
          var me = this;
          var meta = me.getMeta();
          var area = me.chart.chartArea;
          var points = meta.data || [];
          var i2, ilen, model, controlPoints;
          if (meta.dataset._model.spanGaps) {
            points = points.filter(function(pt) {
              return !pt._model.skip;
            });
          }
          function capControlPoint(pt, min, max) {
            return Math.max(Math.min(pt, max), min);
          }
          for (i2 = 0, ilen = points.length; i2 < ilen; ++i2) {
            model = points[i2]._model;
            controlPoints = helpers$1.splineCurve(
              helpers$1.previousItem(points, i2, true)._model,
              model,
              helpers$1.nextItem(points, i2, true)._model,
              model.tension
            );
            model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
            model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
            model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
            model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
          }
        },
        setHoverStyle: function(point) {
          var model = point._model;
          var options2 = point._options;
          var getHoverColor = helpers$1.getHoverColor;
          point.$previousStyle = {
            backgroundColor: model.backgroundColor,
            borderColor: model.borderColor,
            borderWidth: model.borderWidth,
            radius: model.radius
          };
          model.backgroundColor = valueOrDefault$7(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
          model.borderColor = valueOrDefault$7(options2.hoverBorderColor, getHoverColor(options2.borderColor));
          model.borderWidth = valueOrDefault$7(options2.hoverBorderWidth, options2.borderWidth);
          model.radius = valueOrDefault$7(options2.hoverRadius, options2.radius);
        }
      });
      core_defaults._set("scatter", {
        hover: {
          mode: "single"
        },
        scales: {
          xAxes: [{
            id: "x-axis-1",
            // need an ID so datasets can reference the scale
            type: "linear",
            // scatter should not use a category axis
            position: "bottom"
          }],
          yAxes: [{
            id: "y-axis-1",
            type: "linear",
            position: "left"
          }]
        },
        tooltips: {
          callbacks: {
            title: function() {
              return "";
            },
            label: function(item) {
              return "(" + item.xLabel + ", " + item.yLabel + ")";
            }
          }
        }
      });
      core_defaults._set("global", {
        datasets: {
          scatter: {
            showLine: false
          }
        }
      });
      var controller_scatter = controller_line;
      var controllers = {
        bar: controller_bar,
        bubble: controller_bubble,
        doughnut: controller_doughnut,
        horizontalBar: controller_horizontalBar,
        line: controller_line,
        polarArea: controller_polarArea,
        pie: controller_pie,
        radar: controller_radar,
        scatter: controller_scatter
      };
      function getRelativePosition(e2, chart) {
        if (e2.native) {
          return {
            x: e2.x,
            y: e2.y
          };
        }
        return helpers$1.getRelativePosition(e2, chart);
      }
      function parseVisibleItems(chart, handler) {
        var metasets = chart._getSortedVisibleDatasetMetas();
        var metadata, i2, j2, ilen, jlen, element;
        for (i2 = 0, ilen = metasets.length; i2 < ilen; ++i2) {
          metadata = metasets[i2].data;
          for (j2 = 0, jlen = metadata.length; j2 < jlen; ++j2) {
            element = metadata[j2];
            if (!element._view.skip) {
              handler(element);
            }
          }
        }
      }
      function getIntersectItems(chart, position) {
        var elements2 = [];
        parseVisibleItems(chart, function(element) {
          if (element.inRange(position.x, position.y)) {
            elements2.push(element);
          }
        });
        return elements2;
      }
      function getNearestItems(chart, position, intersect, distanceMetric) {
        var minDistance = Number.POSITIVE_INFINITY;
        var nearestItems = [];
        parseVisibleItems(chart, function(element) {
          if (intersect && !element.inRange(position.x, position.y)) {
            return;
          }
          var center = element.getCenterPoint();
          var distance = distanceMetric(position, center);
          if (distance < minDistance) {
            nearestItems = [element];
            minDistance = distance;
          } else if (distance === minDistance) {
            nearestItems.push(element);
          }
        });
        return nearestItems;
      }
      function getDistanceMetricForAxis(axis) {
        var useX = axis.indexOf("x") !== -1;
        var useY = axis.indexOf("y") !== -1;
        return function(pt1, pt2) {
          var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
          var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
          return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
        };
      }
      function indexMode(chart, e2, options2) {
        var position = getRelativePosition(e2, chart);
        options2.axis = options2.axis || "x";
        var distanceMetric = getDistanceMetricForAxis(options2.axis);
        var items = options2.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
        var elements2 = [];
        if (!items.length) {
          return [];
        }
        chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
          var element = meta.data[items[0]._index];
          if (element && !element._view.skip) {
            elements2.push(element);
          }
        });
        return elements2;
      }
      var core_interaction = {
        // Helper function for different modes
        modes: {
          single: function(chart, e2) {
            var position = getRelativePosition(e2, chart);
            var elements2 = [];
            parseVisibleItems(chart, function(element) {
              if (element.inRange(position.x, position.y)) {
                elements2.push(element);
                return elements2;
              }
            });
            return elements2.slice(0, 1);
          },
          /**
           * @function Chart.Interaction.modes.label
           * @deprecated since version 2.4.0
           * @todo remove at version 3
           * @private
           */
          label: indexMode,
          /**
           * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
           * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
           * @function Chart.Interaction.modes.index
           * @since v2.4.0
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use during interaction
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          index: indexMode,
          /**
           * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
           * If the options.intersect is false, we find the nearest item and return the items in that dataset
           * @function Chart.Interaction.modes.dataset
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use during interaction
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          dataset: function(chart, e2, options2) {
            var position = getRelativePosition(e2, chart);
            options2.axis = options2.axis || "xy";
            var distanceMetric = getDistanceMetricForAxis(options2.axis);
            var items = options2.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
            if (items.length > 0) {
              items = chart.getDatasetMeta(items[0]._datasetIndex).data;
            }
            return items;
          },
          /**
           * @function Chart.Interaction.modes.x-axis
           * @deprecated since version 2.4.0. Use index mode and intersect == true
           * @todo remove at version 3
           * @private
           */
          "x-axis": function(chart, e2) {
            return indexMode(chart, e2, { intersect: false });
          },
          /**
           * Point mode returns all elements that hit test based on the event position
           * of the event
           * @function Chart.Interaction.modes.intersect
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          point: function(chart, e2) {
            var position = getRelativePosition(e2, chart);
            return getIntersectItems(chart, position);
          },
          /**
           * nearest mode returns the element closest to the point
           * @function Chart.Interaction.modes.intersect
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          nearest: function(chart, e2, options2) {
            var position = getRelativePosition(e2, chart);
            options2.axis = options2.axis || "xy";
            var distanceMetric = getDistanceMetricForAxis(options2.axis);
            return getNearestItems(chart, position, options2.intersect, distanceMetric);
          },
          /**
           * x mode returns the elements that hit-test at the current x coordinate
           * @function Chart.Interaction.modes.x
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          x: function(chart, e2, options2) {
            var position = getRelativePosition(e2, chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function(element) {
              if (element.inXRange(position.x)) {
                items.push(element);
              }
              if (element.inRange(position.x, position.y)) {
                intersectsItem = true;
              }
            });
            if (options2.intersect && !intersectsItem) {
              items = [];
            }
            return items;
          },
          /**
           * y mode returns the elements that hit-test at the current y coordinate
           * @function Chart.Interaction.modes.y
           * @param {Chart} chart - the chart we are returning items from
           * @param {Event} e - the event we are find things at
           * @param {IInteractionOptions} options - options to use
           * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
           */
          y: function(chart, e2, options2) {
            var position = getRelativePosition(e2, chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function(element) {
              if (element.inYRange(position.y)) {
                items.push(element);
              }
              if (element.inRange(position.x, position.y)) {
                intersectsItem = true;
              }
            });
            if (options2.intersect && !intersectsItem) {
              items = [];
            }
            return items;
          }
        }
      };
      var extend = helpers$1.extend;
      function filterByPosition(array, position) {
        return helpers$1.where(array, function(v2) {
          return v2.pos === position;
        });
      }
      function sortByWeight(array, reverse) {
        return array.sort(function(a2, b2) {
          var v0 = reverse ? b2 : a2;
          var v1 = reverse ? a2 : b2;
          return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
        });
      }
      function wrapBoxes(boxes) {
        var layoutBoxes = [];
        var i2, ilen, box;
        for (i2 = 0, ilen = (boxes || []).length; i2 < ilen; ++i2) {
          box = boxes[i2];
          layoutBoxes.push({
            index: i2,
            box,
            pos: box.position,
            horizontal: box.isHorizontal(),
            weight: box.weight
          });
        }
        return layoutBoxes;
      }
      function setLayoutDims(layouts, params) {
        var i2, ilen, layout;
        for (i2 = 0, ilen = layouts.length; i2 < ilen; ++i2) {
          layout = layouts[i2];
          layout.width = layout.horizontal ? layout.box.fullWidth && params.availableWidth : params.vBoxMaxWidth;
          layout.height = layout.horizontal && params.hBoxMaxHeight;
        }
      }
      function buildLayoutBoxes(boxes) {
        var layoutBoxes = wrapBoxes(boxes);
        var left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
        var right = sortByWeight(filterByPosition(layoutBoxes, "right"));
        var top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
        var bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
        return {
          leftAndTop: left.concat(top),
          rightAndBottom: right.concat(bottom),
          chartArea: filterByPosition(layoutBoxes, "chartArea"),
          vertical: left.concat(right),
          horizontal: top.concat(bottom)
        };
      }
      function getCombinedMax(maxPadding, chartArea, a2, b2) {
        return Math.max(maxPadding[a2], chartArea[a2]) + Math.max(maxPadding[b2], chartArea[b2]);
      }
      function updateDims(chartArea, params, layout) {
        var box = layout.box;
        var maxPadding = chartArea.maxPadding;
        var newWidth, newHeight;
        if (layout.size) {
          chartArea[layout.pos] -= layout.size;
        }
        layout.size = layout.horizontal ? box.height : box.width;
        chartArea[layout.pos] += layout.size;
        if (box.getPadding) {
          var boxPadding = box.getPadding();
          maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
          maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
          maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
          maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
        }
        newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right");
        newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom");
        if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
          chartArea.w = newWidth;
          chartArea.h = newHeight;
          var sizes = layout.horizontal ? [newWidth, chartArea.w] : [newHeight, chartArea.h];
          return sizes[0] !== sizes[1] && (!isNaN(sizes[0]) || !isNaN(sizes[1]));
        }
      }
      function handleMaxPadding(chartArea) {
        var maxPadding = chartArea.maxPadding;
        function updatePos(pos) {
          var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
          chartArea[pos] += change;
          return change;
        }
        chartArea.y += updatePos("top");
        chartArea.x += updatePos("left");
        updatePos("right");
        updatePos("bottom");
      }
      function getMargins(horizontal, chartArea) {
        var maxPadding = chartArea.maxPadding;
        function marginForPositions(positions) {
          var margin = { left: 0, top: 0, right: 0, bottom: 0 };
          positions.forEach(function(pos) {
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
          });
          return margin;
        }
        return horizontal ? marginForPositions(["left", "right"]) : marginForPositions(["top", "bottom"]);
      }
      function fitBoxes(boxes, chartArea, params) {
        var refitBoxes = [];
        var i2, ilen, layout, box, refit, changed;
        for (i2 = 0, ilen = boxes.length; i2 < ilen; ++i2) {
          layout = boxes[i2];
          box = layout.box;
          box.update(
            layout.width || chartArea.w,
            layout.height || chartArea.h,
            getMargins(layout.horizontal, chartArea)
          );
          if (updateDims(chartArea, params, layout)) {
            changed = true;
            if (refitBoxes.length) {
              refit = true;
            }
          }
          if (!box.fullWidth) {
            refitBoxes.push(layout);
          }
        }
        return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
      }
      function placeBoxes(boxes, chartArea, params) {
        var userPadding = params.padding;
        var x = chartArea.x;
        var y2 = chartArea.y;
        var i2, ilen, layout, box;
        for (i2 = 0, ilen = boxes.length; i2 < ilen; ++i2) {
          layout = boxes[i2];
          box = layout.box;
          if (layout.horizontal) {
            box.left = box.fullWidth ? userPadding.left : chartArea.left;
            box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
            box.top = y2;
            box.bottom = y2 + box.height;
            box.width = box.right - box.left;
            y2 = box.bottom;
          } else {
            box.left = x;
            box.right = x + box.width;
            box.top = chartArea.top;
            box.bottom = chartArea.top + chartArea.h;
            box.height = box.bottom - box.top;
            x = box.right;
          }
        }
        chartArea.x = x;
        chartArea.y = y2;
      }
      core_defaults._set("global", {
        layout: {
          padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
          }
        }
      });
      var core_layouts = {
        defaults: {},
        /**
         * Register a box to a chart.
         * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
         * @param {Chart} chart - the chart to use
         * @param {ILayoutItem} item - the item to add to be layed out
         */
        addBox: function(chart, item) {
          if (!chart.boxes) {
            chart.boxes = [];
          }
          item.fullWidth = item.fullWidth || false;
          item.position = item.position || "top";
          item.weight = item.weight || 0;
          item._layers = item._layers || function() {
            return [{
              z: 0,
              draw: function() {
                item.draw.apply(item, arguments);
              }
            }];
          };
          chart.boxes.push(item);
        },
        /**
         * Remove a layoutItem from a chart
         * @param {Chart} chart - the chart to remove the box from
         * @param {ILayoutItem} layoutItem - the item to remove from the layout
         */
        removeBox: function(chart, layoutItem) {
          var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
          if (index !== -1) {
            chart.boxes.splice(index, 1);
          }
        },
        /**
         * Sets (or updates) options on the given `item`.
         * @param {Chart} chart - the chart in which the item lives (or will be added to)
         * @param {ILayoutItem} item - the item to configure with the given options
         * @param {object} options - the new item options.
         */
        configure: function(chart, item, options2) {
          var props = ["fullWidth", "position", "weight"];
          var ilen = props.length;
          var i2 = 0;
          var prop;
          for (; i2 < ilen; ++i2) {
            prop = props[i2];
            if (options2.hasOwnProperty(prop)) {
              item[prop] = options2[prop];
            }
          }
        },
        /**
         * Fits boxes of the given chart into the given size by having each box measure itself
         * then running a fitting algorithm
         * @param {Chart} chart - the chart
         * @param {number} width - the width to fit into
         * @param {number} height - the height to fit into
         */
        update: function(chart, width, height) {
          if (!chart) {
            return;
          }
          var layoutOptions = chart.options.layout || {};
          var padding = helpers$1.options.toPadding(layoutOptions.padding);
          var availableWidth = width - padding.width;
          var availableHeight = height - padding.height;
          var boxes = buildLayoutBoxes(chart.boxes);
          var verticalBoxes = boxes.vertical;
          var horizontalBoxes = boxes.horizontal;
          var params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding,
            availableWidth,
            vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
            hBoxMaxHeight: availableHeight / 2
          });
          var chartArea = extend({
            maxPadding: extend({}, padding),
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
          }, padding);
          setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
          fitBoxes(verticalBoxes, chartArea, params);
          if (fitBoxes(horizontalBoxes, chartArea, params)) {
            fitBoxes(verticalBoxes, chartArea, params);
          }
          handleMaxPadding(chartArea);
          placeBoxes(boxes.leftAndTop, chartArea, params);
          chartArea.x += chartArea.w;
          chartArea.y += chartArea.h;
          placeBoxes(boxes.rightAndBottom, chartArea, params);
          chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h
          };
          helpers$1.each(boxes.chartArea, function(layout) {
            var box = layout.box;
            extend(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h);
          });
        }
      };
      var platform_basic = {
        acquireContext: function(item) {
          if (item && item.canvas) {
            item = item.canvas;
          }
          return item && item.getContext("2d") || null;
        }
      };
      var platform_dom = "/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n	from { opacity: 0.99; }\r\n	to { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n	animation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n	position: absolute;\r\n	direction: ltr;\r\n	left: 0;\r\n	top: 0;\r\n	right: 0;\r\n	bottom: 0;\r\n	overflow: hidden;\r\n	pointer-events: none;\r\n	visibility: hidden;\r\n	z-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n	position: absolute;\r\n	width: 1000000px;\r\n	height: 1000000px;\r\n	left: 0;\r\n	top: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n	position: absolute;\r\n	width: 200%;\r\n	height: 200%;\r\n	left: 0;\r\n	top: 0;\r\n}\r\n";
      var platform_dom$1 = Object.freeze({
        __proto__: null,
        "default": platform_dom
      });
      var stylesheet = getCjsExportFromNamespace(platform_dom$1);
      var EXPANDO_KEY = "$chartjs";
      var CSS_PREFIX = "chartjs-";
      var CSS_SIZE_MONITOR = CSS_PREFIX + "size-monitor";
      var CSS_RENDER_MONITOR = CSS_PREFIX + "render-monitor";
      var CSS_RENDER_ANIMATION = CSS_PREFIX + "render-animation";
      var ANIMATION_START_EVENTS = ["animationstart", "webkitAnimationStart"];
      var EVENT_TYPES = {
        touchstart: "mousedown",
        touchmove: "mousemove",
        touchend: "mouseup",
        pointerenter: "mouseenter",
        pointerdown: "mousedown",
        pointermove: "mousemove",
        pointerup: "mouseup",
        pointerleave: "mouseout",
        pointerout: "mouseout"
      };
      function readUsedSize(element, property) {
        var value = helpers$1.getStyle(element, property);
        var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
        return matches ? Number(matches[1]) : void 0;
      }
      function initCanvas(canvas2, config) {
        var style = canvas2.style;
        var renderHeight = canvas2.getAttribute("height");
        var renderWidth = canvas2.getAttribute("width");
        canvas2[EXPANDO_KEY] = {
          initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
              display: style.display,
              height: style.height,
              width: style.width
            }
          }
        };
        style.display = style.display || "block";
        if (renderWidth === null || renderWidth === "") {
          var displayWidth = readUsedSize(canvas2, "width");
          if (displayWidth !== void 0) {
            canvas2.width = displayWidth;
          }
        }
        if (renderHeight === null || renderHeight === "") {
          if (canvas2.style.height === "") {
            canvas2.height = canvas2.width / (config.options.aspectRatio || 2);
          } else {
            var displayHeight = readUsedSize(canvas2, "height");
            if (displayWidth !== void 0) {
              canvas2.height = displayHeight;
            }
          }
        }
        return canvas2;
      }
      var supportsEventListenerOptions = function() {
        var supports = false;
        try {
          var options2 = Object.defineProperty({}, "passive", {
            // eslint-disable-next-line getter-return
            get: function() {
              supports = true;
            }
          });
          window.addEventListener("e", null, options2);
        } catch (e2) {
        }
        return supports;
      }();
      var eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;
      function addListener(node, type, listener) {
        node.addEventListener(type, listener, eventListenerOptions);
      }
      function removeListener(node, type, listener) {
        node.removeEventListener(type, listener, eventListenerOptions);
      }
      function createEvent(type, chart, x, y2, nativeEvent) {
        return {
          type,
          chart,
          native: nativeEvent || null,
          x: x !== void 0 ? x : null,
          y: y2 !== void 0 ? y2 : null
        };
      }
      function fromNativeEvent(event, chart) {
        var type = EVENT_TYPES[event.type] || event.type;
        var pos = helpers$1.getRelativePosition(event, chart);
        return createEvent(type, chart, pos.x, pos.y, event);
      }
      function throttled(fn, thisArg) {
        var ticking = false;
        var args = [];
        return function() {
          args = Array.prototype.slice.call(arguments);
          thisArg = thisArg || this;
          if (!ticking) {
            ticking = true;
            helpers$1.requestAnimFrame.call(window, function() {
              ticking = false;
              fn.apply(thisArg, args);
            });
          }
        };
      }
      function createDiv(cls) {
        var el = document.createElement("div");
        el.className = cls || "";
        return el;
      }
      function createResizer(handler) {
        var maxSize = 1e6;
        var resizer = createDiv(CSS_SIZE_MONITOR);
        var expand = createDiv(CSS_SIZE_MONITOR + "-expand");
        var shrink = createDiv(CSS_SIZE_MONITOR + "-shrink");
        expand.appendChild(createDiv());
        shrink.appendChild(createDiv());
        resizer.appendChild(expand);
        resizer.appendChild(shrink);
        resizer._reset = function() {
          expand.scrollLeft = maxSize;
          expand.scrollTop = maxSize;
          shrink.scrollLeft = maxSize;
          shrink.scrollTop = maxSize;
        };
        var onScroll = function() {
          resizer._reset();
          handler();
        };
        addListener(expand, "scroll", onScroll.bind(expand, "expand"));
        addListener(shrink, "scroll", onScroll.bind(shrink, "shrink"));
        return resizer;
      }
      function watchForRender(node, handler) {
        var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
        var proxy = expando.renderProxy = function(e2) {
          if (e2.animationName === CSS_RENDER_ANIMATION) {
            handler();
          }
        };
        helpers$1.each(ANIMATION_START_EVENTS, function(type) {
          addListener(node, type, proxy);
        });
        expando.reflow = !!node.offsetParent;
        node.classList.add(CSS_RENDER_MONITOR);
      }
      function unwatchForRender(node) {
        var expando = node[EXPANDO_KEY] || {};
        var proxy = expando.renderProxy;
        if (proxy) {
          helpers$1.each(ANIMATION_START_EVENTS, function(type) {
            removeListener(node, type, proxy);
          });
          delete expando.renderProxy;
        }
        node.classList.remove(CSS_RENDER_MONITOR);
      }
      function addResizeListener(node, listener, chart) {
        var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
        var resizer = expando.resizer = createResizer(throttled(function() {
          if (expando.resizer) {
            var container = chart.options.maintainAspectRatio && node.parentNode;
            var w2 = container ? container.clientWidth : 0;
            listener(createEvent("resize", chart));
            if (container && container.clientWidth < w2 && chart.canvas) {
              listener(createEvent("resize", chart));
            }
          }
        }));
        watchForRender(node, function() {
          if (expando.resizer) {
            var container = node.parentNode;
            if (container && container !== resizer.parentNode) {
              container.insertBefore(resizer, container.firstChild);
            }
            resizer._reset();
          }
        });
      }
      function removeResizeListener(node) {
        var expando = node[EXPANDO_KEY] || {};
        var resizer = expando.resizer;
        delete expando.resizer;
        unwatchForRender(node);
        if (resizer && resizer.parentNode) {
          resizer.parentNode.removeChild(resizer);
        }
      }
      function injectCSS(rootNode, css) {
        var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
        if (!expando.containsStyles) {
          expando.containsStyles = true;
          css = "/* Chart.js */\n" + css;
          var style = document.createElement("style");
          style.setAttribute("type", "text/css");
          style.appendChild(document.createTextNode(css));
          rootNode.appendChild(style);
        }
      }
      var platform_dom$2 = {
        /**
         * When `true`, prevents the automatic injection of the stylesheet required to
         * correctly detect when the chart is added to the DOM and then resized. This
         * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
         * to be manually imported to make this library compatible with any CSP.
         * See https://github.com/chartjs/Chart.js/issues/5208
         */
        disableCSSInjection: false,
        /**
         * This property holds whether this platform is enabled for the current environment.
         * Currently used by platform.js to select the proper implementation.
         * @private
         */
        _enabled: typeof window !== "undefined" && typeof document !== "undefined",
        /**
         * Initializes resources that depend on platform options.
         * @param {HTMLCanvasElement} canvas - The Canvas element.
         * @private
         */
        _ensureLoaded: function(canvas2) {
          if (!this.disableCSSInjection) {
            var root = canvas2.getRootNode ? canvas2.getRootNode() : document;
            var targetNode = root.host ? root : document.head;
            injectCSS(targetNode, stylesheet);
          }
        },
        acquireContext: function(item, config) {
          if (typeof item === "string") {
            item = document.getElementById(item);
          } else if (item.length) {
            item = item[0];
          }
          if (item && item.canvas) {
            item = item.canvas;
          }
          var context = item && item.getContext && item.getContext("2d");
          if (context && context.canvas === item) {
            this._ensureLoaded(item);
            initCanvas(item, config);
            return context;
          }
          return null;
        },
        releaseContext: function(context) {
          var canvas2 = context.canvas;
          if (!canvas2[EXPANDO_KEY]) {
            return;
          }
          var initial = canvas2[EXPANDO_KEY].initial;
          ["height", "width"].forEach(function(prop) {
            var value = initial[prop];
            if (helpers$1.isNullOrUndef(value)) {
              canvas2.removeAttribute(prop);
            } else {
              canvas2.setAttribute(prop, value);
            }
          });
          helpers$1.each(initial.style || {}, function(value, key) {
            canvas2.style[key] = value;
          });
          canvas2.width = canvas2.width;
          delete canvas2[EXPANDO_KEY];
        },
        addEventListener: function(chart, type, listener) {
          var canvas2 = chart.canvas;
          if (type === "resize") {
            addResizeListener(canvas2, listener, chart);
            return;
          }
          var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
          var proxies = expando.proxies || (expando.proxies = {});
          var proxy = proxies[chart.id + "_" + type] = function(event) {
            listener(fromNativeEvent(event, chart));
          };
          addListener(canvas2, type, proxy);
        },
        removeEventListener: function(chart, type, listener) {
          var canvas2 = chart.canvas;
          if (type === "resize") {
            removeResizeListener(canvas2);
            return;
          }
          var expando = listener[EXPANDO_KEY] || {};
          var proxies = expando.proxies || {};
          var proxy = proxies[chart.id + "_" + type];
          if (!proxy) {
            return;
          }
          removeListener(canvas2, type, proxy);
        }
      };
      helpers$1.addEvent = addListener;
      helpers$1.removeEvent = removeListener;
      var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;
      var platform = helpers$1.extend({
        /**
         * @since 2.7.0
         */
        initialize: function() {
        },
        /**
         * Called at chart construction time, returns a context2d instance implementing
         * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
         * @param {*} item - The native item from which to acquire context (platform specific)
         * @param {object} options - The chart options
         * @returns {CanvasRenderingContext2D} context2d instance
         */
        acquireContext: function() {
        },
        /**
         * Called at chart destruction time, releases any resources associated to the context
         * previously returned by the acquireContext() method.
         * @param {CanvasRenderingContext2D} context - The context2d instance
         * @returns {boolean} true if the method succeeded, else false
         */
        releaseContext: function() {
        },
        /**
         * Registers the specified listener on the given chart.
         * @param {Chart} chart - Chart from which to listen for event
         * @param {string} type - The ({@link IEvent}) type to listen for
         * @param {function} listener - Receives a notification (an object that implements
         * the {@link IEvent} interface) when an event of the specified type occurs.
         */
        addEventListener: function() {
        },
        /**
         * Removes the specified listener previously registered with addEventListener.
         * @param {Chart} chart - Chart from which to remove the listener
         * @param {string} type - The ({@link IEvent}) type to remove
         * @param {function} listener - The listener function to remove from the event target.
         */
        removeEventListener: function() {
        }
      }, implementation);
      core_defaults._set("global", {
        plugins: {}
      });
      var core_plugins = {
        /**
         * Globally registered plugins.
         * @private
         */
        _plugins: [],
        /**
         * This identifier is used to invalidate the descriptors cache attached to each chart
         * when a global plugin is registered or unregistered. In this case, the cache ID is
         * incremented and descriptors are regenerated during following API calls.
         * @private
         */
        _cacheId: 0,
        /**
         * Registers the given plugin(s) if not already registered.
         * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
         */
        register: function(plugins2) {
          var p2 = this._plugins;
          [].concat(plugins2).forEach(function(plugin) {
            if (p2.indexOf(plugin) === -1) {
              p2.push(plugin);
            }
          });
          this._cacheId++;
        },
        /**
         * Unregisters the given plugin(s) only if registered.
         * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
         */
        unregister: function(plugins2) {
          var p2 = this._plugins;
          [].concat(plugins2).forEach(function(plugin) {
            var idx = p2.indexOf(plugin);
            if (idx !== -1) {
              p2.splice(idx, 1);
            }
          });
          this._cacheId++;
        },
        /**
         * Remove all registered plugins.
         * @since 2.1.5
         */
        clear: function() {
          this._plugins = [];
          this._cacheId++;
        },
        /**
         * Returns the number of registered plugins?
         * @returns {number}
         * @since 2.1.5
         */
        count: function() {
          return this._plugins.length;
        },
        /**
         * Returns all registered plugin instances.
         * @returns {IPlugin[]} array of plugin objects.
         * @since 2.1.5
         */
        getAll: function() {
          return this._plugins;
        },
        /**
         * Calls enabled plugins for `chart` on the specified hook and with the given args.
         * This method immediately returns as soon as a plugin explicitly returns false. The
         * returned value can be used, for instance, to interrupt the current action.
         * @param {Chart} chart - The chart instance for which plugins should be called.
         * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
         * @param {Array} [args] - Extra arguments to apply to the hook call.
         * @returns {boolean} false if any of the plugins return false, else returns true.
         */
        notify: function(chart, hook, args) {
          var descriptors = this.descriptors(chart);
          var ilen = descriptors.length;
          var i2, descriptor, plugin, params, method;
          for (i2 = 0; i2 < ilen; ++i2) {
            descriptor = descriptors[i2];
            plugin = descriptor.plugin;
            method = plugin[hook];
            if (typeof method === "function") {
              params = [chart].concat(args || []);
              params.push(descriptor.options);
              if (method.apply(plugin, params) === false) {
                return false;
              }
            }
          }
          return true;
        },
        /**
         * Returns descriptors of enabled plugins for the given chart.
         * @returns {object[]} [{ plugin, options }]
         * @private
         */
        descriptors: function(chart) {
          var cache = chart.$plugins || (chart.$plugins = {});
          if (cache.id === this._cacheId) {
            return cache.descriptors;
          }
          var plugins2 = [];
          var descriptors = [];
          var config = chart && chart.config || {};
          var options2 = config.options && config.options.plugins || {};
          this._plugins.concat(config.plugins || []).forEach(function(plugin) {
            var idx = plugins2.indexOf(plugin);
            if (idx !== -1) {
              return;
            }
            var id = plugin.id;
            var opts = options2[id];
            if (opts === false) {
              return;
            }
            if (opts === true) {
              opts = helpers$1.clone(core_defaults.global.plugins[id]);
            }
            plugins2.push(plugin);
            descriptors.push({
              plugin,
              options: opts || {}
            });
          });
          cache.descriptors = descriptors;
          cache.id = this._cacheId;
          return descriptors;
        },
        /**
         * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
         * but in some cases, this reference can be changed by the user when updating options.
         * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
         * @private
         */
        _invalidate: function(chart) {
          delete chart.$plugins;
        }
      };
      var core_scaleService = {
        // Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
        // use the new chart options to grab the correct scale
        constructors: {},
        // Use a registration function so that we can move to an ES6 map when we no longer need to support
        // old browsers
        // Scale config defaults
        defaults: {},
        registerScaleType: function(type, scaleConstructor, scaleDefaults) {
          this.constructors[type] = scaleConstructor;
          this.defaults[type] = helpers$1.clone(scaleDefaults);
        },
        getScaleConstructor: function(type) {
          return this.constructors.hasOwnProperty(type) ? this.constructors[type] : void 0;
        },
        getScaleDefaults: function(type) {
          return this.defaults.hasOwnProperty(type) ? helpers$1.merge(/* @__PURE__ */ Object.create(null), [core_defaults.scale, this.defaults[type]]) : {};
        },
        updateScaleDefaults: function(type, additions) {
          var me = this;
          if (me.defaults.hasOwnProperty(type)) {
            me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
          }
        },
        addScalesToLayout: function(chart) {
          helpers$1.each(chart.scales, function(scale2) {
            scale2.fullWidth = scale2.options.fullWidth;
            scale2.position = scale2.options.position;
            scale2.weight = scale2.options.weight;
            core_layouts.addBox(chart, scale2);
          });
        }
      };
      var valueOrDefault$8 = helpers$1.valueOrDefault;
      var getRtlHelper = helpers$1.rtl.getRtlAdapter;
      core_defaults._set("global", {
        tooltips: {
          enabled: true,
          custom: null,
          mode: "nearest",
          position: "average",
          intersect: true,
          backgroundColor: "rgba(0,0,0,0.8)",
          titleFontStyle: "bold",
          titleSpacing: 2,
          titleMarginBottom: 6,
          titleFontColor: "#fff",
          titleAlign: "left",
          bodySpacing: 2,
          bodyFontColor: "#fff",
          bodyAlign: "left",
          footerFontStyle: "bold",
          footerSpacing: 2,
          footerMarginTop: 6,
          footerFontColor: "#fff",
          footerAlign: "left",
          yPadding: 6,
          xPadding: 6,
          caretPadding: 2,
          caretSize: 5,
          cornerRadius: 6,
          multiKeyBackground: "#fff",
          displayColors: true,
          borderColor: "rgba(0,0,0,0)",
          borderWidth: 0,
          callbacks: {
            // Args are: (tooltipItems, data)
            beforeTitle: helpers$1.noop,
            title: function(tooltipItems, data) {
              var title2 = "";
              var labels = data.labels;
              var labelCount = labels ? labels.length : 0;
              if (tooltipItems.length > 0) {
                var item = tooltipItems[0];
                if (item.label) {
                  title2 = item.label;
                } else if (item.xLabel) {
                  title2 = item.xLabel;
                } else if (labelCount > 0 && item.index < labelCount) {
                  title2 = labels[item.index];
                }
              }
              return title2;
            },
            afterTitle: helpers$1.noop,
            // Args are: (tooltipItems, data)
            beforeBody: helpers$1.noop,
            // Args are: (tooltipItem, data)
            beforeLabel: helpers$1.noop,
            label: function(tooltipItem, data) {
              var label = data.datasets[tooltipItem.datasetIndex].label || "";
              if (label) {
                label += ": ";
              }
              if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
                label += tooltipItem.value;
              } else {
                label += tooltipItem.yLabel;
              }
              return label;
            },
            labelColor: function(tooltipItem, chart) {
              var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
              var activeElement = meta.data[tooltipItem.index];
              var view = activeElement._view;
              return {
                borderColor: view.borderColor,
                backgroundColor: view.backgroundColor
              };
            },
            labelTextColor: function() {
              return this._options.bodyFontColor;
            },
            afterLabel: helpers$1.noop,
            // Args are: (tooltipItems, data)
            afterBody: helpers$1.noop,
            // Args are: (tooltipItems, data)
            beforeFooter: helpers$1.noop,
            footer: helpers$1.noop,
            afterFooter: helpers$1.noop
          }
        }
      });
      var positioners = {
        /**
         * Average mode places the tooltip at the average position of the elements shown
         * @function Chart.Tooltip.positioners.average
         * @param elements {ChartElement[]} the elements being displayed in the tooltip
         * @returns {object} tooltip position
         */
        average: function(elements2) {
          if (!elements2.length) {
            return false;
          }
          var i2, len;
          var x = 0;
          var y2 = 0;
          var count = 0;
          for (i2 = 0, len = elements2.length; i2 < len; ++i2) {
            var el = elements2[i2];
            if (el && el.hasValue()) {
              var pos = el.tooltipPosition();
              x += pos.x;
              y2 += pos.y;
              ++count;
            }
          }
          return {
            x: x / count,
            y: y2 / count
          };
        },
        /**
         * Gets the tooltip position nearest of the item nearest to the event position
         * @function Chart.Tooltip.positioners.nearest
         * @param elements {Chart.Element[]} the tooltip elements
         * @param eventPosition {object} the position of the event in canvas coordinates
         * @returns {object} the tooltip position
         */
        nearest: function(elements2, eventPosition) {
          var x = eventPosition.x;
          var y2 = eventPosition.y;
          var minDistance = Number.POSITIVE_INFINITY;
          var i2, len, nearestElement;
          for (i2 = 0, len = elements2.length; i2 < len; ++i2) {
            var el = elements2[i2];
            if (el && el.hasValue()) {
              var center = el.getCenterPoint();
              var d2 = helpers$1.distanceBetweenPoints(eventPosition, center);
              if (d2 < minDistance) {
                minDistance = d2;
                nearestElement = el;
              }
            }
          }
          if (nearestElement) {
            var tp = nearestElement.tooltipPosition();
            x = tp.x;
            y2 = tp.y;
          }
          return {
            x,
            y: y2
          };
        }
      };
      function pushOrConcat(base, toPush) {
        if (toPush) {
          if (helpers$1.isArray(toPush)) {
            Array.prototype.push.apply(base, toPush);
          } else {
            base.push(toPush);
          }
        }
        return base;
      }
      function splitNewlines(str) {
        if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
          return str.split("\n");
        }
        return str;
      }
      function createTooltipItem(element) {
        var xScale = element._xScale;
        var yScale = element._yScale || element._scale;
        var index = element._index;
        var datasetIndex = element._datasetIndex;
        var controller = element._chart.getDatasetMeta(datasetIndex).controller;
        var indexScale = controller._getIndexScale();
        var valueScale = controller._getValueScale();
        return {
          xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : "",
          yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : "",
          label: indexScale ? "" + indexScale.getLabelForIndex(index, datasetIndex) : "",
          value: valueScale ? "" + valueScale.getLabelForIndex(index, datasetIndex) : "",
          index,
          datasetIndex,
          x: element._model.x,
          y: element._model.y
        };
      }
      function getBaseModel(tooltipOpts) {
        var globalDefaults = core_defaults.global;
        return {
          // Positioning
          xPadding: tooltipOpts.xPadding,
          yPadding: tooltipOpts.yPadding,
          xAlign: tooltipOpts.xAlign,
          yAlign: tooltipOpts.yAlign,
          // Drawing direction and text direction
          rtl: tooltipOpts.rtl,
          textDirection: tooltipOpts.textDirection,
          // Body
          bodyFontColor: tooltipOpts.bodyFontColor,
          _bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
          _bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
          _bodyAlign: tooltipOpts.bodyAlign,
          bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
          bodySpacing: tooltipOpts.bodySpacing,
          // Title
          titleFontColor: tooltipOpts.titleFontColor,
          _titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
          _titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
          titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
          _titleAlign: tooltipOpts.titleAlign,
          titleSpacing: tooltipOpts.titleSpacing,
          titleMarginBottom: tooltipOpts.titleMarginBottom,
          // Footer
          footerFontColor: tooltipOpts.footerFontColor,
          _footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
          _footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
          footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
          _footerAlign: tooltipOpts.footerAlign,
          footerSpacing: tooltipOpts.footerSpacing,
          footerMarginTop: tooltipOpts.footerMarginTop,
          // Appearance
          caretSize: tooltipOpts.caretSize,
          cornerRadius: tooltipOpts.cornerRadius,
          backgroundColor: tooltipOpts.backgroundColor,
          opacity: 0,
          legendColorBackground: tooltipOpts.multiKeyBackground,
          displayColors: tooltipOpts.displayColors,
          borderColor: tooltipOpts.borderColor,
          borderWidth: tooltipOpts.borderWidth
        };
      }
      function getTooltipSize(tooltip, model) {
        var ctx = tooltip._chart.ctx;
        var height = model.yPadding * 2;
        var width = 0;
        var body = model.body;
        var combinedBodyLength = body.reduce(function(count, bodyItem) {
          return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
        }, 0);
        combinedBodyLength += model.beforeBody.length + model.afterBody.length;
        var titleLineCount = model.title.length;
        var footerLineCount = model.footer.length;
        var titleFontSize = model.titleFontSize;
        var bodyFontSize = model.bodyFontSize;
        var footerFontSize = model.footerFontSize;
        height += titleLineCount * titleFontSize;
        height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
        height += titleLineCount ? model.titleMarginBottom : 0;
        height += combinedBodyLength * bodyFontSize;
        height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
        height += footerLineCount ? model.footerMarginTop : 0;
        height += footerLineCount * footerFontSize;
        height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
        var widthPadding = 0;
        var maxLineWidth = function(line) {
          width = Math.max(width, ctx.measureText(line).width + widthPadding);
        };
        ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
        helpers$1.each(model.title, maxLineWidth);
        ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
        helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
        widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
        helpers$1.each(body, function(bodyItem) {
          helpers$1.each(bodyItem.before, maxLineWidth);
          helpers$1.each(bodyItem.lines, maxLineWidth);
          helpers$1.each(bodyItem.after, maxLineWidth);
        });
        widthPadding = 0;
        ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
        helpers$1.each(model.footer, maxLineWidth);
        width += 2 * model.xPadding;
        return {
          width,
          height
        };
      }
      function determineAlignment(tooltip, size) {
        var model = tooltip._model;
        var chart = tooltip._chart;
        var chartArea = tooltip._chart.chartArea;
        var xAlign = "center";
        var yAlign = "center";
        if (model.y < size.height) {
          yAlign = "top";
        } else if (model.y > chart.height - size.height) {
          yAlign = "bottom";
        }
        var lf, rf;
        var olf, orf;
        var yf;
        var midX = (chartArea.left + chartArea.right) / 2;
        var midY = (chartArea.top + chartArea.bottom) / 2;
        if (yAlign === "center") {
          lf = function(x) {
            return x <= midX;
          };
          rf = function(x) {
            return x > midX;
          };
        } else {
          lf = function(x) {
            return x <= size.width / 2;
          };
          rf = function(x) {
            return x >= chart.width - size.width / 2;
          };
        }
        olf = function(x) {
          return x + size.width + model.caretSize + model.caretPadding > chart.width;
        };
        orf = function(x) {
          return x - size.width - model.caretSize - model.caretPadding < 0;
        };
        yf = function(y2) {
          return y2 <= midY ? "top" : "bottom";
        };
        if (lf(model.x)) {
          xAlign = "left";
          if (olf(model.x)) {
            xAlign = "center";
            yAlign = yf(model.y);
          }
        } else if (rf(model.x)) {
          xAlign = "right";
          if (orf(model.x)) {
            xAlign = "center";
            yAlign = yf(model.y);
          }
        }
        var opts = tooltip._options;
        return {
          xAlign: opts.xAlign ? opts.xAlign : xAlign,
          yAlign: opts.yAlign ? opts.yAlign : yAlign
        };
      }
      function getBackgroundPoint(vm, size, alignment, chart) {
        var x = vm.x;
        var y2 = vm.y;
        var caretSize = vm.caretSize;
        var caretPadding = vm.caretPadding;
        var cornerRadius = vm.cornerRadius;
        var xAlign = alignment.xAlign;
        var yAlign = alignment.yAlign;
        var paddingAndSize = caretSize + caretPadding;
        var radiusAndPadding = cornerRadius + caretPadding;
        if (xAlign === "right") {
          x -= size.width;
        } else if (xAlign === "center") {
          x -= size.width / 2;
          if (x + size.width > chart.width) {
            x = chart.width - size.width;
          }
          if (x < 0) {
            x = 0;
          }
        }
        if (yAlign === "top") {
          y2 += paddingAndSize;
        } else if (yAlign === "bottom") {
          y2 -= size.height + paddingAndSize;
        } else {
          y2 -= size.height / 2;
        }
        if (yAlign === "center") {
          if (xAlign === "left") {
            x += paddingAndSize;
          } else if (xAlign === "right") {
            x -= paddingAndSize;
          }
        } else if (xAlign === "left") {
          x -= radiusAndPadding;
        } else if (xAlign === "right") {
          x += radiusAndPadding;
        }
        return {
          x,
          y: y2
        };
      }
      function getAlignedX(vm, align) {
        return align === "center" ? vm.x + vm.width / 2 : align === "right" ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;
      }
      function getBeforeAfterBodyLines(callback) {
        return pushOrConcat([], splitNewlines(callback));
      }
      var exports$4 = core_element.extend({
        initialize: function() {
          this._model = getBaseModel(this._options);
          this._lastActive = [];
        },
        // Get the title
        // Args are: (tooltipItem, data)
        getTitle: function() {
          var me = this;
          var opts = me._options;
          var callbacks = opts.callbacks;
          var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
          var title2 = callbacks.title.apply(me, arguments);
          var afterTitle = callbacks.afterTitle.apply(me, arguments);
          var lines = [];
          lines = pushOrConcat(lines, splitNewlines(beforeTitle));
          lines = pushOrConcat(lines, splitNewlines(title2));
          lines = pushOrConcat(lines, splitNewlines(afterTitle));
          return lines;
        },
        // Args are: (tooltipItem, data)
        getBeforeBody: function() {
          return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
        },
        // Args are: (tooltipItem, data)
        getBody: function(tooltipItems, data) {
          var me = this;
          var callbacks = me._options.callbacks;
          var bodyItems = [];
          helpers$1.each(tooltipItems, function(tooltipItem) {
            var bodyItem = {
              before: [],
              lines: [],
              after: []
            };
            pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
            pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
            pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
            bodyItems.push(bodyItem);
          });
          return bodyItems;
        },
        // Args are: (tooltipItem, data)
        getAfterBody: function() {
          return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
        },
        // Get the footer and beforeFooter and afterFooter lines
        // Args are: (tooltipItem, data)
        getFooter: function() {
          var me = this;
          var callbacks = me._options.callbacks;
          var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
          var footer = callbacks.footer.apply(me, arguments);
          var afterFooter = callbacks.afterFooter.apply(me, arguments);
          var lines = [];
          lines = pushOrConcat(lines, splitNewlines(beforeFooter));
          lines = pushOrConcat(lines, splitNewlines(footer));
          lines = pushOrConcat(lines, splitNewlines(afterFooter));
          return lines;
        },
        update: function(changed) {
          var me = this;
          var opts = me._options;
          var existingModel = me._model;
          var model = me._model = getBaseModel(opts);
          var active = me._active;
          var data = me._data;
          var alignment = {
            xAlign: existingModel.xAlign,
            yAlign: existingModel.yAlign
          };
          var backgroundPoint = {
            x: existingModel.x,
            y: existingModel.y
          };
          var tooltipSize = {
            width: existingModel.width,
            height: existingModel.height
          };
          var tooltipPosition = {
            x: existingModel.caretX,
            y: existingModel.caretY
          };
          var i2, len;
          if (active.length) {
            model.opacity = 1;
            var labelColors = [];
            var labelTextColors = [];
            tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);
            var tooltipItems = [];
            for (i2 = 0, len = active.length; i2 < len; ++i2) {
              tooltipItems.push(createTooltipItem(active[i2]));
            }
            if (opts.filter) {
              tooltipItems = tooltipItems.filter(function(a2) {
                return opts.filter(a2, data);
              });
            }
            if (opts.itemSort) {
              tooltipItems = tooltipItems.sort(function(a2, b2) {
                return opts.itemSort(a2, b2, data);
              });
            }
            helpers$1.each(tooltipItems, function(tooltipItem) {
              labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
              labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
            });
            model.title = me.getTitle(tooltipItems, data);
            model.beforeBody = me.getBeforeBody(tooltipItems, data);
            model.body = me.getBody(tooltipItems, data);
            model.afterBody = me.getAfterBody(tooltipItems, data);
            model.footer = me.getFooter(tooltipItems, data);
            model.x = tooltipPosition.x;
            model.y = tooltipPosition.y;
            model.caretPadding = opts.caretPadding;
            model.labelColors = labelColors;
            model.labelTextColors = labelTextColors;
            model.dataPoints = tooltipItems;
            tooltipSize = getTooltipSize(this, model);
            alignment = determineAlignment(this, tooltipSize);
            backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
          } else {
            model.opacity = 0;
          }
          model.xAlign = alignment.xAlign;
          model.yAlign = alignment.yAlign;
          model.x = backgroundPoint.x;
          model.y = backgroundPoint.y;
          model.width = tooltipSize.width;
          model.height = tooltipSize.height;
          model.caretX = tooltipPosition.x;
          model.caretY = tooltipPosition.y;
          me._model = model;
          if (changed && opts.custom) {
            opts.custom.call(me, model);
          }
          return me;
        },
        drawCaret: function(tooltipPoint, size) {
          var ctx = this._chart.ctx;
          var vm = this._view;
          var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
          ctx.lineTo(caretPosition.x1, caretPosition.y1);
          ctx.lineTo(caretPosition.x2, caretPosition.y2);
          ctx.lineTo(caretPosition.x3, caretPosition.y3);
        },
        getCaretPosition: function(tooltipPoint, size, vm) {
          var x1, x2, x3, y1, y2, y3;
          var caretSize = vm.caretSize;
          var cornerRadius = vm.cornerRadius;
          var xAlign = vm.xAlign;
          var yAlign = vm.yAlign;
          var ptX = tooltipPoint.x;
          var ptY = tooltipPoint.y;
          var width = size.width;
          var height = size.height;
          if (yAlign === "center") {
            y2 = ptY + height / 2;
            if (xAlign === "left") {
              x1 = ptX;
              x2 = x1 - caretSize;
              x3 = x1;
              y1 = y2 + caretSize;
              y3 = y2 - caretSize;
            } else {
              x1 = ptX + width;
              x2 = x1 + caretSize;
              x3 = x1;
              y1 = y2 - caretSize;
              y3 = y2 + caretSize;
            }
          } else {
            if (xAlign === "left") {
              x2 = ptX + cornerRadius + caretSize;
              x1 = x2 - caretSize;
              x3 = x2 + caretSize;
            } else if (xAlign === "right") {
              x2 = ptX + width - cornerRadius - caretSize;
              x1 = x2 - caretSize;
              x3 = x2 + caretSize;
            } else {
              x2 = vm.caretX;
              x1 = x2 - caretSize;
              x3 = x2 + caretSize;
            }
            if (yAlign === "top") {
              y1 = ptY;
              y2 = y1 - caretSize;
              y3 = y1;
            } else {
              y1 = ptY + height;
              y2 = y1 + caretSize;
              y3 = y1;
              var tmp = x3;
              x3 = x1;
              x1 = tmp;
            }
          }
          return { x1, x2, x3, y1, y2, y3 };
        },
        drawTitle: function(pt, vm, ctx) {
          var title2 = vm.title;
          var length = title2.length;
          var titleFontSize, titleSpacing, i2;
          if (length) {
            var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
            pt.x = getAlignedX(vm, vm._titleAlign);
            ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
            ctx.textBaseline = "middle";
            titleFontSize = vm.titleFontSize;
            titleSpacing = vm.titleSpacing;
            ctx.fillStyle = vm.titleFontColor;
            ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
            for (i2 = 0; i2 < length; ++i2) {
              ctx.fillText(title2[i2], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
              pt.y += titleFontSize + titleSpacing;
              if (i2 + 1 === length) {
                pt.y += vm.titleMarginBottom - titleSpacing;
              }
            }
          }
        },
        drawBody: function(pt, vm, ctx) {
          var bodyFontSize = vm.bodyFontSize;
          var bodySpacing = vm.bodySpacing;
          var bodyAlign = vm._bodyAlign;
          var body = vm.body;
          var drawColorBoxes = vm.displayColors;
          var xLinePadding = 0;
          var colorX = drawColorBoxes ? getAlignedX(vm, "left") : 0;
          var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
          var fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
            pt.y += bodyFontSize + bodySpacing;
          };
          var bodyItem, textColor, labelColors, lines, i2, j2, ilen, jlen;
          var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
          ctx.textAlign = bodyAlign;
          ctx.textBaseline = "middle";
          ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
          pt.x = getAlignedX(vm, bodyAlignForCalculation);
          ctx.fillStyle = vm.bodyFontColor;
          helpers$1.each(vm.beforeBody, fillLineOfText);
          xLinePadding = drawColorBoxes && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0;
          for (i2 = 0, ilen = body.length; i2 < ilen; ++i2) {
            bodyItem = body[i2];
            textColor = vm.labelTextColors[i2];
            labelColors = vm.labelColors[i2];
            ctx.fillStyle = textColor;
            helpers$1.each(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            for (j2 = 0, jlen = lines.length; j2 < jlen; ++j2) {
              if (drawColorBoxes) {
                var rtlColorX = rtlHelper.x(colorX);
                ctx.fillStyle = vm.legendColorBackground;
                ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
                ctx.lineWidth = 1;
                ctx.strokeStyle = labelColors.borderColor;
                ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
                ctx.fillStyle = labelColors.backgroundColor;
                ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                ctx.fillStyle = textColor;
              }
              fillLineOfText(lines[j2]);
            }
            helpers$1.each(bodyItem.after, fillLineOfText);
          }
          xLinePadding = 0;
          helpers$1.each(vm.afterBody, fillLineOfText);
          pt.y -= bodySpacing;
        },
        drawFooter: function(pt, vm, ctx) {
          var footer = vm.footer;
          var length = footer.length;
          var footerFontSize, i2;
          if (length) {
            var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
            pt.x = getAlignedX(vm, vm._footerAlign);
            pt.y += vm.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
            ctx.textBaseline = "middle";
            footerFontSize = vm.footerFontSize;
            ctx.fillStyle = vm.footerFontColor;
            ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
            for (i2 = 0; i2 < length; ++i2) {
              ctx.fillText(footer[i2], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
              pt.y += footerFontSize + vm.footerSpacing;
            }
          }
        },
        drawBackground: function(pt, vm, ctx, tooltipSize) {
          ctx.fillStyle = vm.backgroundColor;
          ctx.strokeStyle = vm.borderColor;
          ctx.lineWidth = vm.borderWidth;
          var xAlign = vm.xAlign;
          var yAlign = vm.yAlign;
          var x = pt.x;
          var y2 = pt.y;
          var width = tooltipSize.width;
          var height = tooltipSize.height;
          var radius = vm.cornerRadius;
          ctx.beginPath();
          ctx.moveTo(x + radius, y2);
          if (yAlign === "top") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x + width - radius, y2);
          ctx.quadraticCurveTo(x + width, y2, x + width, y2 + radius);
          if (yAlign === "center" && xAlign === "right") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x + width, y2 + height - radius);
          ctx.quadraticCurveTo(x + width, y2 + height, x + width - radius, y2 + height);
          if (yAlign === "bottom") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x + radius, y2 + height);
          ctx.quadraticCurveTo(x, y2 + height, x, y2 + height - radius);
          if (yAlign === "center" && xAlign === "left") {
            this.drawCaret(pt, tooltipSize);
          }
          ctx.lineTo(x, y2 + radius);
          ctx.quadraticCurveTo(x, y2, x + radius, y2);
          ctx.closePath();
          ctx.fill();
          if (vm.borderWidth > 0) {
            ctx.stroke();
          }
        },
        draw: function() {
          var ctx = this._chart.ctx;
          var vm = this._view;
          if (vm.opacity === 0) {
            return;
          }
          var tooltipSize = {
            width: vm.width,
            height: vm.height
          };
          var pt = {
            x: vm.x,
            y: vm.y
          };
          var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
          var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;
          if (this._options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, vm, ctx, tooltipSize);
            pt.y += vm.yPadding;
            helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);
            this.drawTitle(pt, vm, ctx);
            this.drawBody(pt, vm, ctx);
            this.drawFooter(pt, vm, ctx);
            helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);
            ctx.restore();
          }
        },
        /**
         * Handle an event
         * @private
         * @param {IEvent} event - The event to handle
         * @returns {boolean} true if the tooltip changed
         */
        handleEvent: function(e2) {
          var me = this;
          var options2 = me._options;
          var changed = false;
          me._lastActive = me._lastActive || [];
          if (e2.type === "mouseout") {
            me._active = [];
          } else {
            me._active = me._chart.getElementsAtEventForMode(e2, options2.mode, options2);
            if (options2.reverse) {
              me._active.reverse();
            }
          }
          changed = !helpers$1.arrayEquals(me._active, me._lastActive);
          if (changed) {
            me._lastActive = me._active;
            if (options2.enabled || options2.custom) {
              me._eventPosition = {
                x: e2.x,
                y: e2.y
              };
              me.update(true);
              me.pivot();
            }
          }
          return changed;
        }
      });
      var positioners_1 = positioners;
      var core_tooltip = exports$4;
      core_tooltip.positioners = positioners_1;
      var valueOrDefault$9 = helpers$1.valueOrDefault;
      core_defaults._set("global", {
        elements: {},
        events: [
          "mousemove",
          "mouseout",
          "click",
          "touchstart",
          "touchmove"
        ],
        hover: {
          onHover: null,
          mode: "nearest",
          intersect: true,
          animationDuration: 400
        },
        onClick: null,
        maintainAspectRatio: true,
        responsive: true,
        responsiveAnimationDuration: 0
      });
      function mergeScaleConfig() {
        return helpers$1.merge(/* @__PURE__ */ Object.create(null), [].slice.call(arguments), {
          merger: function(key, target, source, options2) {
            if (key === "xAxes" || key === "yAxes") {
              var slen = source[key].length;
              var i2, type, scale2;
              if (!target[key]) {
                target[key] = [];
              }
              for (i2 = 0; i2 < slen; ++i2) {
                scale2 = source[key][i2];
                type = valueOrDefault$9(scale2.type, key === "xAxes" ? "category" : "linear");
                if (i2 >= target[key].length) {
                  target[key].push({});
                }
                if (!target[key][i2].type || scale2.type && scale2.type !== target[key][i2].type) {
                  helpers$1.merge(target[key][i2], [core_scaleService.getScaleDefaults(type), scale2]);
                } else {
                  helpers$1.merge(target[key][i2], scale2);
                }
              }
            } else {
              helpers$1._merger(key, target, source, options2);
            }
          }
        });
      }
      function mergeConfig() {
        return helpers$1.merge(/* @__PURE__ */ Object.create(null), [].slice.call(arguments), {
          merger: function(key, target, source, options2) {
            var tval = target[key] || /* @__PURE__ */ Object.create(null);
            var sval = source[key];
            if (key === "scales") {
              target[key] = mergeScaleConfig(tval, sval);
            } else if (key === "scale") {
              target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
            } else {
              helpers$1._merger(key, target, source, options2);
            }
          }
        });
      }
      function initConfig(config) {
        config = config || /* @__PURE__ */ Object.create(null);
        var data = config.data = config.data || {};
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        config.options = mergeConfig(
          core_defaults.global,
          core_defaults[config.type],
          config.options || {}
        );
        return config;
      }
      function updateConfig(chart) {
        var newOptions = chart.options;
        helpers$1.each(chart.scales, function(scale2) {
          core_layouts.removeBox(chart, scale2);
        });
        newOptions = mergeConfig(
          core_defaults.global,
          core_defaults[chart.config.type],
          newOptions
        );
        chart.options = chart.config.options = newOptions;
        chart.ensureScalesHaveIDs();
        chart.buildOrUpdateScales();
        chart.tooltip._options = newOptions.tooltips;
        chart.tooltip.initialize();
      }
      function nextAvailableScaleId(axesOpts, prefix, index) {
        var id;
        var hasId = function(obj) {
          return obj.id === id;
        };
        do {
          id = prefix + index++;
        } while (helpers$1.findIndex(axesOpts, hasId) >= 0);
        return id;
      }
      function positionIsHorizontal(position) {
        return position === "top" || position === "bottom";
      }
      function compare2Level(l1, l2) {
        return function(a2, b2) {
          return a2[l1] === b2[l1] ? a2[l2] - b2[l2] : a2[l1] - b2[l1];
        };
      }
      var Chart = function(item, config) {
        this.construct(item, config);
        return this;
      };
      helpers$1.extend(
        Chart.prototype,
        /** @lends Chart */
        {
          /**
           * @private
           */
          construct: function(item, config) {
            var me = this;
            config = initConfig(config);
            var context = platform.acquireContext(item, config);
            var canvas2 = context && context.canvas;
            var height = canvas2 && canvas2.height;
            var width = canvas2 && canvas2.width;
            me.id = helpers$1.uid();
            me.ctx = context;
            me.canvas = canvas2;
            me.config = config;
            me.width = width;
            me.height = height;
            me.aspectRatio = height ? width / height : null;
            me.options = config.options;
            me._bufferedRender = false;
            me._layers = [];
            me.chart = me;
            me.controller = me;
            Chart.instances[me.id] = me;
            Object.defineProperty(me, "data", {
              get: function() {
                return me.config.data;
              },
              set: function(value) {
                me.config.data = value;
              }
            });
            if (!context || !canvas2) {
              console.error("Failed to create chart: can't acquire context from the given item");
              return;
            }
            me.initialize();
            me.update();
          },
          /**
           * @private
           */
          initialize: function() {
            var me = this;
            core_plugins.notify(me, "beforeInit");
            helpers$1.retinaScale(me, me.options.devicePixelRatio);
            me.bindEvents();
            if (me.options.responsive) {
              me.resize(true);
            }
            me.initToolTip();
            core_plugins.notify(me, "afterInit");
            return me;
          },
          clear: function() {
            helpers$1.canvas.clear(this);
            return this;
          },
          stop: function() {
            core_animations.cancelAnimation(this);
            return this;
          },
          resize: function(silent) {
            var me = this;
            var options2 = me.options;
            var canvas2 = me.canvas;
            var aspectRatio = options2.maintainAspectRatio && me.aspectRatio || null;
            var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas2)));
            var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas2)));
            if (me.width === newWidth && me.height === newHeight) {
              return;
            }
            canvas2.width = me.width = newWidth;
            canvas2.height = me.height = newHeight;
            canvas2.style.width = newWidth + "px";
            canvas2.style.height = newHeight + "px";
            helpers$1.retinaScale(me, options2.devicePixelRatio);
            if (!silent) {
              var newSize = { width: newWidth, height: newHeight };
              core_plugins.notify(me, "resize", [newSize]);
              if (options2.onResize) {
                options2.onResize(me, newSize);
              }
              me.stop();
              me.update({
                duration: options2.responsiveAnimationDuration
              });
            }
          },
          ensureScalesHaveIDs: function() {
            var options2 = this.options;
            var scalesOptions = options2.scales || {};
            var scaleOptions = options2.scale;
            helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
              if (!xAxisOptions.id) {
                xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, "x-axis-", index);
              }
            });
            helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
              if (!yAxisOptions.id) {
                yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, "y-axis-", index);
              }
            });
            if (scaleOptions) {
              scaleOptions.id = scaleOptions.id || "scale";
            }
          },
          /**
           * Builds a map of scale ID to scale object for future lookup.
           */
          buildOrUpdateScales: function() {
            var me = this;
            var options2 = me.options;
            var scales2 = me.scales || {};
            var items = [];
            var updated = Object.keys(scales2).reduce(function(obj, id) {
              obj[id] = false;
              return obj;
            }, {});
            if (options2.scales) {
              items = items.concat(
                (options2.scales.xAxes || []).map(function(xAxisOptions) {
                  return { options: xAxisOptions, dtype: "category", dposition: "bottom" };
                }),
                (options2.scales.yAxes || []).map(function(yAxisOptions) {
                  return { options: yAxisOptions, dtype: "linear", dposition: "left" };
                })
              );
            }
            if (options2.scale) {
              items.push({
                options: options2.scale,
                dtype: "radialLinear",
                isDefault: true,
                dposition: "chartArea"
              });
            }
            helpers$1.each(items, function(item) {
              var scaleOptions = item.options;
              var id = scaleOptions.id;
              var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);
              if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
                scaleOptions.position = item.dposition;
              }
              updated[id] = true;
              var scale2 = null;
              if (id in scales2 && scales2[id].type === scaleType) {
                scale2 = scales2[id];
                scale2.options = scaleOptions;
                scale2.ctx = me.ctx;
                scale2.chart = me;
              } else {
                var scaleClass = core_scaleService.getScaleConstructor(scaleType);
                if (!scaleClass) {
                  return;
                }
                scale2 = new scaleClass({
                  id,
                  type: scaleType,
                  options: scaleOptions,
                  ctx: me.ctx,
                  chart: me
                });
                scales2[scale2.id] = scale2;
              }
              scale2.mergeTicksOptions();
              if (item.isDefault) {
                me.scale = scale2;
              }
            });
            helpers$1.each(updated, function(hasUpdated, id) {
              if (!hasUpdated) {
                delete scales2[id];
              }
            });
            me.scales = scales2;
            core_scaleService.addScalesToLayout(this);
          },
          buildOrUpdateControllers: function() {
            var me = this;
            var newControllers = [];
            var datasets = me.data.datasets;
            var i2, ilen;
            for (i2 = 0, ilen = datasets.length; i2 < ilen; i2++) {
              var dataset = datasets[i2];
              var meta = me.getDatasetMeta(i2);
              var type = dataset.type || me.config.type;
              if (meta.type && meta.type !== type) {
                me.destroyDatasetMeta(i2);
                meta = me.getDatasetMeta(i2);
              }
              meta.type = type;
              meta.order = dataset.order || 0;
              meta.index = i2;
              if (meta.controller) {
                meta.controller.updateIndex(i2);
                meta.controller.linkScales();
              } else {
                var ControllerClass = controllers[meta.type];
                if (ControllerClass === void 0) {
                  throw new Error('"' + meta.type + '" is not a chart type.');
                }
                meta.controller = new ControllerClass(me, i2);
                newControllers.push(meta.controller);
              }
            }
            return newControllers;
          },
          /**
           * Reset the elements of all datasets
           * @private
           */
          resetElements: function() {
            var me = this;
            helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
              me.getDatasetMeta(datasetIndex).controller.reset();
            }, me);
          },
          /**
          * Resets the chart back to it's state before the initial animation
          */
          reset: function() {
            this.resetElements();
            this.tooltip.initialize();
          },
          update: function(config) {
            var me = this;
            var i2, ilen;
            if (!config || typeof config !== "object") {
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }
            updateConfig(me);
            core_plugins._invalidate(me);
            if (core_plugins.notify(me, "beforeUpdate") === false) {
              return;
            }
            me.tooltip._data = me.data;
            var newControllers = me.buildOrUpdateControllers();
            for (i2 = 0, ilen = me.data.datasets.length; i2 < ilen; i2++) {
              me.getDatasetMeta(i2).controller.buildOrUpdateElements();
            }
            me.updateLayout();
            if (me.options.animation && me.options.animation.duration) {
              helpers$1.each(newControllers, function(controller) {
                controller.reset();
              });
            }
            me.updateDatasets();
            me.tooltip.initialize();
            me.lastActive = [];
            core_plugins.notify(me, "afterUpdate");
            me._layers.sort(compare2Level("z", "_idx"));
            if (me._bufferedRender) {
              me._bufferedRequest = {
                duration: config.duration,
                easing: config.easing,
                lazy: config.lazy
              };
            } else {
              me.render(config);
            }
          },
          /**
           * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
           * hook, in which case, plugins will not be called on `afterLayout`.
           * @private
           */
          updateLayout: function() {
            var me = this;
            if (core_plugins.notify(me, "beforeLayout") === false) {
              return;
            }
            core_layouts.update(this, this.width, this.height);
            me._layers = [];
            helpers$1.each(me.boxes, function(box) {
              if (box._configure) {
                box._configure();
              }
              me._layers.push.apply(me._layers, box._layers());
            }, me);
            me._layers.forEach(function(item, index) {
              item._idx = index;
            });
            core_plugins.notify(me, "afterScaleUpdate");
            core_plugins.notify(me, "afterLayout");
          },
          /**
           * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
           * @private
           */
          updateDatasets: function() {
            var me = this;
            if (core_plugins.notify(me, "beforeDatasetsUpdate") === false) {
              return;
            }
            for (var i2 = 0, ilen = me.data.datasets.length; i2 < ilen; ++i2) {
              me.updateDataset(i2);
            }
            core_plugins.notify(me, "afterDatasetsUpdate");
          },
          /**
           * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
           * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
           * @private
           */
          updateDataset: function(index) {
            var me = this;
            var meta = me.getDatasetMeta(index);
            var args = {
              meta,
              index
            };
            if (core_plugins.notify(me, "beforeDatasetUpdate", [args]) === false) {
              return;
            }
            meta.controller._update();
            core_plugins.notify(me, "afterDatasetUpdate", [args]);
          },
          render: function(config) {
            var me = this;
            if (!config || typeof config !== "object") {
              config = {
                duration: config,
                lazy: arguments[1]
              };
            }
            var animationOptions = me.options.animation;
            var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
            var lazy = config.lazy;
            if (core_plugins.notify(me, "beforeRender") === false) {
              return;
            }
            var onComplete = function(animation2) {
              core_plugins.notify(me, "afterRender");
              helpers$1.callback(animationOptions && animationOptions.onComplete, [animation2], me);
            };
            if (animationOptions && duration) {
              var animation = new core_animation({
                numSteps: duration / 16.66,
                // 60 fps
                easing: config.easing || animationOptions.easing,
                render: function(chart, animationObject) {
                  var easingFunction = helpers$1.easing.effects[animationObject.easing];
                  var currentStep = animationObject.currentStep;
                  var stepDecimal = currentStep / animationObject.numSteps;
                  chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
                },
                onAnimationProgress: animationOptions.onProgress,
                onAnimationComplete: onComplete
              });
              core_animations.addAnimation(me, animation, duration, lazy);
            } else {
              me.draw();
              onComplete(new core_animation({ numSteps: 0, chart: me }));
            }
            return me;
          },
          draw: function(easingValue) {
            var me = this;
            var i2, layers;
            me.clear();
            if (helpers$1.isNullOrUndef(easingValue)) {
              easingValue = 1;
            }
            me.transition(easingValue);
            if (me.width <= 0 || me.height <= 0) {
              return;
            }
            if (core_plugins.notify(me, "beforeDraw", [easingValue]) === false) {
              return;
            }
            layers = me._layers;
            for (i2 = 0; i2 < layers.length && layers[i2].z <= 0; ++i2) {
              layers[i2].draw(me.chartArea);
            }
            me.drawDatasets(easingValue);
            for (; i2 < layers.length; ++i2) {
              layers[i2].draw(me.chartArea);
            }
            me._drawTooltip(easingValue);
            core_plugins.notify(me, "afterDraw", [easingValue]);
          },
          /**
           * @private
           */
          transition: function(easingValue) {
            var me = this;
            for (var i2 = 0, ilen = (me.data.datasets || []).length; i2 < ilen; ++i2) {
              if (me.isDatasetVisible(i2)) {
                me.getDatasetMeta(i2).controller.transition(easingValue);
              }
            }
            me.tooltip.transition(easingValue);
          },
          /**
           * @private
           */
          _getSortedDatasetMetas: function(filterVisible) {
            var me = this;
            var datasets = me.data.datasets || [];
            var result = [];
            var i2, ilen;
            for (i2 = 0, ilen = datasets.length; i2 < ilen; ++i2) {
              if (!filterVisible || me.isDatasetVisible(i2)) {
                result.push(me.getDatasetMeta(i2));
              }
            }
            result.sort(compare2Level("order", "index"));
            return result;
          },
          /**
           * @private
           */
          _getSortedVisibleDatasetMetas: function() {
            return this._getSortedDatasetMetas(true);
          },
          /**
           * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
           * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
           * @private
           */
          drawDatasets: function(easingValue) {
            var me = this;
            var metasets, i2;
            if (core_plugins.notify(me, "beforeDatasetsDraw", [easingValue]) === false) {
              return;
            }
            metasets = me._getSortedVisibleDatasetMetas();
            for (i2 = metasets.length - 1; i2 >= 0; --i2) {
              me.drawDataset(metasets[i2], easingValue);
            }
            core_plugins.notify(me, "afterDatasetsDraw", [easingValue]);
          },
          /**
           * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
           * hook, in which case, plugins will not be called on `afterDatasetDraw`.
           * @private
           */
          drawDataset: function(meta, easingValue) {
            var me = this;
            var args = {
              meta,
              index: meta.index,
              easingValue
            };
            if (core_plugins.notify(me, "beforeDatasetDraw", [args]) === false) {
              return;
            }
            meta.controller.draw(easingValue);
            core_plugins.notify(me, "afterDatasetDraw", [args]);
          },
          /**
           * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
           * hook, in which case, plugins will not be called on `afterTooltipDraw`.
           * @private
           */
          _drawTooltip: function(easingValue) {
            var me = this;
            var tooltip = me.tooltip;
            var args = {
              tooltip,
              easingValue
            };
            if (core_plugins.notify(me, "beforeTooltipDraw", [args]) === false) {
              return;
            }
            tooltip.draw();
            core_plugins.notify(me, "afterTooltipDraw", [args]);
          },
          /**
           * Get the single element that was clicked on
           * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
           */
          getElementAtEvent: function(e2) {
            return core_interaction.modes.single(this, e2);
          },
          getElementsAtEvent: function(e2) {
            return core_interaction.modes.label(this, e2, { intersect: true });
          },
          getElementsAtXAxis: function(e2) {
            return core_interaction.modes["x-axis"](this, e2, { intersect: true });
          },
          getElementsAtEventForMode: function(e2, mode, options2) {
            var method = core_interaction.modes[mode];
            if (typeof method === "function") {
              return method(this, e2, options2);
            }
            return [];
          },
          getDatasetAtEvent: function(e2) {
            return core_interaction.modes.dataset(this, e2, { intersect: true });
          },
          getDatasetMeta: function(datasetIndex) {
            var me = this;
            var dataset = me.data.datasets[datasetIndex];
            if (!dataset._meta) {
              dataset._meta = {};
            }
            var meta = dataset._meta[me.id];
            if (!meta) {
              meta = dataset._meta[me.id] = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                // See isDatasetVisible() comment
                xAxisID: null,
                yAxisID: null,
                order: dataset.order || 0,
                index: datasetIndex
              };
            }
            return meta;
          },
          getVisibleDatasetCount: function() {
            var count = 0;
            for (var i2 = 0, ilen = this.data.datasets.length; i2 < ilen; ++i2) {
              if (this.isDatasetVisible(i2)) {
                count++;
              }
            }
            return count;
          },
          isDatasetVisible: function(datasetIndex) {
            var meta = this.getDatasetMeta(datasetIndex);
            return typeof meta.hidden === "boolean" ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
          },
          generateLegend: function() {
            return this.options.legendCallback(this);
          },
          /**
           * @private
           */
          destroyDatasetMeta: function(datasetIndex) {
            var id = this.id;
            var dataset = this.data.datasets[datasetIndex];
            var meta = dataset._meta && dataset._meta[id];
            if (meta) {
              meta.controller.destroy();
              delete dataset._meta[id];
            }
          },
          destroy: function() {
            var me = this;
            var canvas2 = me.canvas;
            var i2, ilen;
            me.stop();
            for (i2 = 0, ilen = me.data.datasets.length; i2 < ilen; ++i2) {
              me.destroyDatasetMeta(i2);
            }
            if (canvas2) {
              me.unbindEvents();
              helpers$1.canvas.clear(me);
              platform.releaseContext(me.ctx);
              me.canvas = null;
              me.ctx = null;
            }
            core_plugins.notify(me, "destroy");
            delete Chart.instances[me.id];
          },
          toBase64Image: function() {
            return this.canvas.toDataURL.apply(this.canvas, arguments);
          },
          initToolTip: function() {
            var me = this;
            me.tooltip = new core_tooltip({
              _chart: me,
              _chartInstance: me,
              // deprecated, backward compatibility
              _data: me.data,
              _options: me.options.tooltips
            }, me);
          },
          /**
           * @private
           */
          bindEvents: function() {
            var me = this;
            var listeners = me._listeners = {};
            var listener = function() {
              me.eventHandler.apply(me, arguments);
            };
            helpers$1.each(me.options.events, function(type) {
              platform.addEventListener(me, type, listener);
              listeners[type] = listener;
            });
            if (me.options.responsive) {
              listener = function() {
                me.resize();
              };
              platform.addEventListener(me, "resize", listener);
              listeners.resize = listener;
            }
          },
          /**
           * @private
           */
          unbindEvents: function() {
            var me = this;
            var listeners = me._listeners;
            if (!listeners) {
              return;
            }
            delete me._listeners;
            helpers$1.each(listeners, function(listener, type) {
              platform.removeEventListener(me, type, listener);
            });
          },
          updateHoverStyle: function(elements2, mode, enabled) {
            var prefix = enabled ? "set" : "remove";
            var element, i2, ilen;
            for (i2 = 0, ilen = elements2.length; i2 < ilen; ++i2) {
              element = elements2[i2];
              if (element) {
                this.getDatasetMeta(element._datasetIndex).controller[prefix + "HoverStyle"](element);
              }
            }
            if (mode === "dataset") {
              this.getDatasetMeta(elements2[0]._datasetIndex).controller["_" + prefix + "DatasetHoverStyle"]();
            }
          },
          /**
           * @private
           */
          eventHandler: function(e2) {
            var me = this;
            var tooltip = me.tooltip;
            if (core_plugins.notify(me, "beforeEvent", [e2]) === false) {
              return;
            }
            me._bufferedRender = true;
            me._bufferedRequest = null;
            var changed = me.handleEvent(e2);
            if (tooltip) {
              changed = tooltip._start ? tooltip.handleEvent(e2) : changed | tooltip.handleEvent(e2);
            }
            core_plugins.notify(me, "afterEvent", [e2]);
            var bufferedRequest = me._bufferedRequest;
            if (bufferedRequest) {
              me.render(bufferedRequest);
            } else if (changed && !me.animating) {
              me.stop();
              me.render({
                duration: me.options.hover.animationDuration,
                lazy: true
              });
            }
            me._bufferedRender = false;
            me._bufferedRequest = null;
            return me;
          },
          /**
           * Handle an event
           * @private
           * @param {IEvent} event the event to handle
           * @return {boolean} true if the chart needs to re-render
           */
          handleEvent: function(e2) {
            var me = this;
            var options2 = me.options || {};
            var hoverOptions = options2.hover;
            var changed = false;
            me.lastActive = me.lastActive || [];
            if (e2.type === "mouseout") {
              me.active = [];
            } else {
              me.active = me.getElementsAtEventForMode(e2, hoverOptions.mode, hoverOptions);
            }
            helpers$1.callback(options2.onHover || options2.hover.onHover, [e2.native, me.active], me);
            if (e2.type === "mouseup" || e2.type === "click") {
              if (options2.onClick) {
                options2.onClick.call(me, e2.native, me.active);
              }
            }
            if (me.lastActive.length) {
              me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
            }
            if (me.active.length && hoverOptions.mode) {
              me.updateHoverStyle(me.active, hoverOptions.mode, true);
            }
            changed = !helpers$1.arrayEquals(me.active, me.lastActive);
            me.lastActive = me.active;
            return changed;
          }
        }
      );
      Chart.instances = {};
      var core_controller = Chart;
      Chart.Controller = Chart;
      Chart.types = {};
      helpers$1.configMerge = mergeConfig;
      helpers$1.scaleMerge = mergeScaleConfig;
      var core_helpers = function() {
        helpers$1.where = function(collection, filterCallback) {
          if (helpers$1.isArray(collection) && Array.prototype.filter) {
            return collection.filter(filterCallback);
          }
          var filtered = [];
          helpers$1.each(collection, function(item) {
            if (filterCallback(item)) {
              filtered.push(item);
            }
          });
          return filtered;
        };
        helpers$1.findIndex = Array.prototype.findIndex ? function(array, callback, scope) {
          return array.findIndex(callback, scope);
        } : function(array, callback, scope) {
          scope = scope === void 0 ? array : scope;
          for (var i2 = 0, ilen = array.length; i2 < ilen; ++i2) {
            if (callback.call(scope, array[i2], i2, array)) {
              return i2;
            }
          }
          return -1;
        };
        helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
          if (helpers$1.isNullOrUndef(startIndex)) {
            startIndex = -1;
          }
          for (var i2 = startIndex + 1; i2 < arrayToSearch.length; i2++) {
            var currentItem = arrayToSearch[i2];
            if (filterCallback(currentItem)) {
              return currentItem;
            }
          }
        };
        helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
          if (helpers$1.isNullOrUndef(startIndex)) {
            startIndex = arrayToSearch.length;
          }
          for (var i2 = startIndex - 1; i2 >= 0; i2--) {
            var currentItem = arrayToSearch[i2];
            if (filterCallback(currentItem)) {
              return currentItem;
            }
          }
        };
        helpers$1.isNumber = function(n2) {
          return !isNaN(parseFloat(n2)) && isFinite(n2);
        };
        helpers$1.almostEquals = function(x, y2, epsilon) {
          return Math.abs(x - y2) < epsilon;
        };
        helpers$1.almostWhole = function(x, epsilon) {
          var rounded = Math.round(x);
          return rounded - epsilon <= x && rounded + epsilon >= x;
        };
        helpers$1.max = function(array) {
          return array.reduce(function(max, value) {
            if (!isNaN(value)) {
              return Math.max(max, value);
            }
            return max;
          }, Number.NEGATIVE_INFINITY);
        };
        helpers$1.min = function(array) {
          return array.reduce(function(min, value) {
            if (!isNaN(value)) {
              return Math.min(min, value);
            }
            return min;
          }, Number.POSITIVE_INFINITY);
        };
        helpers$1.sign = Math.sign ? function(x) {
          return Math.sign(x);
        } : function(x) {
          x = +x;
          if (x === 0 || isNaN(x)) {
            return x;
          }
          return x > 0 ? 1 : -1;
        };
        helpers$1.toRadians = function(degrees) {
          return degrees * (Math.PI / 180);
        };
        helpers$1.toDegrees = function(radians) {
          return radians * (180 / Math.PI);
        };
        helpers$1._decimalPlaces = function(x) {
          if (!helpers$1.isFinite(x)) {
            return;
          }
          var e2 = 1;
          var p2 = 0;
          while (Math.round(x * e2) / e2 !== x) {
            e2 *= 10;
            p2++;
          }
          return p2;
        };
        helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
          var distanceFromXCenter = anglePoint.x - centrePoint.x;
          var distanceFromYCenter = anglePoint.y - centrePoint.y;
          var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
          var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
          if (angle < -0.5 * Math.PI) {
            angle += 2 * Math.PI;
          }
          return {
            angle,
            distance: radialDistanceFromCenter
          };
        };
        helpers$1.distanceBetweenPoints = function(pt1, pt2) {
          return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
        };
        helpers$1.aliasPixel = function(pixelWidth) {
          return pixelWidth % 2 === 0 ? 0 : 0.5;
        };
        helpers$1._alignPixel = function(chart, pixel, width) {
          var devicePixelRatio = chart.currentDevicePixelRatio;
          var halfWidth = width / 2;
          return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
        };
        helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t2) {
          var previous = firstPoint.skip ? middlePoint : firstPoint;
          var current = middlePoint;
          var next = afterPoint.skip ? middlePoint : afterPoint;
          var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
          var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
          var s01 = d01 / (d01 + d12);
          var s12 = d12 / (d01 + d12);
          s01 = isNaN(s01) ? 0 : s01;
          s12 = isNaN(s12) ? 0 : s12;
          var fa = t2 * s01;
          var fb = t2 * s12;
          return {
            previous: {
              x: current.x - fa * (next.x - previous.x),
              y: current.y - fa * (next.y - previous.y)
            },
            next: {
              x: current.x + fb * (next.x - previous.x),
              y: current.y + fb * (next.y - previous.y)
            }
          };
        };
        helpers$1.EPSILON = Number.EPSILON || 1e-14;
        helpers$1.splineCurveMonotone = function(points) {
          var pointsWithTangents = (points || []).map(function(point) {
            return {
              model: point._model,
              deltaK: 0,
              mK: 0
            };
          });
          var pointsLen = pointsWithTangents.length;
          var i2, pointBefore, pointCurrent, pointAfter;
          for (i2 = 0; i2 < pointsLen; ++i2) {
            pointCurrent = pointsWithTangents[i2];
            if (pointCurrent.model.skip) {
              continue;
            }
            pointBefore = i2 > 0 ? pointsWithTangents[i2 - 1] : null;
            pointAfter = i2 < pointsLen - 1 ? pointsWithTangents[i2 + 1] : null;
            if (pointAfter && !pointAfter.model.skip) {
              var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
              pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
            }
            if (!pointBefore || pointBefore.model.skip) {
              pointCurrent.mK = pointCurrent.deltaK;
            } else if (!pointAfter || pointAfter.model.skip) {
              pointCurrent.mK = pointBefore.deltaK;
            } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
              pointCurrent.mK = 0;
            } else {
              pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
            }
          }
          var alphaK, betaK, tauK, squaredMagnitude;
          for (i2 = 0; i2 < pointsLen - 1; ++i2) {
            pointCurrent = pointsWithTangents[i2];
            pointAfter = pointsWithTangents[i2 + 1];
            if (pointCurrent.model.skip || pointAfter.model.skip) {
              continue;
            }
            if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
              pointCurrent.mK = pointAfter.mK = 0;
              continue;
            }
            alphaK = pointCurrent.mK / pointCurrent.deltaK;
            betaK = pointAfter.mK / pointCurrent.deltaK;
            squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
            if (squaredMagnitude <= 9) {
              continue;
            }
            tauK = 3 / Math.sqrt(squaredMagnitude);
            pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
            pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
          }
          var deltaX;
          for (i2 = 0; i2 < pointsLen; ++i2) {
            pointCurrent = pointsWithTangents[i2];
            if (pointCurrent.model.skip) {
              continue;
            }
            pointBefore = i2 > 0 ? pointsWithTangents[i2 - 1] : null;
            pointAfter = i2 < pointsLen - 1 ? pointsWithTangents[i2 + 1] : null;
            if (pointBefore && !pointBefore.model.skip) {
              deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
              pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
              pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
            }
            if (pointAfter && !pointAfter.model.skip) {
              deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
              pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
              pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
            }
          }
        };
        helpers$1.nextItem = function(collection, index, loop) {
          if (loop) {
            return index >= collection.length - 1 ? collection[0] : collection[index + 1];
          }
          return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
        };
        helpers$1.previousItem = function(collection, index, loop) {
          if (loop) {
            return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
          }
          return index <= 0 ? collection[0] : collection[index - 1];
        };
        helpers$1.niceNum = function(range, round) {
          var exponent = Math.floor(helpers$1.log10(range));
          var fraction = range / Math.pow(10, exponent);
          var niceFraction;
          if (round) {
            if (fraction < 1.5) {
              niceFraction = 1;
            } else if (fraction < 3) {
              niceFraction = 2;
            } else if (fraction < 7) {
              niceFraction = 5;
            } else {
              niceFraction = 10;
            }
          } else if (fraction <= 1) {
            niceFraction = 1;
          } else if (fraction <= 2) {
            niceFraction = 2;
          } else if (fraction <= 5) {
            niceFraction = 5;
          } else {
            niceFraction = 10;
          }
          return niceFraction * Math.pow(10, exponent);
        };
        helpers$1.requestAnimFrame = function() {
          if (typeof window === "undefined") {
            return function(callback) {
              callback();
            };
          }
          return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
            return window.setTimeout(callback, 1e3 / 60);
          };
        }();
        helpers$1.getRelativePosition = function(evt, chart) {
          var mouseX, mouseY;
          var e2 = evt.originalEvent || evt;
          var canvas2 = evt.target || evt.srcElement;
          var boundingRect = canvas2.getBoundingClientRect();
          var touches = e2.touches;
          if (touches && touches.length > 0) {
            mouseX = touches[0].clientX;
            mouseY = touches[0].clientY;
          } else {
            mouseX = e2.clientX;
            mouseY = e2.clientY;
          }
          var paddingLeft = parseFloat(helpers$1.getStyle(canvas2, "padding-left"));
          var paddingTop = parseFloat(helpers$1.getStyle(canvas2, "padding-top"));
          var paddingRight = parseFloat(helpers$1.getStyle(canvas2, "padding-right"));
          var paddingBottom = parseFloat(helpers$1.getStyle(canvas2, "padding-bottom"));
          var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
          var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
          mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas2.width / chart.currentDevicePixelRatio);
          mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas2.height / chart.currentDevicePixelRatio);
          return {
            x: mouseX,
            y: mouseY
          };
        };
        function parseMaxStyle(styleValue, node, parentProperty) {
          var valueInPixels;
          if (typeof styleValue === "string") {
            valueInPixels = parseInt(styleValue, 10);
            if (styleValue.indexOf("%") !== -1) {
              valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
            }
          } else {
            valueInPixels = styleValue;
          }
          return valueInPixels;
        }
        function isConstrainedValue(value) {
          return value !== void 0 && value !== null && value !== "none";
        }
        function getConstraintDimension(domNode, maxStyle, percentageProperty) {
          var view = document.defaultView;
          var parentNode = helpers$1._getParentNode(domNode);
          var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
          var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
          var hasCNode = isConstrainedValue(constrainedNode);
          var hasCContainer = isConstrainedValue(constrainedContainer);
          var infinity = Number.POSITIVE_INFINITY;
          if (hasCNode || hasCContainer) {
            return Math.min(
              hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
              hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity
            );
          }
          return "none";
        }
        helpers$1.getConstraintWidth = function(domNode) {
          return getConstraintDimension(domNode, "max-width", "clientWidth");
        };
        helpers$1.getConstraintHeight = function(domNode) {
          return getConstraintDimension(domNode, "max-height", "clientHeight");
        };
        helpers$1._calculatePadding = function(container, padding, parentDimension) {
          padding = helpers$1.getStyle(container, padding);
          return padding.indexOf("%") > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
        };
        helpers$1._getParentNode = function(domNode) {
          var parent = domNode.parentNode;
          if (parent && parent.toString() === "[object ShadowRoot]") {
            parent = parent.host;
          }
          return parent;
        };
        helpers$1.getMaximumWidth = function(domNode) {
          var container = helpers$1._getParentNode(domNode);
          if (!container) {
            return domNode.clientWidth;
          }
          var clientWidth = container.clientWidth;
          var paddingLeft = helpers$1._calculatePadding(container, "padding-left", clientWidth);
          var paddingRight = helpers$1._calculatePadding(container, "padding-right", clientWidth);
          var w2 = clientWidth - paddingLeft - paddingRight;
          var cw = helpers$1.getConstraintWidth(domNode);
          return isNaN(cw) ? w2 : Math.min(w2, cw);
        };
        helpers$1.getMaximumHeight = function(domNode) {
          var container = helpers$1._getParentNode(domNode);
          if (!container) {
            return domNode.clientHeight;
          }
          var clientHeight = container.clientHeight;
          var paddingTop = helpers$1._calculatePadding(container, "padding-top", clientHeight);
          var paddingBottom = helpers$1._calculatePadding(container, "padding-bottom", clientHeight);
          var h2 = clientHeight - paddingTop - paddingBottom;
          var ch = helpers$1.getConstraintHeight(domNode);
          return isNaN(ch) ? h2 : Math.min(h2, ch);
        };
        helpers$1.getStyle = function(el, property) {
          return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
        };
        helpers$1.retinaScale = function(chart, forceRatio) {
          var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== "undefined" && window.devicePixelRatio || 1;
          if (pixelRatio === 1) {
            return;
          }
          var canvas2 = chart.canvas;
          var height = chart.height;
          var width = chart.width;
          canvas2.height = height * pixelRatio;
          canvas2.width = width * pixelRatio;
          chart.ctx.scale(pixelRatio, pixelRatio);
          if (!canvas2.style.height && !canvas2.style.width) {
            canvas2.style.height = height + "px";
            canvas2.style.width = width + "px";
          }
        };
        helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
          return fontStyle + " " + pixelSize + "px " + fontFamily;
        };
        helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
          cache = cache || {};
          var data = cache.data = cache.data || {};
          var gc = cache.garbageCollect = cache.garbageCollect || [];
          if (cache.font !== font) {
            data = cache.data = {};
            gc = cache.garbageCollect = [];
            cache.font = font;
          }
          ctx.font = font;
          var longest = 0;
          var ilen = arrayOfThings.length;
          var i2, j2, jlen, thing, nestedThing;
          for (i2 = 0; i2 < ilen; i2++) {
            thing = arrayOfThings[i2];
            if (thing !== void 0 && thing !== null && helpers$1.isArray(thing) !== true) {
              longest = helpers$1.measureText(ctx, data, gc, longest, thing);
            } else if (helpers$1.isArray(thing)) {
              for (j2 = 0, jlen = thing.length; j2 < jlen; j2++) {
                nestedThing = thing[j2];
                if (nestedThing !== void 0 && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
                  longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
                }
              }
            }
          }
          var gcLen = gc.length / 2;
          if (gcLen > arrayOfThings.length) {
            for (i2 = 0; i2 < gcLen; i2++) {
              delete data[gc[i2]];
            }
            gc.splice(0, gcLen);
          }
          return longest;
        };
        helpers$1.measureText = function(ctx, data, gc, longest, string) {
          var textWidth = data[string];
          if (!textWidth) {
            textWidth = data[string] = ctx.measureText(string).width;
            gc.push(string);
          }
          if (textWidth > longest) {
            longest = textWidth;
          }
          return longest;
        };
        helpers$1.numberOfLabelLines = function(arrayOfThings) {
          var numberOfLines = 1;
          helpers$1.each(arrayOfThings, function(thing) {
            if (helpers$1.isArray(thing)) {
              if (thing.length > numberOfLines) {
                numberOfLines = thing.length;
              }
            }
          });
          return numberOfLines;
        };
        helpers$1.color = !chartjsColor ? function(value) {
          console.error("Color.js not found!");
          return value;
        } : function(value) {
          if (value instanceof CanvasGradient) {
            value = core_defaults.global.defaultColor;
          }
          return chartjsColor(value);
        };
        helpers$1.getHoverColor = function(colorValue) {
          return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
        };
      };
      function abstract() {
        throw new Error(
          "This method is not implemented: either no adapter can be found or an incomplete integration was provided."
        );
      }
      function DateAdapter(options2) {
        this.options = options2 || {};
      }
      helpers$1.extend(
        DateAdapter.prototype,
        /** @lends DateAdapter */
        {
          /**
           * Returns a map of time formats for the supported formatting units defined
           * in Unit as well as 'datetime' representing a detailed date/time string.
           * @returns {{string: string}}
           */
          formats: abstract,
          /**
           * Parses the given `value` and return the associated timestamp.
           * @param {any} value - the value to parse (usually comes from the data)
           * @param {string} [format] - the expected data format
           * @returns {(number|null)}
           * @function
           */
          parse: abstract,
          /**
           * Returns the formatted date in the specified `format` for a given `timestamp`.
           * @param {number} timestamp - the timestamp to format
           * @param {string} format - the date/time token
           * @return {string}
           * @function
           */
          format: abstract,
          /**
           * Adds the specified `amount` of `unit` to the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {number} amount - the amount to add
           * @param {Unit} unit - the unit as string
           * @return {number}
           * @function
           */
          add: abstract,
          /**
           * Returns the number of `unit` between the given timestamps.
           * @param {number} max - the input timestamp (reference)
           * @param {number} min - the timestamp to substract
           * @param {Unit} unit - the unit as string
           * @return {number}
           * @function
           */
          diff: abstract,
          /**
           * Returns start of `unit` for the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {Unit} unit - the unit as string
           * @param {number} [weekday] - the ISO day of the week with 1 being Monday
           * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
           * @function
           */
          startOf: abstract,
          /**
           * Returns end of `unit` for the given `timestamp`.
           * @param {number} timestamp - the input timestamp
           * @param {Unit} unit - the unit as string
           * @function
           */
          endOf: abstract,
          // DEPRECATIONS
          /**
           * Provided for backward compatibility for scale.getValueForPixel(),
           * this method should be overridden only by the moment adapter.
           * @deprecated since version 2.8.0
           * @todo remove at version 3
           * @private
           */
          _create: function(value) {
            return value;
          }
        }
      );
      DateAdapter.override = function(members) {
        helpers$1.extend(DateAdapter.prototype, members);
      };
      var _date = DateAdapter;
      var core_adapters = {
        _date
      };
      var core_ticks = {
        /**
         * Namespace to hold formatters for different types of ticks
         * @namespace Chart.Ticks.formatters
         */
        formatters: {
          /**
           * Formatter for value labels
           * @method Chart.Ticks.formatters.values
           * @param value the value to display
           * @return {string|string[]} the label to display
           */
          values: function(value) {
            return helpers$1.isArray(value) ? value : "" + value;
          },
          /**
           * Formatter for linear numeric ticks
           * @method Chart.Ticks.formatters.linear
           * @param tickValue {number} the value to be formatted
           * @param index {number} the position of the tickValue parameter in the ticks array
           * @param ticks {number[]} the list of ticks being converted
           * @return {string} string representation of the tickValue parameter
           */
          linear: function(tickValue, index, ticks) {
            var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
            if (Math.abs(delta) > 1) {
              if (tickValue !== Math.floor(tickValue)) {
                delta = tickValue - Math.floor(tickValue);
              }
            }
            var logDelta = helpers$1.log10(Math.abs(delta));
            var tickString = "";
            if (tickValue !== 0) {
              var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
              if (maxTick < 1e-4) {
                var logTick = helpers$1.log10(Math.abs(tickValue));
                var numExponential = Math.floor(logTick) - Math.floor(logDelta);
                numExponential = Math.max(Math.min(numExponential, 20), 0);
                tickString = tickValue.toExponential(numExponential);
              } else {
                var numDecimal = -1 * Math.floor(logDelta);
                numDecimal = Math.max(Math.min(numDecimal, 20), 0);
                tickString = tickValue.toFixed(numDecimal);
              }
            } else {
              tickString = "0";
            }
            return tickString;
          },
          logarithmic: function(tickValue, index, ticks) {
            var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));
            if (tickValue === 0) {
              return "0";
            } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
              return tickValue.toExponential();
            }
            return "";
          }
        }
      };
      var isArray = helpers$1.isArray;
      var isNullOrUndef = helpers$1.isNullOrUndef;
      var valueOrDefault$a = helpers$1.valueOrDefault;
      var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;
      core_defaults._set("scale", {
        display: true,
        position: "left",
        offset: false,
        // grid line settings
        gridLines: {
          display: true,
          color: "rgba(0,0,0,0.1)",
          lineWidth: 1,
          drawBorder: true,
          drawOnChartArea: true,
          drawTicks: true,
          tickMarkLength: 10,
          zeroLineWidth: 1,
          zeroLineColor: "rgba(0,0,0,0.25)",
          zeroLineBorderDash: [],
          zeroLineBorderDashOffset: 0,
          offsetGridLines: false,
          borderDash: [],
          borderDashOffset: 0
        },
        // scale label
        scaleLabel: {
          // display property
          display: false,
          // actual label
          labelString: "",
          // top/bottom padding
          padding: {
            top: 4,
            bottom: 4
          }
        },
        // label settings
        ticks: {
          beginAtZero: false,
          minRotation: 0,
          maxRotation: 50,
          mirror: false,
          padding: 0,
          reverse: false,
          display: true,
          autoSkip: true,
          autoSkipPadding: 0,
          labelOffset: 0,
          // We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
          callback: core_ticks.formatters.values,
          minor: {},
          major: {}
        }
      });
      function sample(arr, numItems) {
        var result = [];
        var increment = arr.length / numItems;
        var i2 = 0;
        var len = arr.length;
        for (; i2 < len; i2 += increment) {
          result.push(arr[Math.floor(i2)]);
        }
        return result;
      }
      function getPixelForGridLine(scale2, index, offsetGridLines) {
        var length = scale2.getTicks().length;
        var validIndex = Math.min(index, length - 1);
        var lineValue = scale2.getPixelForTick(validIndex);
        var start = scale2._startPixel;
        var end = scale2._endPixel;
        var epsilon = 1e-6;
        var offset;
        if (offsetGridLines) {
          if (length === 1) {
            offset = Math.max(lineValue - start, end - lineValue);
          } else if (index === 0) {
            offset = (scale2.getPixelForTick(1) - lineValue) / 2;
          } else {
            offset = (lineValue - scale2.getPixelForTick(validIndex - 1)) / 2;
          }
          lineValue += validIndex < index ? offset : -offset;
          if (lineValue < start - epsilon || lineValue > end + epsilon) {
            return;
          }
        }
        return lineValue;
      }
      function garbageCollect(caches, length) {
        helpers$1.each(caches, function(cache) {
          var gc = cache.gc;
          var gcLen = gc.length / 2;
          var i2;
          if (gcLen > length) {
            for (i2 = 0; i2 < gcLen; ++i2) {
              delete cache.data[gc[i2]];
            }
            gc.splice(0, gcLen);
          }
        });
      }
      function computeLabelSizes(ctx, tickFonts, ticks, caches) {
        var length = ticks.length;
        var widths = [];
        var heights = [];
        var offsets = [];
        var widestLabelSize = 0;
        var highestLabelSize = 0;
        var i2, j2, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;
        for (i2 = 0; i2 < length; ++i2) {
          label = ticks[i2].label;
          tickFont = ticks[i2].major ? tickFonts.major : tickFonts.minor;
          ctx.font = fontString = tickFont.string;
          cache = caches[fontString] = caches[fontString] || { data: {}, gc: [] };
          lineHeight = tickFont.lineHeight;
          width = height = 0;
          if (!isNullOrUndef(label) && !isArray(label)) {
            width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
            height = lineHeight;
          } else if (isArray(label)) {
            for (j2 = 0, jlen = label.length; j2 < jlen; ++j2) {
              nestedLabel = label[j2];
              if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
                width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                height += lineHeight;
              }
            }
          }
          widths.push(width);
          heights.push(height);
          offsets.push(lineHeight / 2);
          widestLabelSize = Math.max(width, widestLabelSize);
          highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        widest = widths.indexOf(widestLabelSize);
        highest = heights.indexOf(highestLabelSize);
        function valueAt(idx) {
          return {
            width: widths[idx] || 0,
            height: heights[idx] || 0,
            offset: offsets[idx] || 0
          };
        }
        return {
          first: valueAt(0),
          last: valueAt(length - 1),
          widest: valueAt(widest),
          highest: valueAt(highest)
        };
      }
      function getTickMarkLength(options2) {
        return options2.drawTicks ? options2.tickMarkLength : 0;
      }
      function getScaleLabelHeight(options2) {
        var font, padding;
        if (!options2.display) {
          return 0;
        }
        font = helpers$1.options._parseFont(options2);
        padding = helpers$1.options.toPadding(options2.padding);
        return font.lineHeight + padding.height;
      }
      function parseFontOptions(options2, nestedOpts) {
        return helpers$1.extend(helpers$1.options._parseFont({
          fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options2.fontFamily),
          fontSize: valueOrDefault$a(nestedOpts.fontSize, options2.fontSize),
          fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options2.fontStyle),
          lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options2.lineHeight)
        }), {
          color: helpers$1.options.resolve([nestedOpts.fontColor, options2.fontColor, core_defaults.global.defaultFontColor])
        });
      }
      function parseTickFontOptions(options2) {
        var minor = parseFontOptions(options2, options2.minor);
        var major = options2.major.enabled ? parseFontOptions(options2, options2.major) : minor;
        return { minor, major };
      }
      function nonSkipped(ticksToFilter) {
        var filtered = [];
        var item, index, len;
        for (index = 0, len = ticksToFilter.length; index < len; ++index) {
          item = ticksToFilter[index];
          if (typeof item._index !== "undefined") {
            filtered.push(item);
          }
        }
        return filtered;
      }
      function getEvenSpacing(arr) {
        var len = arr.length;
        var i2, diff;
        if (len < 2) {
          return false;
        }
        for (diff = arr[0], i2 = 1; i2 < len; ++i2) {
          if (arr[i2] - arr[i2 - 1] !== diff) {
            return false;
          }
        }
        return diff;
      }
      function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
        var evenMajorSpacing = getEvenSpacing(majorIndices);
        var spacing = (ticks.length - 1) / ticksLimit;
        var factors, factor, i2, ilen;
        if (!evenMajorSpacing) {
          return Math.max(spacing, 1);
        }
        factors = helpers$1.math._factorize(evenMajorSpacing);
        for (i2 = 0, ilen = factors.length - 1; i2 < ilen; i2++) {
          factor = factors[i2];
          if (factor > spacing) {
            return factor;
          }
        }
        return Math.max(spacing, 1);
      }
      function getMajorIndices(ticks) {
        var result = [];
        var i2, ilen;
        for (i2 = 0, ilen = ticks.length; i2 < ilen; i2++) {
          if (ticks[i2].major) {
            result.push(i2);
          }
        }
        return result;
      }
      function skipMajors(ticks, majorIndices, spacing) {
        var count = 0;
        var next = majorIndices[0];
        var i2, tick;
        spacing = Math.ceil(spacing);
        for (i2 = 0; i2 < ticks.length; i2++) {
          tick = ticks[i2];
          if (i2 === next) {
            tick._index = i2;
            count++;
            next = majorIndices[count * spacing];
          } else {
            delete tick.label;
          }
        }
      }
      function skip(ticks, spacing, majorStart, majorEnd) {
        var start = valueOrDefault$a(majorStart, 0);
        var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
        var count = 0;
        var length, i2, tick, next;
        spacing = Math.ceil(spacing);
        if (majorEnd) {
          length = majorEnd - majorStart;
          spacing = length / Math.floor(length / spacing);
        }
        next = start;
        while (next < 0) {
          count++;
          next = Math.round(start + count * spacing);
        }
        for (i2 = Math.max(start, 0); i2 < end; i2++) {
          tick = ticks[i2];
          if (i2 === next) {
            tick._index = i2;
            count++;
            next = Math.round(start + count * spacing);
          } else {
            delete tick.label;
          }
        }
      }
      var Scale = core_element.extend({
        zeroLineIndex: 0,
        /**
         * Get the padding needed for the scale
         * @method getPadding
         * @private
         * @returns {Padding} the necessary padding
         */
        getPadding: function() {
          var me = this;
          return {
            left: me.paddingLeft || 0,
            top: me.paddingTop || 0,
            right: me.paddingRight || 0,
            bottom: me.paddingBottom || 0
          };
        },
        /**
         * Returns the scale tick objects ({label, major})
         * @since 2.7
         */
        getTicks: function() {
          return this._ticks;
        },
        /**
        * @private
        */
        _getLabels: function() {
          var data = this.chart.data;
          return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
        },
        // These methods are ordered by lifecyle. Utilities then follow.
        // Any function defined here is inherited by all scale types.
        // Any function can be extended by the scale type
        /**
         * Provided for backward compatibility, not available anymore
         * @function Chart.Scale.mergeTicksOptions
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         */
        mergeTicksOptions: function() {
        },
        beforeUpdate: function() {
          helpers$1.callback(this.options.beforeUpdate, [this]);
        },
        /**
         * @param {number} maxWidth - the max width in pixels
         * @param {number} maxHeight - the max height in pixels
         * @param {object} margins - the space between the edge of the other scales and edge of the chart
         *   This space comes from two sources:
         *     - padding - space that's required to show the labels at the edges of the scale
         *     - thickness of scales or legends in another orientation
         */
        update: function(maxWidth, maxHeight, margins) {
          var me = this;
          var tickOpts = me.options.ticks;
          var sampleSize = tickOpts.sampleSize;
          var i2, ilen, labels, ticks, samplingEnabled;
          me.beforeUpdate();
          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = helpers$1.extend({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
          }, margins);
          me._ticks = null;
          me.ticks = null;
          me._labelSizes = null;
          me._maxLabelLines = 0;
          me.longestLabelWidth = 0;
          me.longestTextCache = me.longestTextCache || {};
          me._gridLineItems = null;
          me._labelItems = null;
          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions();
          me.beforeDataLimits();
          me.determineDataLimits();
          me.afterDataLimits();
          me.beforeBuildTicks();
          ticks = me.buildTicks() || [];
          ticks = me.afterBuildTicks(ticks) || ticks;
          if ((!ticks || !ticks.length) && me.ticks) {
            ticks = [];
            for (i2 = 0, ilen = me.ticks.length; i2 < ilen; ++i2) {
              ticks.push({
                value: me.ticks[i2],
                major: false
              });
            }
          }
          me._ticks = ticks;
          samplingEnabled = sampleSize < ticks.length;
          labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);
          me._configure();
          me.beforeCalculateTickRotation();
          me.calculateTickRotation();
          me.afterCalculateTickRotation();
          me.beforeFit();
          me.fit();
          me.afterFit();
          me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto") ? me._autoSkip(ticks) : ticks;
          if (samplingEnabled) {
            labels = me._convertTicksToLabels(me._ticksToDraw);
          }
          me.ticks = labels;
          me.afterUpdate();
          return me.minSize;
        },
        /**
         * @private
         */
        _configure: function() {
          var me = this;
          var reversePixels = me.options.ticks.reverse;
          var startPixel, endPixel;
          if (me.isHorizontal()) {
            startPixel = me.left;
            endPixel = me.right;
          } else {
            startPixel = me.top;
            endPixel = me.bottom;
            reversePixels = !reversePixels;
          }
          me._startPixel = startPixel;
          me._endPixel = endPixel;
          me._reversePixels = reversePixels;
          me._length = endPixel - startPixel;
        },
        afterUpdate: function() {
          helpers$1.callback(this.options.afterUpdate, [this]);
        },
        //
        beforeSetDimensions: function() {
          helpers$1.callback(this.options.beforeSetDimensions, [this]);
        },
        setDimensions: function() {
          var me = this;
          if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
          }
          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0;
        },
        afterSetDimensions: function() {
          helpers$1.callback(this.options.afterSetDimensions, [this]);
        },
        // Data limits
        beforeDataLimits: function() {
          helpers$1.callback(this.options.beforeDataLimits, [this]);
        },
        determineDataLimits: helpers$1.noop,
        afterDataLimits: function() {
          helpers$1.callback(this.options.afterDataLimits, [this]);
        },
        //
        beforeBuildTicks: function() {
          helpers$1.callback(this.options.beforeBuildTicks, [this]);
        },
        buildTicks: helpers$1.noop,
        afterBuildTicks: function(ticks) {
          var me = this;
          if (isArray(ticks) && ticks.length) {
            return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
          }
          me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
          return ticks;
        },
        beforeTickToLabelConversion: function() {
          helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
        },
        convertTicksToLabels: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
        },
        afterTickToLabelConversion: function() {
          helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
        },
        //
        beforeCalculateTickRotation: function() {
          helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
        },
        calculateTickRotation: function() {
          var me = this;
          var options2 = me.options;
          var tickOpts = options2.ticks;
          var numTicks = me.getTicks().length;
          var minRotation = tickOpts.minRotation || 0;
          var maxRotation = tickOpts.maxRotation;
          var labelRotation = minRotation;
          var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;
          if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
            me.labelRotation = minRotation;
            return;
          }
          labelSizes = me._getLabelSizes();
          maxLabelWidth = labelSizes.widest.width;
          maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;
          maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
          tickWidth = options2.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);
          if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options2.offset ? 0.5 : 1));
            maxHeight = me.maxHeight - getTickMarkLength(options2.gridLines) - tickOpts.padding - getScaleLabelHeight(options2.scaleLabel);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = helpers$1.toDegrees(Math.min(
              Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
              Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
            ));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
          }
          me.labelRotation = labelRotation;
        },
        afterCalculateTickRotation: function() {
          helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
        },
        //
        beforeFit: function() {
          helpers$1.callback(this.options.beforeFit, [this]);
        },
        fit: function() {
          var me = this;
          var minSize = me.minSize = {
            width: 0,
            height: 0
          };
          var chart = me.chart;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var scaleLabelOpts = opts.scaleLabel;
          var gridLineOpts = opts.gridLines;
          var display = me._isVisible();
          var isBottom = opts.position === "bottom";
          var isHorizontal = me.isHorizontal();
          if (isHorizontal) {
            minSize.width = me.maxWidth;
          } else if (display) {
            minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
          }
          if (!isHorizontal) {
            minSize.height = me.maxHeight;
          } else if (display) {
            minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
          }
          if (tickOpts.display && display) {
            var tickFonts = parseTickFontOptions(tickOpts);
            var labelSizes = me._getLabelSizes();
            var firstLabelSize = labelSizes.first;
            var lastLabelSize = labelSizes.last;
            var widestLabelSize = labelSizes.widest;
            var highestLabelSize = labelSizes.highest;
            var lineSpace = tickFonts.minor.lineHeight * 0.4;
            var tickPadding = tickOpts.padding;
            if (isHorizontal) {
              var isRotated = me.labelRotation !== 0;
              var angleRadians = helpers$1.toRadians(me.labelRotation);
              var cosRotation = Math.cos(angleRadians);
              var sinRotation = Math.sin(angleRadians);
              var labelHeight = sinRotation * widestLabelSize.width + cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0)) + (isRotated ? 0 : lineSpace);
              minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
              var offsetLeft = me.getPixelForTick(0) - me.left;
              var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
              var paddingLeft, paddingRight;
              if (isRotated) {
                paddingLeft = isBottom ? cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset : sinRotation * (firstLabelSize.height - firstLabelSize.offset);
                paddingRight = isBottom ? sinRotation * (lastLabelSize.height - lastLabelSize.offset) : cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
              } else {
                paddingLeft = firstLabelSize.width / 2;
                paddingRight = lastLabelSize.width / 2;
              }
              me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
              me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
            } else {
              var labelWidth = tickOpts.mirror ? 0 : (
                // use lineSpace for consistency with horizontal axis
                // tickPadding is not implemented for horizontal
                widestLabelSize.width + tickPadding + lineSpace
              );
              minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);
              me.paddingTop = firstLabelSize.height / 2;
              me.paddingBottom = lastLabelSize.height / 2;
            }
          }
          me.handleMargins();
          if (isHorizontal) {
            me.width = me._length = chart.width - me.margins.left - me.margins.right;
            me.height = minSize.height;
          } else {
            me.width = minSize.width;
            me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
          }
        },
        /**
         * Handle margins and padding interactions
         * @private
         */
        handleMargins: function() {
          var me = this;
          if (me.margins) {
            me.margins.left = Math.max(me.paddingLeft, me.margins.left);
            me.margins.top = Math.max(me.paddingTop, me.margins.top);
            me.margins.right = Math.max(me.paddingRight, me.margins.right);
            me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
          }
        },
        afterFit: function() {
          helpers$1.callback(this.options.afterFit, [this]);
        },
        // Shared Methods
        isHorizontal: function() {
          var pos = this.options.position;
          return pos === "top" || pos === "bottom";
        },
        isFullWidth: function() {
          return this.options.fullWidth;
        },
        // Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
        getRightValue: function(rawValue) {
          if (isNullOrUndef(rawValue)) {
            return NaN;
          }
          if ((typeof rawValue === "number" || rawValue instanceof Number) && !isFinite(rawValue)) {
            return NaN;
          }
          if (rawValue) {
            if (this.isHorizontal()) {
              if (rawValue.x !== void 0) {
                return this.getRightValue(rawValue.x);
              }
            } else if (rawValue.y !== void 0) {
              return this.getRightValue(rawValue.y);
            }
          }
          return rawValue;
        },
        _convertTicksToLabels: function(ticks) {
          var me = this;
          var labels, i2, ilen;
          me.ticks = ticks.map(function(tick) {
            return tick.value;
          });
          me.beforeTickToLabelConversion();
          labels = me.convertTicksToLabels(ticks) || me.ticks;
          me.afterTickToLabelConversion();
          for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
            ticks[i2].label = labels[i2];
          }
          return labels;
        },
        /**
         * @private
         */
        _getLabelSizes: function() {
          var me = this;
          var labelSizes = me._labelSizes;
          if (!labelSizes) {
            me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
            me.longestLabelWidth = labelSizes.widest.width;
          }
          return labelSizes;
        },
        /**
         * @private
         */
        _parseValue: function(value) {
          var start, end, min, max;
          if (isArray(value)) {
            start = +this.getRightValue(value[0]);
            end = +this.getRightValue(value[1]);
            min = Math.min(start, end);
            max = Math.max(start, end);
          } else {
            value = +this.getRightValue(value);
            start = void 0;
            end = value;
            min = value;
            max = value;
          }
          return {
            min,
            max,
            start,
            end
          };
        },
        /**
        * @private
        */
        _getScaleLabel: function(rawValue) {
          var v2 = this._parseValue(rawValue);
          if (v2.start !== void 0) {
            return "[" + v2.start + ", " + v2.end + "]";
          }
          return +this.getRightValue(rawValue);
        },
        /**
         * Used to get the value to display in the tooltip for the data at the given index
         * @param index
         * @param datasetIndex
         */
        getLabelForIndex: helpers$1.noop,
        /**
         * Returns the location of the given data point. Value can either be an index or a numerical value
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         * @param value
         * @param index
         * @param datasetIndex
         */
        getPixelForValue: helpers$1.noop,
        /**
         * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         * @param pixel
         */
        getValueForPixel: helpers$1.noop,
        /**
         * Returns the location of the tick at the given index
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         */
        getPixelForTick: function(index) {
          var me = this;
          var offset = me.options.offset;
          var numTicks = me._ticks.length;
          var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);
          return index < 0 || index > numTicks - 1 ? null : me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
        },
        /**
         * Utility for getting the pixel location of a percentage of scale
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         */
        getPixelForDecimal: function(decimal) {
          var me = this;
          if (me._reversePixels) {
            decimal = 1 - decimal;
          }
          return me._startPixel + decimal * me._length;
        },
        getDecimalForPixel: function(pixel) {
          var decimal = (pixel - this._startPixel) / this._length;
          return this._reversePixels ? 1 - decimal : decimal;
        },
        /**
         * Returns the pixel for the minimum chart value
         * The coordinate (0, 0) is at the upper-left corner of the canvas
         */
        getBasePixel: function() {
          return this.getPixelForValue(this.getBaseValue());
        },
        getBaseValue: function() {
          var me = this;
          var min = me.min;
          var max = me.max;
          return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
        },
        /**
         * Returns a subset of ticks to be plotted to avoid overlapping labels.
         * @private
         */
        _autoSkip: function(ticks) {
          var me = this;
          var tickOpts = me.options.ticks;
          var axisLength = me._length;
          var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
          var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
          var numMajorIndices = majorIndices.length;
          var first = majorIndices[0];
          var last = majorIndices[numMajorIndices - 1];
          var i2, ilen, spacing, avgMajorSpacing;
          if (numMajorIndices > ticksLimit) {
            skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
            return nonSkipped(ticks);
          }
          spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);
          if (numMajorIndices > 0) {
            for (i2 = 0, ilen = numMajorIndices - 1; i2 < ilen; i2++) {
              skip(ticks, spacing, majorIndices[i2], majorIndices[i2 + 1]);
            }
            avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
            skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
            skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
            return nonSkipped(ticks);
          }
          skip(ticks, spacing);
          return nonSkipped(ticks);
        },
        /**
         * @private
         */
        _tickSize: function() {
          var me = this;
          var optionTicks = me.options.ticks;
          var rot = helpers$1.toRadians(me.labelRotation);
          var cos = Math.abs(Math.cos(rot));
          var sin = Math.abs(Math.sin(rot));
          var labelSizes = me._getLabelSizes();
          var padding = optionTicks.autoSkipPadding || 0;
          var w2 = labelSizes ? labelSizes.widest.width + padding : 0;
          var h2 = labelSizes ? labelSizes.highest.height + padding : 0;
          return me.isHorizontal() ? h2 * cos > w2 * sin ? w2 / cos : h2 / sin : h2 * sin < w2 * cos ? h2 / cos : w2 / sin;
        },
        /**
         * @private
         */
        _isVisible: function() {
          var me = this;
          var chart = me.chart;
          var display = me.options.display;
          var i2, ilen, meta;
          if (display !== "auto") {
            return !!display;
          }
          for (i2 = 0, ilen = chart.data.datasets.length; i2 < ilen; ++i2) {
            if (chart.isDatasetVisible(i2)) {
              meta = chart.getDatasetMeta(i2);
              if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
                return true;
              }
            }
          }
          return false;
        },
        /**
         * @private
         */
        _computeGridLineItems: function(chartArea) {
          var me = this;
          var chart = me.chart;
          var options2 = me.options;
          var gridLines = options2.gridLines;
          var position = options2.position;
          var offsetGridLines = gridLines.offsetGridLines;
          var isHorizontal = me.isHorizontal();
          var ticks = me._ticksToDraw;
          var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);
          var tl = getTickMarkLength(gridLines);
          var items = [];
          var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
          var axisHalfWidth = axisWidth / 2;
          var alignPixel = helpers$1._alignPixel;
          var alignBorderValue = function(pixel) {
            return alignPixel(chart, pixel, axisWidth);
          };
          var borderValue, i2, tick, lineValue, alignedLineValue;
          var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;
          if (position === "top") {
            borderValue = alignBorderValue(me.bottom);
            ty1 = me.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
          } else if (position === "bottom") {
            borderValue = alignBorderValue(me.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = me.top + tl;
          } else if (position === "left") {
            borderValue = alignBorderValue(me.right);
            tx1 = me.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
          } else {
            borderValue = alignBorderValue(me.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = me.left + tl;
          }
          for (i2 = 0; i2 < ticksLength; ++i2) {
            tick = ticks[i2] || {};
            if (isNullOrUndef(tick.label) && i2 < ticks.length) {
              continue;
            }
            if (i2 === me.zeroLineIndex && options2.offset === offsetGridLines) {
              lineWidth = gridLines.zeroLineWidth;
              lineColor = gridLines.zeroLineColor;
              borderDash = gridLines.zeroLineBorderDash || [];
              borderDashOffset = gridLines.zeroLineBorderDashOffset || 0;
            } else {
              lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i2, 1);
              lineColor = valueAtIndexOrDefault(gridLines.color, i2, "rgba(0,0,0,0.1)");
              borderDash = gridLines.borderDash || [];
              borderDashOffset = gridLines.borderDashOffset || 0;
            }
            lineValue = getPixelForGridLine(me, tick._index || i2, offsetGridLines);
            if (lineValue === void 0) {
              continue;
            }
            alignedLineValue = alignPixel(chart, lineValue, lineWidth);
            if (isHorizontal) {
              tx1 = tx2 = x1 = x2 = alignedLineValue;
            } else {
              ty1 = ty2 = y1 = y2 = alignedLineValue;
            }
            items.push({
              tx1,
              ty1,
              tx2,
              ty2,
              x1,
              y1,
              x2,
              y2,
              width: lineWidth,
              color: lineColor,
              borderDash,
              borderDashOffset
            });
          }
          items.ticksLength = ticksLength;
          items.borderValue = borderValue;
          return items;
        },
        /**
         * @private
         */
        _computeLabelItems: function() {
          var me = this;
          var options2 = me.options;
          var optionTicks = options2.ticks;
          var position = options2.position;
          var isMirrored = optionTicks.mirror;
          var isHorizontal = me.isHorizontal();
          var ticks = me._ticksToDraw;
          var fonts = parseTickFontOptions(optionTicks);
          var tickPadding = optionTicks.padding;
          var tl = getTickMarkLength(options2.gridLines);
          var rotation = -helpers$1.toRadians(me.labelRotation);
          var items = [];
          var i2, ilen, tick, label, x, y2, textAlign, pixel, font, lineHeight, lineCount, textOffset;
          if (position === "top") {
            y2 = me.bottom - tl - tickPadding;
            textAlign = !rotation ? "center" : "left";
          } else if (position === "bottom") {
            y2 = me.top + tl + tickPadding;
            textAlign = !rotation ? "center" : "right";
          } else if (position === "left") {
            x = me.right - (isMirrored ? 0 : tl) - tickPadding;
            textAlign = isMirrored ? "left" : "right";
          } else {
            x = me.left + (isMirrored ? 0 : tl) + tickPadding;
            textAlign = isMirrored ? "right" : "left";
          }
          for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
            tick = ticks[i2];
            label = tick.label;
            if (isNullOrUndef(label)) {
              continue;
            }
            pixel = me.getPixelForTick(tick._index || i2) + optionTicks.labelOffset;
            font = tick.major ? fonts.major : fonts.minor;
            lineHeight = font.lineHeight;
            lineCount = isArray(label) ? label.length : 1;
            if (isHorizontal) {
              x = pixel;
              textOffset = position === "top" ? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight : (!rotation ? 0.5 : 0) * lineHeight;
            } else {
              y2 = pixel;
              textOffset = (1 - lineCount) * lineHeight / 2;
            }
            items.push({
              x,
              y: y2,
              rotation,
              label,
              font,
              textOffset,
              textAlign
            });
          }
          return items;
        },
        /**
         * @private
         */
        _drawGrid: function(chartArea) {
          var me = this;
          var gridLines = me.options.gridLines;
          if (!gridLines.display) {
            return;
          }
          var ctx = me.ctx;
          var chart = me.chart;
          var alignPixel = helpers$1._alignPixel;
          var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
          var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
          var width, color, i2, ilen, item;
          for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
            item = items[i2];
            width = item.width;
            color = item.color;
            if (width && color) {
              ctx.save();
              ctx.lineWidth = width;
              ctx.strokeStyle = color;
              if (ctx.setLineDash) {
                ctx.setLineDash(item.borderDash);
                ctx.lineDashOffset = item.borderDashOffset;
              }
              ctx.beginPath();
              if (gridLines.drawTicks) {
                ctx.moveTo(item.tx1, item.ty1);
                ctx.lineTo(item.tx2, item.ty2);
              }
              if (gridLines.drawOnChartArea) {
                ctx.moveTo(item.x1, item.y1);
                ctx.lineTo(item.x2, item.y2);
              }
              ctx.stroke();
              ctx.restore();
            }
          }
          if (axisWidth) {
            var firstLineWidth = axisWidth;
            var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
            var borderValue = items.borderValue;
            var x1, x2, y1, y2;
            if (me.isHorizontal()) {
              x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
              x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
              y1 = y2 = borderValue;
            } else {
              y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
              y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
              x1 = x2 = borderValue;
            }
            ctx.lineWidth = axisWidth;
            ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
          }
        },
        /**
         * @private
         */
        _drawLabels: function() {
          var me = this;
          var optionTicks = me.options.ticks;
          if (!optionTicks.display) {
            return;
          }
          var ctx = me.ctx;
          var items = me._labelItems || (me._labelItems = me._computeLabelItems());
          var i2, j2, ilen, jlen, item, tickFont, label, y2;
          for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
            item = items[i2];
            tickFont = item.font;
            ctx.save();
            ctx.translate(item.x, item.y);
            ctx.rotate(item.rotation);
            ctx.font = tickFont.string;
            ctx.fillStyle = tickFont.color;
            ctx.textBaseline = "middle";
            ctx.textAlign = item.textAlign;
            label = item.label;
            y2 = item.textOffset;
            if (isArray(label)) {
              for (j2 = 0, jlen = label.length; j2 < jlen; ++j2) {
                ctx.fillText("" + label[j2], 0, y2);
                y2 += tickFont.lineHeight;
              }
            } else {
              ctx.fillText(label, 0, y2);
            }
            ctx.restore();
          }
        },
        /**
         * @private
         */
        _drawTitle: function() {
          var me = this;
          var ctx = me.ctx;
          var options2 = me.options;
          var scaleLabel = options2.scaleLabel;
          if (!scaleLabel.display) {
            return;
          }
          var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
          var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
          var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
          var halfLineHeight = scaleLabelFont.lineHeight / 2;
          var position = options2.position;
          var rotation = 0;
          var scaleLabelX, scaleLabelY;
          if (me.isHorizontal()) {
            scaleLabelX = me.left + me.width / 2;
            scaleLabelY = position === "bottom" ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;
          } else {
            var isLeft = position === "left";
            scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;
            scaleLabelY = me.top + me.height / 2;
            rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
          }
          ctx.save();
          ctx.translate(scaleLabelX, scaleLabelY);
          ctx.rotate(rotation);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          ctx.fillStyle = scaleLabelFontColor;
          ctx.font = scaleLabelFont.string;
          ctx.fillText(scaleLabel.labelString, 0, 0);
          ctx.restore();
        },
        draw: function(chartArea) {
          var me = this;
          if (!me._isVisible()) {
            return;
          }
          me._drawGrid(chartArea);
          me._drawTitle();
          me._drawLabels();
        },
        /**
         * @private
         */
        _layers: function() {
          var me = this;
          var opts = me.options;
          var tz = opts.ticks && opts.ticks.z || 0;
          var gz = opts.gridLines && opts.gridLines.z || 0;
          if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
            return [{
              z: tz,
              draw: function() {
                me.draw.apply(me, arguments);
              }
            }];
          }
          return [{
            z: gz,
            draw: function() {
              me._drawGrid.apply(me, arguments);
              me._drawTitle.apply(me, arguments);
            }
          }, {
            z: tz,
            draw: function() {
              me._drawLabels.apply(me, arguments);
            }
          }];
        },
        /**
         * @private
         */
        _getMatchingVisibleMetas: function(type) {
          var me = this;
          var isHorizontal = me.isHorizontal();
          return me.chart._getSortedVisibleDatasetMetas().filter(function(meta) {
            return (!type || meta.type === type) && (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
          });
        }
      });
      Scale.prototype._draw = Scale.prototype.draw;
      var core_scale = Scale;
      var isNullOrUndef$1 = helpers$1.isNullOrUndef;
      var defaultConfig = {
        position: "bottom"
      };
      var scale_category = core_scale.extend({
        determineDataLimits: function() {
          var me = this;
          var labels = me._getLabels();
          var ticksOpts = me.options.ticks;
          var min = ticksOpts.min;
          var max = ticksOpts.max;
          var minIndex = 0;
          var maxIndex = labels.length - 1;
          var findIndex;
          if (min !== void 0) {
            findIndex = labels.indexOf(min);
            if (findIndex >= 0) {
              minIndex = findIndex;
            }
          }
          if (max !== void 0) {
            findIndex = labels.indexOf(max);
            if (findIndex >= 0) {
              maxIndex = findIndex;
            }
          }
          me.minIndex = minIndex;
          me.maxIndex = maxIndex;
          me.min = labels[minIndex];
          me.max = labels[maxIndex];
        },
        buildTicks: function() {
          var me = this;
          var labels = me._getLabels();
          var minIndex = me.minIndex;
          var maxIndex = me.maxIndex;
          me.ticks = minIndex === 0 && maxIndex === labels.length - 1 ? labels : labels.slice(minIndex, maxIndex + 1);
        },
        getLabelForIndex: function(index, datasetIndex) {
          var me = this;
          var chart = me.chart;
          if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
            return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
          }
          return me._getLabels()[index];
        },
        _configure: function() {
          var me = this;
          var offset = me.options.offset;
          var ticks = me.ticks;
          core_scale.prototype._configure.call(me);
          if (!me.isHorizontal()) {
            me._reversePixels = !me._reversePixels;
          }
          if (!ticks) {
            return;
          }
          me._startValue = me.minIndex - (offset ? 0.5 : 0);
          me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
        },
        // Used to get data value locations.  Value can either be an index or a numerical value
        getPixelForValue: function(value, index, datasetIndex) {
          var me = this;
          var valueCategory, labels, idx;
          if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
            value = me.chart.data.datasets[datasetIndex].data[index];
          }
          if (!isNullOrUndef$1(value)) {
            valueCategory = me.isHorizontal() ? value.x : value.y;
          }
          if (valueCategory !== void 0 || value !== void 0 && isNaN(index)) {
            labels = me._getLabels();
            value = helpers$1.valueOrDefault(valueCategory, value);
            idx = labels.indexOf(value);
            index = idx !== -1 ? idx : index;
            if (isNaN(index)) {
              index = value;
            }
          }
          return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
        },
        getPixelForTick: function(index) {
          var ticks = this.ticks;
          return index < 0 || index > ticks.length - 1 ? null : this.getPixelForValue(ticks[index], index + this.minIndex);
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
          return Math.min(Math.max(value, 0), me.ticks.length - 1);
        },
        getBasePixel: function() {
          return this.bottom;
        }
      });
      var _defaults = defaultConfig;
      scale_category._defaults = _defaults;
      var noop = helpers$1.noop;
      var isNullOrUndef$2 = helpers$1.isNullOrUndef;
      function generateTicks(generationOptions, dataRange) {
        var ticks = [];
        var MIN_SPACING = 1e-14;
        var stepSize = generationOptions.stepSize;
        var unit = stepSize || 1;
        var maxNumSpaces = generationOptions.maxTicks - 1;
        var min = generationOptions.min;
        var max = generationOptions.max;
        var precision = generationOptions.precision;
        var rmin = dataRange.min;
        var rmax = dataRange.max;
        var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
        var factor, niceMin, niceMax, numSpaces;
        if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
          return [rmin, rmax];
        }
        numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
        if (numSpaces > maxNumSpaces) {
          spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
        }
        if (stepSize || isNullOrUndef$2(precision)) {
          factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
        } else {
          factor = Math.pow(10, precision);
          spacing = Math.ceil(spacing * factor) / factor;
        }
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
        if (stepSize) {
          if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1e3)) {
            niceMin = min;
          }
          if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1e3)) {
            niceMax = max;
          }
        }
        numSpaces = (niceMax - niceMin) / spacing;
        if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
          numSpaces = Math.round(numSpaces);
        } else {
          numSpaces = Math.ceil(numSpaces);
        }
        niceMin = Math.round(niceMin * factor) / factor;
        niceMax = Math.round(niceMax * factor) / factor;
        ticks.push(isNullOrUndef$2(min) ? niceMin : min);
        for (var j2 = 1; j2 < numSpaces; ++j2) {
          ticks.push(Math.round((niceMin + j2 * spacing) * factor) / factor);
        }
        ticks.push(isNullOrUndef$2(max) ? niceMax : max);
        return ticks;
      }
      var scale_linearbase = core_scale.extend({
        getRightValue: function(value) {
          if (typeof value === "string") {
            return +value;
          }
          return core_scale.prototype.getRightValue.call(this, value);
        },
        handleTickRangeOptions: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          if (tickOpts.beginAtZero) {
            var minSign = helpers$1.sign(me.min);
            var maxSign = helpers$1.sign(me.max);
            if (minSign < 0 && maxSign < 0) {
              me.max = 0;
            } else if (minSign > 0 && maxSign > 0) {
              me.min = 0;
            }
          }
          var setMin = tickOpts.min !== void 0 || tickOpts.suggestedMin !== void 0;
          var setMax = tickOpts.max !== void 0 || tickOpts.suggestedMax !== void 0;
          if (tickOpts.min !== void 0) {
            me.min = tickOpts.min;
          } else if (tickOpts.suggestedMin !== void 0) {
            if (me.min === null) {
              me.min = tickOpts.suggestedMin;
            } else {
              me.min = Math.min(me.min, tickOpts.suggestedMin);
            }
          }
          if (tickOpts.max !== void 0) {
            me.max = tickOpts.max;
          } else if (tickOpts.suggestedMax !== void 0) {
            if (me.max === null) {
              me.max = tickOpts.suggestedMax;
            } else {
              me.max = Math.max(me.max, tickOpts.suggestedMax);
            }
          }
          if (setMin !== setMax) {
            if (me.min >= me.max) {
              if (setMin) {
                me.max = me.min + 1;
              } else {
                me.min = me.max - 1;
              }
            }
          }
          if (me.min === me.max) {
            me.max++;
            if (!tickOpts.beginAtZero) {
              me.min--;
            }
          }
        },
        getTickLimit: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          var stepSize = tickOpts.stepSize;
          var maxTicksLimit = tickOpts.maxTicksLimit;
          var maxTicks;
          if (stepSize) {
            maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
          } else {
            maxTicks = me._computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
          }
          if (maxTicksLimit) {
            maxTicks = Math.min(maxTicksLimit, maxTicks);
          }
          return maxTicks;
        },
        _computeTickLimit: function() {
          return Number.POSITIVE_INFINITY;
        },
        handleDirectionalChanges: noop,
        buildTicks: function() {
          var me = this;
          var opts = me.options;
          var tickOpts = opts.ticks;
          var maxTicks = me.getTickLimit();
          maxTicks = Math.max(2, maxTicks);
          var numericGeneratorOptions = {
            maxTicks,
            min: tickOpts.min,
            max: tickOpts.max,
            precision: tickOpts.precision,
            stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
          };
          var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
          me.handleDirectionalChanges();
          me.max = helpers$1.max(ticks);
          me.min = helpers$1.min(ticks);
          if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
        },
        convertTicksToLabels: function() {
          var me = this;
          me.ticksAsNumbers = me.ticks.slice();
          me.zeroLineIndex = me.ticks.indexOf(0);
          core_scale.prototype.convertTicksToLabels.call(me);
        },
        _configure: function() {
          var me = this;
          var ticks = me.getTicks();
          var start = me.min;
          var end = me.max;
          var offset;
          core_scale.prototype._configure.call(me);
          if (me.options.offset && ticks.length) {
            offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset;
            end += offset;
          }
          me._startValue = start;
          me._endValue = end;
          me._valueRange = end - start;
        }
      });
      var defaultConfig$1 = {
        position: "left",
        ticks: {
          callback: core_ticks.formatters.linear
        }
      };
      var DEFAULT_MIN = 0;
      var DEFAULT_MAX = 1;
      function getOrCreateStack(stacks, stacked, meta) {
        var key = [
          meta.type,
          // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
          stacked === void 0 && meta.stack === void 0 ? meta.index : "",
          meta.stack
        ].join(".");
        if (stacks[key] === void 0) {
          stacks[key] = {
            pos: [],
            neg: []
          };
        }
        return stacks[key];
      }
      function stackData(scale2, stacks, meta, data) {
        var opts = scale2.options;
        var stacked = opts.stacked;
        var stack = getOrCreateStack(stacks, stacked, meta);
        var pos = stack.pos;
        var neg = stack.neg;
        var ilen = data.length;
        var i2, value;
        for (i2 = 0; i2 < ilen; ++i2) {
          value = scale2._parseValue(data[i2]);
          if (isNaN(value.min) || isNaN(value.max) || meta.data[i2].hidden) {
            continue;
          }
          pos[i2] = pos[i2] || 0;
          neg[i2] = neg[i2] || 0;
          if (opts.relativePoints) {
            pos[i2] = 100;
          } else if (value.min < 0 || value.max < 0) {
            neg[i2] += value.min;
          } else {
            pos[i2] += value.max;
          }
        }
      }
      function updateMinMax(scale2, meta, data) {
        var ilen = data.length;
        var i2, value;
        for (i2 = 0; i2 < ilen; ++i2) {
          value = scale2._parseValue(data[i2]);
          if (isNaN(value.min) || isNaN(value.max) || meta.data[i2].hidden) {
            continue;
          }
          scale2.min = Math.min(scale2.min, value.min);
          scale2.max = Math.max(scale2.max, value.max);
        }
      }
      var scale_linear = scale_linearbase.extend({
        determineDataLimits: function() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var datasets = chart.data.datasets;
          var metasets = me._getMatchingVisibleMetas();
          var hasStacks = opts.stacked;
          var stacks = {};
          var ilen = metasets.length;
          var i2, meta, data, values;
          me.min = Number.POSITIVE_INFINITY;
          me.max = Number.NEGATIVE_INFINITY;
          if (hasStacks === void 0) {
            for (i2 = 0; !hasStacks && i2 < ilen; ++i2) {
              meta = metasets[i2];
              hasStacks = meta.stack !== void 0;
            }
          }
          for (i2 = 0; i2 < ilen; ++i2) {
            meta = metasets[i2];
            data = datasets[meta.index].data;
            if (hasStacks) {
              stackData(me, stacks, meta, data);
            } else {
              updateMinMax(me, meta, data);
            }
          }
          helpers$1.each(stacks, function(stackValues) {
            values = stackValues.pos.concat(stackValues.neg);
            me.min = Math.min(me.min, helpers$1.min(values));
            me.max = Math.max(me.max, helpers$1.max(values));
          });
          me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
          me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;
          me.handleTickRangeOptions();
        },
        // Returns the maximum number of ticks based on the scale dimension
        _computeTickLimit: function() {
          var me = this;
          var tickFont;
          if (me.isHorizontal()) {
            return Math.ceil(me.width / 40);
          }
          tickFont = helpers$1.options._parseFont(me.options.ticks);
          return Math.ceil(me.height / tickFont.lineHeight);
        },
        // Called after the ticks are built. We need
        handleDirectionalChanges: function() {
          if (!this.isHorizontal()) {
            this.ticks.reverse();
          }
        },
        getLabelForIndex: function(index, datasetIndex) {
          return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
        },
        // Utils
        getPixelForValue: function(value) {
          var me = this;
          return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
        },
        getValueForPixel: function(pixel) {
          return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
        },
        getPixelForTick: function(index) {
          var ticks = this.ticksAsNumbers;
          if (index < 0 || index > ticks.length - 1) {
            return null;
          }
          return this.getPixelForValue(ticks[index]);
        }
      });
      var _defaults$1 = defaultConfig$1;
      scale_linear._defaults = _defaults$1;
      var valueOrDefault$b = helpers$1.valueOrDefault;
      var log10 = helpers$1.math.log10;
      function generateTicks$1(generationOptions, dataRange) {
        var ticks = [];
        var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
        var endExp = Math.floor(log10(dataRange.max));
        var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
        var exp, significand;
        if (tickVal === 0) {
          exp = Math.floor(log10(dataRange.minNotZero));
          significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
          ticks.push(tickVal);
          tickVal = significand * Math.pow(10, exp);
        } else {
          exp = Math.floor(log10(tickVal));
          significand = Math.floor(tickVal / Math.pow(10, exp));
        }
        var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
        do {
          ticks.push(tickVal);
          ++significand;
          if (significand === 10) {
            significand = 1;
            ++exp;
            precision = exp >= 0 ? 1 : precision;
          }
          tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
        } while (exp < endExp || exp === endExp && significand < endSignificand);
        var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
        ticks.push(lastTick);
        return ticks;
      }
      var defaultConfig$2 = {
        position: "left",
        // label settings
        ticks: {
          callback: core_ticks.formatters.logarithmic
        }
      };
      function nonNegativeOrDefault(value, defaultValue) {
        return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
      }
      var scale_logarithmic = core_scale.extend({
        determineDataLimits: function() {
          var me = this;
          var opts = me.options;
          var chart = me.chart;
          var datasets = chart.data.datasets;
          var isHorizontal = me.isHorizontal();
          function IDMatches(meta2) {
            return isHorizontal ? meta2.xAxisID === me.id : meta2.yAxisID === me.id;
          }
          var datasetIndex, meta, value, data, i2, ilen;
          me.min = Number.POSITIVE_INFINITY;
          me.max = Number.NEGATIVE_INFINITY;
          me.minNotZero = Number.POSITIVE_INFINITY;
          var hasStacks = opts.stacked;
          if (hasStacks === void 0) {
            for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
              meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== void 0) {
                hasStacks = true;
                break;
              }
            }
          }
          if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
              meta = chart.getDatasetMeta(datasetIndex);
              var key = [
                meta.type,
                // we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
                opts.stacked === void 0 && meta.stack === void 0 ? datasetIndex : "",
                meta.stack
              ].join(".");
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                if (valuesPerStack[key] === void 0) {
                  valuesPerStack[key] = [];
                }
                data = datasets[datasetIndex].data;
                for (i2 = 0, ilen = data.length; i2 < ilen; i2++) {
                  var values = valuesPerStack[key];
                  value = me._parseValue(data[i2]);
                  if (isNaN(value.min) || isNaN(value.max) || meta.data[i2].hidden || value.min < 0 || value.max < 0) {
                    continue;
                  }
                  values[i2] = values[i2] || 0;
                  values[i2] += value.max;
                }
              }
            }
            helpers$1.each(valuesPerStack, function(valuesForType) {
              if (valuesForType.length > 0) {
                var minVal = helpers$1.min(valuesForType);
                var maxVal = helpers$1.max(valuesForType);
                me.min = Math.min(me.min, minVal);
                me.max = Math.max(me.max, maxVal);
              }
            });
          } else {
            for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
              meta = chart.getDatasetMeta(datasetIndex);
              if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                data = datasets[datasetIndex].data;
                for (i2 = 0, ilen = data.length; i2 < ilen; i2++) {
                  value = me._parseValue(data[i2]);
                  if (isNaN(value.min) || isNaN(value.max) || meta.data[i2].hidden || value.min < 0 || value.max < 0) {
                    continue;
                  }
                  me.min = Math.min(value.min, me.min);
                  me.max = Math.max(value.max, me.max);
                  if (value.min !== 0) {
                    me.minNotZero = Math.min(value.min, me.minNotZero);
                  }
                }
              }
            }
          }
          me.min = helpers$1.isFinite(me.min) ? me.min : null;
          me.max = helpers$1.isFinite(me.max) ? me.max : null;
          me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;
          this.handleTickRangeOptions();
        },
        handleTickRangeOptions: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          var DEFAULT_MIN2 = 1;
          var DEFAULT_MAX2 = 10;
          me.min = nonNegativeOrDefault(tickOpts.min, me.min);
          me.max = nonNegativeOrDefault(tickOpts.max, me.max);
          if (me.min === me.max) {
            if (me.min !== 0 && me.min !== null) {
              me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
              me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
            } else {
              me.min = DEFAULT_MIN2;
              me.max = DEFAULT_MAX2;
            }
          }
          if (me.min === null) {
            me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
          }
          if (me.max === null) {
            me.max = me.min !== 0 ? Math.pow(10, Math.floor(log10(me.min)) + 1) : DEFAULT_MAX2;
          }
          if (me.minNotZero === null) {
            if (me.min > 0) {
              me.minNotZero = me.min;
            } else if (me.max < 1) {
              me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
            } else {
              me.minNotZero = DEFAULT_MIN2;
            }
          }
        },
        buildTicks: function() {
          var me = this;
          var tickOpts = me.options.ticks;
          var reverse = !me.isHorizontal();
          var generationOptions = {
            min: nonNegativeOrDefault(tickOpts.min),
            max: nonNegativeOrDefault(tickOpts.max)
          };
          var ticks = me.ticks = generateTicks$1(generationOptions, me);
          me.max = helpers$1.max(ticks);
          me.min = helpers$1.min(ticks);
          if (tickOpts.reverse) {
            reverse = !reverse;
            me.start = me.max;
            me.end = me.min;
          } else {
            me.start = me.min;
            me.end = me.max;
          }
          if (reverse) {
            ticks.reverse();
          }
        },
        convertTicksToLabels: function() {
          this.tickValues = this.ticks.slice();
          core_scale.prototype.convertTicksToLabels.call(this);
        },
        // Get the correct tooltip label
        getLabelForIndex: function(index, datasetIndex) {
          return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
        },
        getPixelForTick: function(index) {
          var ticks = this.tickValues;
          if (index < 0 || index > ticks.length - 1) {
            return null;
          }
          return this.getPixelForValue(ticks[index]);
        },
        /**
         * Returns the value of the first tick.
         * @param {number} value - The minimum not zero value.
         * @return {number} The first tick value.
         * @private
         */
        _getFirstTickValue: function(value) {
          var exp = Math.floor(log10(value));
          var significand = Math.floor(value / Math.pow(10, exp));
          return significand * Math.pow(10, exp);
        },
        _configure: function() {
          var me = this;
          var start = me.min;
          var offset = 0;
          core_scale.prototype._configure.call(me);
          if (start === 0) {
            start = me._getFirstTickValue(me.minNotZero);
            offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
          }
          me._startValue = log10(start);
          me._valueOffset = offset;
          me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
        },
        getPixelForValue: function(value) {
          var me = this;
          var decimal = 0;
          value = +me.getRightValue(value);
          if (value > me.min && value > 0) {
            decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
          }
          return me.getPixelForDecimal(decimal);
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var decimal = me.getDecimalForPixel(pixel);
          return decimal === 0 && me.min === 0 ? 0 : Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
        }
      });
      var _defaults$2 = defaultConfig$2;
      scale_logarithmic._defaults = _defaults$2;
      var valueOrDefault$c = helpers$1.valueOrDefault;
      var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
      var resolve$4 = helpers$1.options.resolve;
      var defaultConfig$3 = {
        display: true,
        // Boolean - Whether to animate scaling the chart from the centre
        animate: true,
        position: "chartArea",
        angleLines: {
          display: true,
          color: "rgba(0,0,0,0.1)",
          lineWidth: 1,
          borderDash: [],
          borderDashOffset: 0
        },
        gridLines: {
          circular: false
        },
        // label settings
        ticks: {
          // Boolean - Show a backdrop to the scale label
          showLabelBackdrop: true,
          // String - The colour of the label backdrop
          backdropColor: "rgba(255,255,255,0.75)",
          // Number - The backdrop padding above & below the label in pixels
          backdropPaddingY: 2,
          // Number - The backdrop padding to the side of the label in pixels
          backdropPaddingX: 2,
          callback: core_ticks.formatters.linear
        },
        pointLabels: {
          // Boolean - if true, show point labels
          display: true,
          // Number - Point label font size in pixels
          fontSize: 10,
          // Function - Used to convert point labels
          callback: function(label) {
            return label;
          }
        }
      };
      function getTickBackdropHeight(opts) {
        var tickOpts = opts.ticks;
        if (tickOpts.display && opts.display) {
          return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
        }
        return 0;
      }
      function measureLabelSize(ctx, lineHeight, label) {
        if (helpers$1.isArray(label)) {
          return {
            w: helpers$1.longestText(ctx, ctx.font, label),
            h: label.length * lineHeight
          };
        }
        return {
          w: ctx.measureText(label).width,
          h: lineHeight
        };
      }
      function determineLimits(angle, pos, size, min, max) {
        if (angle === min || angle === max) {
          return {
            start: pos - size / 2,
            end: pos + size / 2
          };
        } else if (angle < min || angle > max) {
          return {
            start: pos - size,
            end: pos
          };
        }
        return {
          start: pos,
          end: pos + size
        };
      }
      function fitWithPointLabels(scale2) {
        var plFont = helpers$1.options._parseFont(scale2.options.pointLabels);
        var furthestLimits = {
          l: 0,
          r: scale2.width,
          t: 0,
          b: scale2.height - scale2.paddingTop
        };
        var furthestAngles = {};
        var i2, textSize, pointPosition;
        scale2.ctx.font = plFont.string;
        scale2._pointLabelSizes = [];
        var valueCount = scale2.chart.data.labels.length;
        for (i2 = 0; i2 < valueCount; i2++) {
          pointPosition = scale2.getPointPosition(i2, scale2.drawingArea + 5);
          textSize = measureLabelSize(scale2.ctx, plFont.lineHeight, scale2.pointLabels[i2]);
          scale2._pointLabelSizes[i2] = textSize;
          var angleRadians = scale2.getIndexAngle(i2);
          var angle = helpers$1.toDegrees(angleRadians) % 360;
          var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
          var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
          if (hLimits.start < furthestLimits.l) {
            furthestLimits.l = hLimits.start;
            furthestAngles.l = angleRadians;
          }
          if (hLimits.end > furthestLimits.r) {
            furthestLimits.r = hLimits.end;
            furthestAngles.r = angleRadians;
          }
          if (vLimits.start < furthestLimits.t) {
            furthestLimits.t = vLimits.start;
            furthestAngles.t = angleRadians;
          }
          if (vLimits.end > furthestLimits.b) {
            furthestLimits.b = vLimits.end;
            furthestAngles.b = angleRadians;
          }
        }
        scale2.setReductions(scale2.drawingArea, furthestLimits, furthestAngles);
      }
      function getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) {
          return "center";
        } else if (angle < 180) {
          return "left";
        }
        return "right";
      }
      function fillText(ctx, text, position, lineHeight) {
        var y2 = position.y + lineHeight / 2;
        var i2, ilen;
        if (helpers$1.isArray(text)) {
          for (i2 = 0, ilen = text.length; i2 < ilen; ++i2) {
            ctx.fillText(text[i2], position.x, y2);
            y2 += lineHeight;
          }
        } else {
          ctx.fillText(text, position.x, y2);
        }
      }
      function adjustPointPositionForLabelHeight(angle, textSize, position) {
        if (angle === 90 || angle === 270) {
          position.y -= textSize.h / 2;
        } else if (angle > 270 || angle < 90) {
          position.y -= textSize.h;
        }
      }
      function drawPointLabels(scale2) {
        var ctx = scale2.ctx;
        var opts = scale2.options;
        var pointLabelOpts = opts.pointLabels;
        var tickBackdropHeight = getTickBackdropHeight(opts);
        var outerDistance = scale2.getDistanceFromCenterForValue(opts.ticks.reverse ? scale2.min : scale2.max);
        var plFont = helpers$1.options._parseFont(pointLabelOpts);
        ctx.save();
        ctx.font = plFont.string;
        ctx.textBaseline = "middle";
        for (var i2 = scale2.chart.data.labels.length - 1; i2 >= 0; i2--) {
          var extra = i2 === 0 ? tickBackdropHeight / 2 : 0;
          var pointLabelPosition = scale2.getPointPosition(i2, outerDistance + extra + 5);
          var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i2, core_defaults.global.defaultFontColor);
          ctx.fillStyle = pointLabelFontColor;
          var angleRadians = scale2.getIndexAngle(i2);
          var angle = helpers$1.toDegrees(angleRadians);
          ctx.textAlign = getTextAlignForAngle(angle);
          adjustPointPositionForLabelHeight(angle, scale2._pointLabelSizes[i2], pointLabelPosition);
          fillText(ctx, scale2.pointLabels[i2], pointLabelPosition, plFont.lineHeight);
        }
        ctx.restore();
      }
      function drawRadiusLine(scale2, gridLineOpts, radius, index) {
        var ctx = scale2.ctx;
        var circular = gridLineOpts.circular;
        var valueCount = scale2.chart.data.labels.length;
        var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
        var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
        var pointPosition;
        if (!circular && !valueCount || !lineColor || !lineWidth) {
          return;
        }
        ctx.save();
        ctx.strokeStyle = lineColor;
        ctx.lineWidth = lineWidth;
        if (ctx.setLineDash) {
          ctx.setLineDash(gridLineOpts.borderDash || []);
          ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0;
        }
        ctx.beginPath();
        if (circular) {
          ctx.arc(scale2.xCenter, scale2.yCenter, radius, 0, Math.PI * 2);
        } else {
          pointPosition = scale2.getPointPosition(0, radius);
          ctx.moveTo(pointPosition.x, pointPosition.y);
          for (var i2 = 1; i2 < valueCount; i2++) {
            pointPosition = scale2.getPointPosition(i2, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
          }
        }
        ctx.closePath();
        ctx.stroke();
        ctx.restore();
      }
      function numberOrZero(param) {
        return helpers$1.isNumber(param) ? param : 0;
      }
      var scale_radialLinear = scale_linearbase.extend({
        setDimensions: function() {
          var me = this;
          me.width = me.maxWidth;
          me.height = me.maxHeight;
          me.paddingTop = getTickBackdropHeight(me.options) / 2;
          me.xCenter = Math.floor(me.width / 2);
          me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
          me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
        },
        determineDataLimits: function() {
          var me = this;
          var chart = me.chart;
          var min = Number.POSITIVE_INFINITY;
          var max = Number.NEGATIVE_INFINITY;
          helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
              var meta = chart.getDatasetMeta(datasetIndex);
              helpers$1.each(dataset.data, function(rawValue, index) {
                var value = +me.getRightValue(rawValue);
                if (isNaN(value) || meta.data[index].hidden) {
                  return;
                }
                min = Math.min(value, min);
                max = Math.max(value, max);
              });
            }
          });
          me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
          me.max = max === Number.NEGATIVE_INFINITY ? 0 : max;
          me.handleTickRangeOptions();
        },
        // Returns the maximum number of ticks based on the scale dimension
        _computeTickLimit: function() {
          return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
        },
        convertTicksToLabels: function() {
          var me = this;
          scale_linearbase.prototype.convertTicksToLabels.call(me);
          me.pointLabels = me.chart.data.labels.map(function() {
            var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
            return label || label === 0 ? label : "";
          });
        },
        getLabelForIndex: function(index, datasetIndex) {
          return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        fit: function() {
          var me = this;
          var opts = me.options;
          if (opts.display && opts.pointLabels.display) {
            fitWithPointLabels(me);
          } else {
            me.setCenterPoint(0, 0, 0, 0);
          }
        },
        /**
         * Set radius reductions and determine new radius and center point
         * @private
         */
        setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
          var me = this;
          var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
          var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
          var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
          var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
          radiusReductionLeft = numberOrZero(radiusReductionLeft);
          radiusReductionRight = numberOrZero(radiusReductionRight);
          radiusReductionTop = numberOrZero(radiusReductionTop);
          radiusReductionBottom = numberOrZero(radiusReductionBottom);
          me.drawingArea = Math.min(
            Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
            Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)
          );
          me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
        },
        setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
          var me = this;
          var maxRight = me.width - rightMovement - me.drawingArea;
          var maxLeft = leftMovement + me.drawingArea;
          var maxTop = topMovement + me.drawingArea;
          var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;
          me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);
          me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);
        },
        getIndexAngle: function(index) {
          var chart = this.chart;
          var angleMultiplier = 360 / chart.data.labels.length;
          var options2 = chart.options || {};
          var startAngle = options2.startAngle || 0;
          var angle = (index * angleMultiplier + startAngle) % 360;
          return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
        },
        getDistanceFromCenterForValue: function(value) {
          var me = this;
          if (helpers$1.isNullOrUndef(value)) {
            return NaN;
          }
          var scalingFactor = me.drawingArea / (me.max - me.min);
          if (me.options.ticks.reverse) {
            return (me.max - value) * scalingFactor;
          }
          return (value - me.min) * scalingFactor;
        },
        getPointPosition: function(index, distanceFromCenter) {
          var me = this;
          var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
          return {
            x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
            y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
          };
        },
        getPointPositionForValue: function(index, value) {
          return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
        },
        getBasePosition: function(index) {
          var me = this;
          var min = me.min;
          var max = me.max;
          return me.getPointPositionForValue(
            index || 0,
            me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0
          );
        },
        /**
         * @private
         */
        _drawGrid: function() {
          var me = this;
          var ctx = me.ctx;
          var opts = me.options;
          var gridLineOpts = opts.gridLines;
          var angleLineOpts = opts.angleLines;
          var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
          var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
          var i2, offset, position;
          if (opts.pointLabels.display) {
            drawPointLabels(me);
          }
          if (gridLineOpts.display) {
            helpers$1.each(me.ticks, function(label, index) {
              if (index !== 0) {
                offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                drawRadiusLine(me, gridLineOpts, offset, index);
              }
            });
          }
          if (angleLineOpts.display && lineWidth && lineColor) {
            ctx.save();
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = lineColor;
            if (ctx.setLineDash) {
              ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
              ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0]);
            }
            for (i2 = me.chart.data.labels.length - 1; i2 >= 0; i2--) {
              offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
              position = me.getPointPosition(i2, offset);
              ctx.beginPath();
              ctx.moveTo(me.xCenter, me.yCenter);
              ctx.lineTo(position.x, position.y);
              ctx.stroke();
            }
            ctx.restore();
          }
        },
        /**
         * @private
         */
        _drawLabels: function() {
          var me = this;
          var ctx = me.ctx;
          var opts = me.options;
          var tickOpts = opts.ticks;
          if (!tickOpts.display) {
            return;
          }
          var startAngle = me.getIndexAngle(0);
          var tickFont = helpers$1.options._parseFont(tickOpts);
          var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
          var offset, width;
          ctx.save();
          ctx.font = tickFont.string;
          ctx.translate(me.xCenter, me.yCenter);
          ctx.rotate(startAngle);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          helpers$1.each(me.ticks, function(label, index) {
            if (index === 0 && !tickOpts.reverse) {
              return;
            }
            offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
            if (tickOpts.showLabelBackdrop) {
              width = ctx.measureText(label).width;
              ctx.fillStyle = tickOpts.backdropColor;
              ctx.fillRect(
                -width / 2 - tickOpts.backdropPaddingX,
                -offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
                width + tickOpts.backdropPaddingX * 2,
                tickFont.size + tickOpts.backdropPaddingY * 2
              );
            }
            ctx.fillStyle = tickFontColor;
            ctx.fillText(label, 0, -offset);
          });
          ctx.restore();
        },
        /**
         * @private
         */
        _drawTitle: helpers$1.noop
      });
      var _defaults$3 = defaultConfig$3;
      scale_radialLinear._defaults = _defaults$3;
      var deprecated$1 = helpers$1._deprecated;
      var resolve$5 = helpers$1.options.resolve;
      var valueOrDefault$d = helpers$1.valueOrDefault;
      var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
      var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
      var INTERVALS = {
        millisecond: {
          common: true,
          size: 1,
          steps: 1e3
        },
        second: {
          common: true,
          size: 1e3,
          steps: 60
        },
        minute: {
          common: true,
          size: 6e4,
          steps: 60
        },
        hour: {
          common: true,
          size: 36e5,
          steps: 24
        },
        day: {
          common: true,
          size: 864e5,
          steps: 30
        },
        week: {
          common: false,
          size: 6048e5,
          steps: 4
        },
        month: {
          common: true,
          size: 2628e6,
          steps: 12
        },
        quarter: {
          common: false,
          size: 7884e6,
          steps: 4
        },
        year: {
          common: true,
          size: 3154e7
        }
      };
      var UNITS = Object.keys(INTERVALS);
      function sorter(a2, b2) {
        return a2 - b2;
      }
      function arrayUnique(items) {
        var hash = {};
        var out = [];
        var i2, ilen, item;
        for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
          item = items[i2];
          if (!hash[item]) {
            hash[item] = true;
            out.push(item);
          }
        }
        return out;
      }
      function getMin(options2) {
        return helpers$1.valueOrDefault(options2.time.min, options2.ticks.min);
      }
      function getMax(options2) {
        return helpers$1.valueOrDefault(options2.time.max, options2.ticks.max);
      }
      function buildLookupTable(timestamps, min, max, distribution) {
        if (distribution === "linear" || !timestamps.length) {
          return [
            { time: min, pos: 0 },
            { time: max, pos: 1 }
          ];
        }
        var table = [];
        var items = [min];
        var i2, ilen, prev, curr, next;
        for (i2 = 0, ilen = timestamps.length; i2 < ilen; ++i2) {
          curr = timestamps[i2];
          if (curr > min && curr < max) {
            items.push(curr);
          }
        }
        items.push(max);
        for (i2 = 0, ilen = items.length; i2 < ilen; ++i2) {
          next = items[i2 + 1];
          prev = items[i2 - 1];
          curr = items[i2];
          if (prev === void 0 || next === void 0 || Math.round((next + prev) / 2) !== curr) {
            table.push({ time: curr, pos: i2 / (ilen - 1) });
          }
        }
        return table;
      }
      function lookup(table, key, value) {
        var lo = 0;
        var hi = table.length - 1;
        var mid, i0, i1;
        while (lo >= 0 && lo <= hi) {
          mid = lo + hi >> 1;
          i0 = table[mid - 1] || null;
          i1 = table[mid];
          if (!i0) {
            return { lo: null, hi: i1 };
          } else if (i1[key] < value) {
            lo = mid + 1;
          } else if (i0[key] > value) {
            hi = mid - 1;
          } else {
            return { lo: i0, hi: i1 };
          }
        }
        return { lo: i1, hi: null };
      }
      function interpolate$1(table, skey, sval, tkey) {
        var range = lookup(table, skey, sval);
        var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
        var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
        var span = next[skey] - prev[skey];
        var ratio = span ? (sval - prev[skey]) / span : 0;
        var offset = (next[tkey] - prev[tkey]) * ratio;
        return prev[tkey] + offset;
      }
      function toTimestamp(scale2, input) {
        var adapter = scale2._adapter;
        var options2 = scale2.options.time;
        var parser = options2.parser;
        var format = parser || options2.format;
        var value = input;
        if (typeof parser === "function") {
          value = parser(value);
        }
        if (!helpers$1.isFinite(value)) {
          value = typeof format === "string" ? adapter.parse(value, format) : adapter.parse(value);
        }
        if (value !== null) {
          return +value;
        }
        if (!parser && typeof format === "function") {
          value = format(input);
          if (!helpers$1.isFinite(value)) {
            value = adapter.parse(value);
          }
        }
        return value;
      }
      function parse(scale2, input) {
        if (helpers$1.isNullOrUndef(input)) {
          return null;
        }
        var options2 = scale2.options.time;
        var value = toTimestamp(scale2, scale2.getRightValue(input));
        if (value === null) {
          return value;
        }
        if (options2.round) {
          value = +scale2._adapter.startOf(value, options2.round);
        }
        return value;
      }
      function determineUnitForAutoTicks(minUnit, min, max, capacity) {
        var ilen = UNITS.length;
        var i2, interval, factor;
        for (i2 = UNITS.indexOf(minUnit); i2 < ilen - 1; ++i2) {
          interval = INTERVALS[UNITS[i2]];
          factor = interval.steps ? interval.steps : MAX_INTEGER;
          if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
            return UNITS[i2];
          }
        }
        return UNITS[ilen - 1];
      }
      function determineUnitForFormatting(scale2, numTicks, minUnit, min, max) {
        var i2, unit;
        for (i2 = UNITS.length - 1; i2 >= UNITS.indexOf(minUnit); i2--) {
          unit = UNITS[i2];
          if (INTERVALS[unit].common && scale2._adapter.diff(max, min, unit) >= numTicks - 1) {
            return unit;
          }
        }
        return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
      }
      function determineMajorUnit(unit) {
        for (var i2 = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i2 < ilen; ++i2) {
          if (INTERVALS[UNITS[i2]].common) {
            return UNITS[i2];
          }
        }
      }
      function generate(scale2, min, max, capacity) {
        var adapter = scale2._adapter;
        var options2 = scale2.options;
        var timeOpts = options2.time;
        var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
        var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
        var weekday = minor === "week" ? timeOpts.isoWeekday : false;
        var first = min;
        var ticks = [];
        var time;
        if (weekday) {
          first = +adapter.startOf(first, "isoWeek", weekday);
        }
        first = +adapter.startOf(first, weekday ? "day" : minor);
        if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
          throw min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor;
        }
        for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
          ticks.push(time);
        }
        if (time === max || options2.bounds === "ticks") {
          ticks.push(time);
        }
        return ticks;
      }
      function computeOffsets(table, ticks, min, max, options2) {
        var start = 0;
        var end = 0;
        var first, last;
        if (options2.offset && ticks.length) {
          first = interpolate$1(table, "time", ticks[0], "pos");
          if (ticks.length === 1) {
            start = 1 - first;
          } else {
            start = (interpolate$1(table, "time", ticks[1], "pos") - first) / 2;
          }
          last = interpolate$1(table, "time", ticks[ticks.length - 1], "pos");
          if (ticks.length === 1) {
            end = last;
          } else {
            end = (last - interpolate$1(table, "time", ticks[ticks.length - 2], "pos")) / 2;
          }
        }
        return { start, end, factor: 1 / (start + 1 + end) };
      }
      function setMajorTicks(scale2, ticks, map, majorUnit) {
        var adapter = scale2._adapter;
        var first = +adapter.startOf(ticks[0].value, majorUnit);
        var last = ticks[ticks.length - 1].value;
        var major, index;
        for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
          index = map[major];
          if (index >= 0) {
            ticks[index].major = true;
          }
        }
        return ticks;
      }
      function ticksFromTimestamps(scale2, values, majorUnit) {
        var ticks = [];
        var map = {};
        var ilen = values.length;
        var i2, value;
        for (i2 = 0; i2 < ilen; ++i2) {
          value = values[i2];
          map[value] = i2;
          ticks.push({
            value,
            major: false
          });
        }
        return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale2, ticks, map, majorUnit);
      }
      var defaultConfig$4 = {
        position: "bottom",
        /**
         * Data distribution along the scale:
         * - 'linear': data are spread according to their time (distances can vary),
         * - 'series': data are spread at the same distance from each other.
         * @see https://github.com/chartjs/Chart.js/pull/4507
         * @since 2.7.0
         */
        distribution: "linear",
        /**
         * Scale boundary strategy (bypassed by min/max time options)
         * - `data`: make sure data are fully visible, ticks outside are removed
         * - `ticks`: make sure ticks are fully visible, data outside are truncated
         * @see https://github.com/chartjs/Chart.js/pull/4556
         * @since 2.7.0
         */
        bounds: "data",
        adapters: {},
        time: {
          parser: false,
          // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
          unit: false,
          // false == automatic or override with week, month, year, etc.
          round: false,
          // none, or override with week, month, year, etc.
          displayFormat: false,
          // DEPRECATED
          isoWeekday: false,
          // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
          minUnit: "millisecond",
          displayFormats: {}
        },
        ticks: {
          autoSkip: false,
          /**
           * Ticks generation input values:
           * - 'auto': generates "optimal" ticks based on scale size and time options.
           * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
           * - 'labels': generates ticks from user given `data.labels` values ONLY.
           * @see https://github.com/chartjs/Chart.js/pull/4507
           * @since 2.7.0
           */
          source: "auto",
          major: {
            enabled: false
          }
        }
      };
      var scale_time = core_scale.extend({
        initialize: function() {
          this.mergeTicksOptions();
          core_scale.prototype.initialize.call(this);
        },
        update: function() {
          var me = this;
          var options2 = me.options;
          var time = options2.time || (options2.time = {});
          var adapter = me._adapter = new core_adapters._date(options2.adapters.date);
          deprecated$1("time scale", time.format, "time.format", "time.parser");
          deprecated$1("time scale", time.min, "time.min", "ticks.min");
          deprecated$1("time scale", time.max, "time.max", "ticks.max");
          helpers$1.mergeIf(time.displayFormats, adapter.formats());
          return core_scale.prototype.update.apply(me, arguments);
        },
        /**
         * Allows data to be referenced via 't' attribute
         */
        getRightValue: function(rawValue) {
          if (rawValue && rawValue.t !== void 0) {
            rawValue = rawValue.t;
          }
          return core_scale.prototype.getRightValue.call(this, rawValue);
        },
        determineDataLimits: function() {
          var me = this;
          var chart = me.chart;
          var adapter = me._adapter;
          var options2 = me.options;
          var unit = options2.time.unit || "day";
          var min = MAX_INTEGER;
          var max = MIN_INTEGER;
          var timestamps = [];
          var datasets = [];
          var labels = [];
          var i2, j2, ilen, jlen, data, timestamp, labelsAdded;
          var dataLabels = me._getLabels();
          for (i2 = 0, ilen = dataLabels.length; i2 < ilen; ++i2) {
            labels.push(parse(me, dataLabels[i2]));
          }
          for (i2 = 0, ilen = (chart.data.datasets || []).length; i2 < ilen; ++i2) {
            if (chart.isDatasetVisible(i2)) {
              data = chart.data.datasets[i2].data;
              if (helpers$1.isObject(data[0])) {
                datasets[i2] = [];
                for (j2 = 0, jlen = data.length; j2 < jlen; ++j2) {
                  timestamp = parse(me, data[j2]);
                  timestamps.push(timestamp);
                  datasets[i2][j2] = timestamp;
                }
              } else {
                datasets[i2] = labels.slice(0);
                if (!labelsAdded) {
                  timestamps = timestamps.concat(labels);
                  labelsAdded = true;
                }
              }
            } else {
              datasets[i2] = [];
            }
          }
          if (labels.length) {
            min = Math.min(min, labels[0]);
            max = Math.max(max, labels[labels.length - 1]);
          }
          if (timestamps.length) {
            timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
            min = Math.min(min, timestamps[0]);
            max = Math.max(max, timestamps[timestamps.length - 1]);
          }
          min = parse(me, getMin(options2)) || min;
          max = parse(me, getMax(options2)) || max;
          min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
          max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;
          me.min = Math.min(min, max);
          me.max = Math.max(min + 1, max);
          me._table = [];
          me._timestamps = {
            data: timestamps,
            datasets,
            labels
          };
        },
        buildTicks: function() {
          var me = this;
          var min = me.min;
          var max = me.max;
          var options2 = me.options;
          var tickOpts = options2.ticks;
          var timeOpts = options2.time;
          var timestamps = me._timestamps;
          var ticks = [];
          var capacity = me.getLabelCapacity(min);
          var source = tickOpts.source;
          var distribution = options2.distribution;
          var i2, ilen, timestamp;
          if (source === "data" || source === "auto" && distribution === "series") {
            timestamps = timestamps.data;
          } else if (source === "labels") {
            timestamps = timestamps.labels;
          } else {
            timestamps = generate(me, min, max, capacity);
          }
          if (options2.bounds === "ticks" && timestamps.length) {
            min = timestamps[0];
            max = timestamps[timestamps.length - 1];
          }
          min = parse(me, getMin(options2)) || min;
          max = parse(me, getMax(options2)) || max;
          for (i2 = 0, ilen = timestamps.length; i2 < ilen; ++i2) {
            timestamp = timestamps[i2];
            if (timestamp >= min && timestamp <= max) {
              ticks.push(timestamp);
            }
          }
          me.min = min;
          me.max = max;
          me._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity) : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
          me._majorUnit = !tickOpts.major.enabled || me._unit === "year" ? void 0 : determineMajorUnit(me._unit);
          me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
          me._offsets = computeOffsets(me._table, ticks, min, max, options2);
          if (tickOpts.reverse) {
            ticks.reverse();
          }
          return ticksFromTimestamps(me, ticks, me._majorUnit);
        },
        getLabelForIndex: function(index, datasetIndex) {
          var me = this;
          var adapter = me._adapter;
          var data = me.chart.data;
          var timeOpts = me.options.time;
          var label = data.labels && index < data.labels.length ? data.labels[index] : "";
          var value = data.datasets[datasetIndex].data[index];
          if (helpers$1.isObject(value)) {
            label = me.getRightValue(value);
          }
          if (timeOpts.tooltipFormat) {
            return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
          }
          if (typeof label === "string") {
            return label;
          }
          return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
        },
        /**
         * Function to format an individual tick mark
         * @private
         */
        tickFormatFunction: function(time, index, ticks, format) {
          var me = this;
          var adapter = me._adapter;
          var options2 = me.options;
          var formats = options2.time.displayFormats;
          var minorFormat = formats[me._unit];
          var majorUnit = me._majorUnit;
          var majorFormat = formats[majorUnit];
          var tick = ticks[index];
          var tickOpts = options2.ticks;
          var major = majorUnit && majorFormat && tick && tick.major;
          var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
          var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
          var formatter = resolve$5([
            nestedTickOpts.callback,
            nestedTickOpts.userCallback,
            tickOpts.callback,
            tickOpts.userCallback
          ]);
          return formatter ? formatter(label, index, ticks) : label;
        },
        convertTicksToLabels: function(ticks) {
          var labels = [];
          var i2, ilen;
          for (i2 = 0, ilen = ticks.length; i2 < ilen; ++i2) {
            labels.push(this.tickFormatFunction(ticks[i2].value, i2, ticks));
          }
          return labels;
        },
        /**
         * @private
         */
        getPixelForOffset: function(time) {
          var me = this;
          var offsets = me._offsets;
          var pos = interpolate$1(me._table, "time", time, "pos");
          return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
        },
        getPixelForValue: function(value, index, datasetIndex) {
          var me = this;
          var time = null;
          if (index !== void 0 && datasetIndex !== void 0) {
            time = me._timestamps.datasets[datasetIndex][index];
          }
          if (time === null) {
            time = parse(me, value);
          }
          if (time !== null) {
            return me.getPixelForOffset(time);
          }
        },
        getPixelForTick: function(index) {
          var ticks = this.getTicks();
          return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;
        },
        getValueForPixel: function(pixel) {
          var me = this;
          var offsets = me._offsets;
          var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
          var time = interpolate$1(me._table, "pos", pos, "time");
          return me._adapter._create(time);
        },
        /**
         * @private
         */
        _getLabelSize: function(label) {
          var me = this;
          var ticksOpts = me.options.ticks;
          var tickLabelWidth = me.ctx.measureText(label).width;
          var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
          var cosRotation = Math.cos(angle);
          var sinRotation = Math.sin(angle);
          var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);
          return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
          };
        },
        /**
         * Crude approximation of what the label width might be
         * @private
         */
        getLabelWidth: function(label) {
          return this._getLabelSize(label).w;
        },
        /**
         * @private
         */
        getLabelCapacity: function(exampleTime) {
          var me = this;
          var timeOpts = me.options.time;
          var displayFormats = timeOpts.displayFormats;
          var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
          var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
          var size = me._getLabelSize(exampleLabel);
          var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);
          if (me.options.offset) {
            capacity--;
          }
          return capacity > 0 ? capacity : 1;
        }
      });
      var _defaults$4 = defaultConfig$4;
      scale_time._defaults = _defaults$4;
      var scales = {
        category: scale_category,
        linear: scale_linear,
        logarithmic: scale_logarithmic,
        radialLinear: scale_radialLinear,
        time: scale_time
      };
      var FORMATS = {
        datetime: "MMM D, YYYY, h:mm:ss a",
        millisecond: "h:mm:ss.SSS a",
        second: "h:mm:ss a",
        minute: "h:mm a",
        hour: "hA",
        day: "MMM D",
        week: "ll",
        month: "MMM YYYY",
        quarter: "[Q]Q - YYYY",
        year: "YYYY"
      };
      core_adapters._date.override(typeof moment === "function" ? {
        _id: "moment",
        // DEBUG ONLY
        formats: function() {
          return FORMATS;
        },
        parse: function(value, format) {
          if (typeof value === "string" && typeof format === "string") {
            value = moment(value, format);
          } else if (!(value instanceof moment)) {
            value = moment(value);
          }
          return value.isValid() ? value.valueOf() : null;
        },
        format: function(time, format) {
          return moment(time).format(format);
        },
        add: function(time, amount, unit) {
          return moment(time).add(amount, unit).valueOf();
        },
        diff: function(max, min, unit) {
          return moment(max).diff(moment(min), unit);
        },
        startOf: function(time, unit, weekday) {
          time = moment(time);
          if (unit === "isoWeek") {
            return time.isoWeekday(weekday).valueOf();
          }
          return time.startOf(unit).valueOf();
        },
        endOf: function(time, unit) {
          return moment(time).endOf(unit).valueOf();
        },
        // DEPRECATIONS
        /**
         * Provided for backward compatibility with scale.getValueForPixel().
         * @deprecated since version 2.8.0
         * @todo remove at version 3
         * @private
         */
        _create: function(time) {
          return moment(time);
        }
      } : {});
      core_defaults._set("global", {
        plugins: {
          filler: {
            propagate: true
          }
        }
      });
      var mappers = {
        dataset: function(source) {
          var index = source.fill;
          var chart = source.chart;
          var meta = chart.getDatasetMeta(index);
          var visible = meta && chart.isDatasetVisible(index);
          var points = visible && meta.dataset._children || [];
          var length = points.length || 0;
          return !length ? null : function(point, i2) {
            return i2 < length && points[i2]._view || null;
          };
        },
        boundary: function(source) {
          var boundary = source.boundary;
          var x = boundary ? boundary.x : null;
          var y2 = boundary ? boundary.y : null;
          if (helpers$1.isArray(boundary)) {
            return function(point, i2) {
              return boundary[i2];
            };
          }
          return function(point) {
            return {
              x: x === null ? point.x : x,
              y: y2 === null ? point.y : y2
            };
          };
        }
      };
      function decodeFill(el, index, count) {
        var model = el._model || {};
        var fill = model.fill;
        var target;
        if (fill === void 0) {
          fill = !!model.backgroundColor;
        }
        if (fill === false || fill === null) {
          return false;
        }
        if (fill === true) {
          return "origin";
        }
        target = parseFloat(fill, 10);
        if (isFinite(target) && Math.floor(target) === target) {
          if (fill[0] === "-" || fill[0] === "+") {
            target = index + target;
          }
          if (target === index || target < 0 || target >= count) {
            return false;
          }
          return target;
        }
        switch (fill) {
          case "bottom":
            return "start";
          case "top":
            return "end";
          case "zero":
            return "origin";
          case "origin":
          case "start":
          case "end":
            return fill;
          default:
            return false;
        }
      }
      function computeLinearBoundary(source) {
        var model = source.el._model || {};
        var scale2 = source.el._scale || {};
        var fill = source.fill;
        var target = null;
        var horizontal;
        if (isFinite(fill)) {
          return null;
        }
        if (fill === "start") {
          target = model.scaleBottom === void 0 ? scale2.bottom : model.scaleBottom;
        } else if (fill === "end") {
          target = model.scaleTop === void 0 ? scale2.top : model.scaleTop;
        } else if (model.scaleZero !== void 0) {
          target = model.scaleZero;
        } else if (scale2.getBasePixel) {
          target = scale2.getBasePixel();
        }
        if (target !== void 0 && target !== null) {
          if (target.x !== void 0 && target.y !== void 0) {
            return target;
          }
          if (helpers$1.isFinite(target)) {
            horizontal = scale2.isHorizontal();
            return {
              x: horizontal ? target : null,
              y: horizontal ? null : target
            };
          }
        }
        return null;
      }
      function computeCircularBoundary(source) {
        var scale2 = source.el._scale;
        var options2 = scale2.options;
        var length = scale2.chart.data.labels.length;
        var fill = source.fill;
        var target = [];
        var start, end, center, i2, point;
        if (!length) {
          return null;
        }
        start = options2.ticks.reverse ? scale2.max : scale2.min;
        end = options2.ticks.reverse ? scale2.min : scale2.max;
        center = scale2.getPointPositionForValue(0, start);
        for (i2 = 0; i2 < length; ++i2) {
          point = fill === "start" || fill === "end" ? scale2.getPointPositionForValue(i2, fill === "start" ? start : end) : scale2.getBasePosition(i2);
          if (options2.gridLines.circular) {
            point.cx = center.x;
            point.cy = center.y;
            point.angle = scale2.getIndexAngle(i2) - Math.PI / 2;
          }
          target.push(point);
        }
        return target;
      }
      function computeBoundary(source) {
        var scale2 = source.el._scale || {};
        if (scale2.getPointPositionForValue) {
          return computeCircularBoundary(source);
        }
        return computeLinearBoundary(source);
      }
      function resolveTarget(sources, index, propagate) {
        var source = sources[index];
        var fill = source.fill;
        var visited = [index];
        var target;
        if (!propagate) {
          return fill;
        }
        while (fill !== false && visited.indexOf(fill) === -1) {
          if (!isFinite(fill)) {
            return fill;
          }
          target = sources[fill];
          if (!target) {
            return false;
          }
          if (target.visible) {
            return fill;
          }
          visited.push(fill);
          fill = target.fill;
        }
        return false;
      }
      function createMapper(source) {
        var fill = source.fill;
        var type = "dataset";
        if (fill === false) {
          return null;
        }
        if (!isFinite(fill)) {
          type = "boundary";
        }
        return mappers[type](source);
      }
      function isDrawable(point) {
        return point && !point.skip;
      }
      function drawArea(ctx, curve0, curve1, len0, len1) {
        var i2, cx, cy, r2;
        if (!len0 || !len1) {
          return;
        }
        ctx.moveTo(curve0[0].x, curve0[0].y);
        for (i2 = 1; i2 < len0; ++i2) {
          helpers$1.canvas.lineTo(ctx, curve0[i2 - 1], curve0[i2]);
        }
        if (curve1[0].angle !== void 0) {
          cx = curve1[0].cx;
          cy = curve1[0].cy;
          r2 = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
          for (i2 = len1 - 1; i2 > 0; --i2) {
            ctx.arc(cx, cy, r2, curve1[i2].angle, curve1[i2 - 1].angle, true);
          }
          return;
        }
        ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);
        for (i2 = len1 - 1; i2 > 0; --i2) {
          helpers$1.canvas.lineTo(ctx, curve1[i2], curve1[i2 - 1], true);
        }
      }
      function doFill(ctx, points, mapper, view, color, loop) {
        var count = points.length;
        var span = view.spanGaps;
        var curve0 = [];
        var curve1 = [];
        var len0 = 0;
        var len1 = 0;
        var i2, ilen, index, p0, p1, d0, d1, loopOffset;
        ctx.beginPath();
        for (i2 = 0, ilen = count; i2 < ilen; ++i2) {
          index = i2 % count;
          p0 = points[index]._view;
          p1 = mapper(p0, index, view);
          d0 = isDrawable(p0);
          d1 = isDrawable(p1);
          if (loop && loopOffset === void 0 && d0) {
            loopOffset = i2 + 1;
            ilen = count + loopOffset;
          }
          if (d0 && d1) {
            len0 = curve0.push(p0);
            len1 = curve1.push(p1);
          } else if (len0 && len1) {
            if (!span) {
              drawArea(ctx, curve0, curve1, len0, len1);
              len0 = len1 = 0;
              curve0 = [];
              curve1 = [];
            } else {
              if (d0) {
                curve0.push(p0);
              }
              if (d1) {
                curve1.push(p1);
              }
            }
          }
        }
        drawArea(ctx, curve0, curve1, len0, len1);
        ctx.closePath();
        ctx.fillStyle = color;
        ctx.fill();
      }
      var plugin_filler = {
        id: "filler",
        afterDatasetsUpdate: function(chart, options2) {
          var count = (chart.data.datasets || []).length;
          var propagate = options2.propagate;
          var sources = [];
          var meta, i2, el, source;
          for (i2 = 0; i2 < count; ++i2) {
            meta = chart.getDatasetMeta(i2);
            el = meta.dataset;
            source = null;
            if (el && el._model && el instanceof elements.Line) {
              source = {
                visible: chart.isDatasetVisible(i2),
                fill: decodeFill(el, i2, count),
                chart,
                el
              };
            }
            meta.$filler = source;
            sources.push(source);
          }
          for (i2 = 0; i2 < count; ++i2) {
            source = sources[i2];
            if (!source) {
              continue;
            }
            source.fill = resolveTarget(sources, i2, propagate);
            source.boundary = computeBoundary(source);
            source.mapper = createMapper(source);
          }
        },
        beforeDatasetsDraw: function(chart) {
          var metasets = chart._getSortedVisibleDatasetMetas();
          var ctx = chart.ctx;
          var meta, i2, el, view, points, mapper, color;
          for (i2 = metasets.length - 1; i2 >= 0; --i2) {
            meta = metasets[i2].$filler;
            if (!meta || !meta.visible) {
              continue;
            }
            el = meta.el;
            view = el._view;
            points = el._children || [];
            mapper = meta.mapper;
            color = view.backgroundColor || core_defaults.global.defaultColor;
            if (mapper && color && points.length) {
              helpers$1.canvas.clipArea(ctx, chart.chartArea);
              doFill(ctx, points, mapper, view, color, el._loop);
              helpers$1.canvas.unclipArea(ctx);
            }
          }
        }
      };
      var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
      var noop$1 = helpers$1.noop;
      var valueOrDefault$e = helpers$1.valueOrDefault;
      core_defaults._set("global", {
        legend: {
          display: true,
          position: "top",
          align: "center",
          fullWidth: true,
          reverse: false,
          weight: 1e3,
          // a callback that will handle
          onClick: function(e2, legendItem) {
            var index = legendItem.datasetIndex;
            var ci = this.chart;
            var meta = ci.getDatasetMeta(index);
            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
            ci.update();
          },
          onHover: null,
          onLeave: null,
          labels: {
            boxWidth: 40,
            padding: 10,
            // Generates labels shown in the legend
            // Valid properties to return:
            // text : text to display
            // fillStyle : fill of coloured box
            // strokeStyle: stroke of coloured box
            // hidden : if this legend item refers to a hidden item
            // lineCap : cap style for line
            // lineDash
            // lineDashOffset :
            // lineJoin :
            // lineWidth :
            generateLabels: function(chart) {
              var datasets = chart.data.datasets;
              var options2 = chart.options.legend || {};
              var usePointStyle = options2.labels && options2.labels.usePointStyle;
              return chart._getSortedDatasetMetas().map(function(meta) {
                var style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
                return {
                  text: datasets[meta.index].label,
                  fillStyle: style.backgroundColor,
                  hidden: !chart.isDatasetVisible(meta.index),
                  lineCap: style.borderCapStyle,
                  lineDash: style.borderDash,
                  lineDashOffset: style.borderDashOffset,
                  lineJoin: style.borderJoinStyle,
                  lineWidth: style.borderWidth,
                  strokeStyle: style.borderColor,
                  pointStyle: style.pointStyle,
                  rotation: style.rotation,
                  // Below is extra data used for toggling the datasets
                  datasetIndex: meta.index
                };
              }, this);
            }
          }
        },
        legendCallback: function(chart) {
          var list = document.createElement("ul");
          var datasets = chart.data.datasets;
          var i2, ilen, listItem, listItemSpan;
          list.setAttribute("class", chart.id + "-legend");
          for (i2 = 0, ilen = datasets.length; i2 < ilen; i2++) {
            listItem = list.appendChild(document.createElement("li"));
            listItemSpan = listItem.appendChild(document.createElement("span"));
            listItemSpan.style.backgroundColor = datasets[i2].backgroundColor;
            if (datasets[i2].label) {
              listItem.appendChild(document.createTextNode(datasets[i2].label));
            }
          }
          return list.outerHTML;
        }
      });
      function getBoxWidth(labelOpts, fontSize) {
        return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;
      }
      var Legend = core_element.extend({
        initialize: function(config) {
          var me = this;
          helpers$1.extend(me, config);
          me.legendHitBoxes = [];
          me._hoveredItem = null;
          me.doughnutMode = false;
        },
        // These methods are ordered by lifecycle. Utilities then follow.
        // Any function defined here is inherited by all legend types.
        // Any function can be extended by the legend type
        beforeUpdate: noop$1,
        update: function(maxWidth, maxHeight, margins) {
          var me = this;
          me.beforeUpdate();
          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = margins;
          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions();
          me.beforeBuildLabels();
          me.buildLabels();
          me.afterBuildLabels();
          me.beforeFit();
          me.fit();
          me.afterFit();
          me.afterUpdate();
          return me.minSize;
        },
        afterUpdate: noop$1,
        //
        beforeSetDimensions: noop$1,
        setDimensions: function() {
          var me = this;
          if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
          }
          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0;
          me.minSize = {
            width: 0,
            height: 0
          };
        },
        afterSetDimensions: noop$1,
        //
        beforeBuildLabels: noop$1,
        buildLabels: function() {
          var me = this;
          var labelOpts = me.options.labels || {};
          var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];
          if (labelOpts.filter) {
            legendItems = legendItems.filter(function(item) {
              return labelOpts.filter(item, me.chart.data);
            });
          }
          if (me.options.reverse) {
            legendItems.reverse();
          }
          me.legendItems = legendItems;
        },
        afterBuildLabels: noop$1,
        //
        beforeFit: noop$1,
        fit: function() {
          var me = this;
          var opts = me.options;
          var labelOpts = opts.labels;
          var display = opts.display;
          var ctx = me.ctx;
          var labelFont = helpers$1.options._parseFont(labelOpts);
          var fontSize = labelFont.size;
          var hitboxes = me.legendHitBoxes = [];
          var minSize = me.minSize;
          var isHorizontal = me.isHorizontal();
          if (isHorizontal) {
            minSize.width = me.maxWidth;
            minSize.height = display ? 10 : 0;
          } else {
            minSize.width = display ? 10 : 0;
            minSize.height = me.maxHeight;
          }
          if (!display) {
            me.width = minSize.width = me.height = minSize.height = 0;
            return;
          }
          ctx.font = labelFont.string;
          if (isHorizontal) {
            var lineWidths = me.lineWidths = [0];
            var totalHeight = 0;
            ctx.textAlign = "left";
            ctx.textBaseline = "middle";
            helpers$1.each(me.legendItems, function(legendItem, i2) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
              if (i2 === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
                totalHeight += fontSize + labelOpts.padding;
                lineWidths[lineWidths.length - (i2 > 0 ? 0 : 1)] = 0;
              }
              hitboxes[i2] = {
                left: 0,
                top: 0,
                width,
                height: fontSize
              };
              lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
            });
            minSize.height += totalHeight;
          } else {
            var vPadding = labelOpts.padding;
            var columnWidths = me.columnWidths = [];
            var columnHeights = me.columnHeights = [];
            var totalWidth = labelOpts.padding;
            var currentColWidth = 0;
            var currentColHeight = 0;
            helpers$1.each(me.legendItems, function(legendItem, i2) {
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
              if (i2 > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
                totalWidth += currentColWidth + labelOpts.padding;
                columnWidths.push(currentColWidth);
                columnHeights.push(currentColHeight);
                currentColWidth = 0;
                currentColHeight = 0;
              }
              currentColWidth = Math.max(currentColWidth, itemWidth);
              currentColHeight += fontSize + vPadding;
              hitboxes[i2] = {
                left: 0,
                top: 0,
                width: itemWidth,
                height: fontSize
              };
            });
            totalWidth += currentColWidth;
            columnWidths.push(currentColWidth);
            columnHeights.push(currentColHeight);
            minSize.width += totalWidth;
          }
          me.width = minSize.width;
          me.height = minSize.height;
        },
        afterFit: noop$1,
        // Shared Methods
        isHorizontal: function() {
          return this.options.position === "top" || this.options.position === "bottom";
        },
        // Actually draw the legend on the canvas
        draw: function() {
          var me = this;
          var opts = me.options;
          var labelOpts = opts.labels;
          var globalDefaults = core_defaults.global;
          var defaultColor2 = globalDefaults.defaultColor;
          var lineDefault = globalDefaults.elements.line;
          var legendHeight = me.height;
          var columnHeights = me.columnHeights;
          var legendWidth = me.width;
          var lineWidths = me.lineWidths;
          if (!opts.display) {
            return;
          }
          var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
          var ctx = me.ctx;
          var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
          var labelFont = helpers$1.options._parseFont(labelOpts);
          var fontSize = labelFont.size;
          var cursor;
          ctx.textAlign = rtlHelper.textAlign("left");
          ctx.textBaseline = "middle";
          ctx.lineWidth = 0.5;
          ctx.strokeStyle = fontColor;
          ctx.fillStyle = fontColor;
          ctx.font = labelFont.string;
          var boxWidth = getBoxWidth(labelOpts, fontSize);
          var hitboxes = me.legendHitBoxes;
          var drawLegendBox = function(x, y2, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0) {
              return;
            }
            ctx.save();
            var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
            ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor2);
            ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
            ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
            ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor2);
            if (ctx.setLineDash) {
              ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
            }
            if (labelOpts && labelOpts.usePointStyle) {
              var radius = boxWidth * Math.SQRT2 / 2;
              var centerX = rtlHelper.xPlus(x, boxWidth / 2);
              var centerY = y2 + fontSize / 2;
              helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
            } else {
              ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y2, boxWidth, fontSize);
              if (lineWidth !== 0) {
                ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y2, boxWidth, fontSize);
              }
            }
            ctx.restore();
          };
          var fillText2 = function(x, y2, legendItem, textWidth) {
            var halfFontSize = fontSize / 2;
            var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
            var yMiddle = y2 + halfFontSize;
            ctx.fillText(legendItem.text, xLeft, yMiddle);
            if (legendItem.hidden) {
              ctx.beginPath();
              ctx.lineWidth = 2;
              ctx.moveTo(xLeft, yMiddle);
              ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
              ctx.stroke();
            }
          };
          var alignmentOffset = function(dimension, blockSize) {
            switch (opts.align) {
              case "start":
                return labelOpts.padding;
              case "end":
                return dimension - blockSize;
              default:
                return (dimension - blockSize + labelOpts.padding) / 2;
            }
          };
          var isHorizontal = me.isHorizontal();
          if (isHorizontal) {
            cursor = {
              x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
              y: me.top + labelOpts.padding,
              line: 0
            };
          } else {
            cursor = {
              x: me.left + labelOpts.padding,
              y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
              line: 0
            };
          }
          helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);
          var itemHeight = fontSize + labelOpts.padding;
          helpers$1.each(me.legendItems, function(legendItem, i2) {
            var textWidth = ctx.measureText(legendItem.text).width;
            var width = boxWidth + fontSize / 2 + textWidth;
            var x = cursor.x;
            var y2 = cursor.y;
            rtlHelper.setWidth(me.minSize.width);
            if (isHorizontal) {
              if (i2 > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
                y2 = cursor.y += itemHeight;
                cursor.line++;
                x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
              }
            } else if (i2 > 0 && y2 + itemHeight > me.top + me.minSize.height) {
              x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
              cursor.line++;
              y2 = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
            }
            var realX = rtlHelper.x(x);
            drawLegendBox(realX, y2, legendItem);
            hitboxes[i2].left = rtlHelper.leftForLtr(realX, hitboxes[i2].width);
            hitboxes[i2].top = y2;
            fillText2(realX, y2, legendItem, textWidth);
            if (isHorizontal) {
              cursor.x += width + labelOpts.padding;
            } else {
              cursor.y += itemHeight;
            }
          });
          helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
        },
        /**
         * @private
         */
        _getLegendItemAt: function(x, y2) {
          var me = this;
          var i2, hitBox, lh;
          if (x >= me.left && x <= me.right && y2 >= me.top && y2 <= me.bottom) {
            lh = me.legendHitBoxes;
            for (i2 = 0; i2 < lh.length; ++i2) {
              hitBox = lh[i2];
              if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y2 >= hitBox.top && y2 <= hitBox.top + hitBox.height) {
                return me.legendItems[i2];
              }
            }
          }
          return null;
        },
        /**
         * Handle an event
         * @private
         * @param {IEvent} event - The event to handle
         */
        handleEvent: function(e2) {
          var me = this;
          var opts = me.options;
          var type = e2.type === "mouseup" ? "click" : e2.type;
          var hoveredItem;
          if (type === "mousemove") {
            if (!opts.onHover && !opts.onLeave) {
              return;
            }
          } else if (type === "click") {
            if (!opts.onClick) {
              return;
            }
          } else {
            return;
          }
          hoveredItem = me._getLegendItemAt(e2.x, e2.y);
          if (type === "click") {
            if (hoveredItem && opts.onClick) {
              opts.onClick.call(me, e2.native, hoveredItem);
            }
          } else {
            if (opts.onLeave && hoveredItem !== me._hoveredItem) {
              if (me._hoveredItem) {
                opts.onLeave.call(me, e2.native, me._hoveredItem);
              }
              me._hoveredItem = hoveredItem;
            }
            if (opts.onHover && hoveredItem) {
              opts.onHover.call(me, e2.native, hoveredItem);
            }
          }
        }
      });
      function createNewLegendAndAttach(chart, legendOpts) {
        var legend2 = new Legend({
          ctx: chart.ctx,
          options: legendOpts,
          chart
        });
        core_layouts.configure(chart, legend2, legendOpts);
        core_layouts.addBox(chart, legend2);
        chart.legend = legend2;
      }
      var plugin_legend = {
        id: "legend",
        /**
         * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
         * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
         * the plugin, which one will be re-exposed in the chart.js file.
         * https://github.com/chartjs/Chart.js/pull/2640
         * @private
         */
        _element: Legend,
        beforeInit: function(chart) {
          var legendOpts = chart.options.legend;
          if (legendOpts) {
            createNewLegendAndAttach(chart, legendOpts);
          }
        },
        beforeUpdate: function(chart) {
          var legendOpts = chart.options.legend;
          var legend2 = chart.legend;
          if (legendOpts) {
            helpers$1.mergeIf(legendOpts, core_defaults.global.legend);
            if (legend2) {
              core_layouts.configure(chart, legend2, legendOpts);
              legend2.options = legendOpts;
            } else {
              createNewLegendAndAttach(chart, legendOpts);
            }
          } else if (legend2) {
            core_layouts.removeBox(chart, legend2);
            delete chart.legend;
          }
        },
        afterEvent: function(chart, e2) {
          var legend2 = chart.legend;
          if (legend2) {
            legend2.handleEvent(e2);
          }
        }
      };
      var noop$2 = helpers$1.noop;
      core_defaults._set("global", {
        title: {
          display: false,
          fontStyle: "bold",
          fullWidth: true,
          padding: 10,
          position: "top",
          text: "",
          weight: 2e3
          // by default greater than legend (1000) to be above
        }
      });
      var Title = core_element.extend({
        initialize: function(config) {
          var me = this;
          helpers$1.extend(me, config);
          me.legendHitBoxes = [];
        },
        // These methods are ordered by lifecycle. Utilities then follow.
        beforeUpdate: noop$2,
        update: function(maxWidth, maxHeight, margins) {
          var me = this;
          me.beforeUpdate();
          me.maxWidth = maxWidth;
          me.maxHeight = maxHeight;
          me.margins = margins;
          me.beforeSetDimensions();
          me.setDimensions();
          me.afterSetDimensions();
          me.beforeBuildLabels();
          me.buildLabels();
          me.afterBuildLabels();
          me.beforeFit();
          me.fit();
          me.afterFit();
          me.afterUpdate();
          return me.minSize;
        },
        afterUpdate: noop$2,
        //
        beforeSetDimensions: noop$2,
        setDimensions: function() {
          var me = this;
          if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
          } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
          }
          me.paddingLeft = 0;
          me.paddingTop = 0;
          me.paddingRight = 0;
          me.paddingBottom = 0;
          me.minSize = {
            width: 0,
            height: 0
          };
        },
        afterSetDimensions: noop$2,
        //
        beforeBuildLabels: noop$2,
        buildLabels: noop$2,
        afterBuildLabels: noop$2,
        //
        beforeFit: noop$2,
        fit: function() {
          var me = this;
          var opts = me.options;
          var minSize = me.minSize = {};
          var isHorizontal = me.isHorizontal();
          var lineCount, textSize;
          if (!opts.display) {
            me.width = minSize.width = me.height = minSize.height = 0;
            return;
          }
          lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
          textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;
          me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
          me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
        },
        afterFit: noop$2,
        // Shared Methods
        isHorizontal: function() {
          var pos = this.options.position;
          return pos === "top" || pos === "bottom";
        },
        // Actually draw the title block on the canvas
        draw: function() {
          var me = this;
          var ctx = me.ctx;
          var opts = me.options;
          if (!opts.display) {
            return;
          }
          var fontOpts = helpers$1.options._parseFont(opts);
          var lineHeight = fontOpts.lineHeight;
          var offset = lineHeight / 2 + opts.padding;
          var rotation = 0;
          var top = me.top;
          var left = me.left;
          var bottom = me.bottom;
          var right = me.right;
          var maxWidth, titleX, titleY;
          ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor);
          ctx.font = fontOpts.string;
          if (me.isHorizontal()) {
            titleX = left + (right - left) / 2;
            titleY = top + offset;
            maxWidth = right - left;
          } else {
            titleX = opts.position === "left" ? left + offset : right - offset;
            titleY = top + (bottom - top) / 2;
            maxWidth = bottom - top;
            rotation = Math.PI * (opts.position === "left" ? -0.5 : 0.5);
          }
          ctx.save();
          ctx.translate(titleX, titleY);
          ctx.rotate(rotation);
          ctx.textAlign = "center";
          ctx.textBaseline = "middle";
          var text = opts.text;
          if (helpers$1.isArray(text)) {
            var y2 = 0;
            for (var i2 = 0; i2 < text.length; ++i2) {
              ctx.fillText(text[i2], 0, y2, maxWidth);
              y2 += lineHeight;
            }
          } else {
            ctx.fillText(text, 0, 0, maxWidth);
          }
          ctx.restore();
        }
      });
      function createNewTitleBlockAndAttach(chart, titleOpts) {
        var title2 = new Title({
          ctx: chart.ctx,
          options: titleOpts,
          chart
        });
        core_layouts.configure(chart, title2, titleOpts);
        core_layouts.addBox(chart, title2);
        chart.titleBlock = title2;
      }
      var plugin_title = {
        id: "title",
        /**
         * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
         * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
         * the plugin, which one will be re-exposed in the chart.js file.
         * https://github.com/chartjs/Chart.js/pull/2640
         * @private
         */
        _element: Title,
        beforeInit: function(chart) {
          var titleOpts = chart.options.title;
          if (titleOpts) {
            createNewTitleBlockAndAttach(chart, titleOpts);
          }
        },
        beforeUpdate: function(chart) {
          var titleOpts = chart.options.title;
          var titleBlock = chart.titleBlock;
          if (titleOpts) {
            helpers$1.mergeIf(titleOpts, core_defaults.global.title);
            if (titleBlock) {
              core_layouts.configure(chart, titleBlock, titleOpts);
              titleBlock.options = titleOpts;
            } else {
              createNewTitleBlockAndAttach(chart, titleOpts);
            }
          } else if (titleBlock) {
            core_layouts.removeBox(chart, titleBlock);
            delete chart.titleBlock;
          }
        }
      };
      var plugins = {};
      var filler = plugin_filler;
      var legend = plugin_legend;
      var title = plugin_title;
      plugins.filler = filler;
      plugins.legend = legend;
      plugins.title = title;
      core_controller.helpers = helpers$1;
      core_helpers();
      core_controller._adapters = core_adapters;
      core_controller.Animation = core_animation;
      core_controller.animationService = core_animations;
      core_controller.controllers = controllers;
      core_controller.DatasetController = core_datasetController;
      core_controller.defaults = core_defaults;
      core_controller.Element = core_element;
      core_controller.elements = elements;
      core_controller.Interaction = core_interaction;
      core_controller.layouts = core_layouts;
      core_controller.platform = platform;
      core_controller.plugins = core_plugins;
      core_controller.Scale = core_scale;
      core_controller.scaleService = core_scaleService;
      core_controller.Ticks = core_ticks;
      core_controller.Tooltip = core_tooltip;
      core_controller.helpers.each(scales, function(scale2, type) {
        core_controller.scaleService.registerScaleType(type, scale2, scale2._defaults);
      });
      for (var k in plugins) {
        if (plugins.hasOwnProperty(k)) {
          core_controller.plugins.register(plugins[k]);
        }
      }
      core_controller.platform.initialize();
      var src = core_controller;
      if (typeof window !== "undefined") {
        window.Chart = core_controller;
      }
      core_controller.Chart = core_controller;
      core_controller.Legend = plugins.legend._element;
      core_controller.Title = plugins.title._element;
      core_controller.pluginService = core_controller.plugins;
      core_controller.PluginBase = core_controller.Element.extend({});
      core_controller.canvasHelpers = core_controller.helpers.canvas;
      core_controller.layoutService = core_controller.layouts;
      core_controller.LinearScaleBase = scale_linearbase;
      core_controller.helpers.each(
        [
          "Bar",
          "Bubble",
          "Doughnut",
          "Line",
          "PolarArea",
          "Radar",
          "Scatter"
        ],
        function(klass) {
          core_controller[klass] = function(ctx, cfg) {
            return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
              type: klass.charAt(0).toLowerCase() + klass.slice(1)
            }));
          };
        }
      );
      return src;
    });
  }
});

// node_modules/chart-js-fabric/dist/chart-js-fabric.es5.js
var import_fabric = __toESM(require_fabric());
var import_chart = __toESM(require_Chart());
var n = function(t2, e2) {
  return (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
    t3.__proto__ = e3;
  } || function(t3, e3) {
    for (var n2 in e3)
      Object.prototype.hasOwnProperty.call(e3, n2) && (t3[n2] = e3[n2]);
  })(t2, e2);
};
var r = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
var o = /^\s+|\s+$/g;
var i = /^[-+]0x[0-9a-f]+$/i;
var a = /^0b[01]+$/i;
var c = /^0o[0-7]+$/i;
var u = parseInt;
var s = "object" == typeof r && r && r.Object === Object && r;
var f = "object" == typeof self && self && self.Object === Object && self;
var l = s || f || Function("return this")();
var h = Object.prototype.toString;
var p = Math.max;
var d = Math.min;
var v = function() {
  return l.Date.now();
};
function _(t2) {
  var e2 = typeof t2;
  return !!t2 && ("object" == e2 || "function" == e2);
}
function y(t2) {
  if ("number" == typeof t2)
    return t2;
  if (function(t3) {
    return "symbol" == typeof t3 || function(t4) {
      return !!t4 && "object" == typeof t4;
    }(t3) && "[object Symbol]" == h.call(t3);
  }(t2))
    return NaN;
  if (_(t2)) {
    var e2 = "function" == typeof t2.valueOf ? t2.valueOf() : t2;
    t2 = _(e2) ? e2 + "" : e2;
  }
  if ("string" != typeof t2)
    return 0 === t2 ? t2 : +t2;
  t2 = t2.replace(o, "");
  var n2 = a.test(t2);
  return n2 || c.test(t2) ? u(t2.slice(2), n2 ? 2 : 8) : i.test(t2) ? NaN : +t2;
}
var b;
var g = function(t2, e2, n2) {
  var r2, o2, i2, a2, c2, u2, s2 = 0, f2 = false, l2 = false, h2 = true;
  if ("function" != typeof t2)
    throw new TypeError("Expected a function");
  function b2(e3) {
    var n3 = r2, i3 = o2;
    return r2 = o2 = void 0, s2 = e3, a2 = t2.apply(i3, n3);
  }
  function g2(t3) {
    return s2 = t3, c2 = setTimeout(w2, e2), f2 ? b2(t3) : a2;
  }
  function j2(t3) {
    var n3 = t3 - u2;
    return void 0 === u2 || n3 >= e2 || n3 < 0 || l2 && t3 - s2 >= i2;
  }
  function w2() {
    var t3 = v();
    if (j2(t3))
      return m2(t3);
    c2 = setTimeout(w2, function(t4) {
      var n3 = e2 - (t4 - u2);
      return l2 ? d(n3, i2 - (t4 - s2)) : n3;
    }(t3));
  }
  function m2(t3) {
    return c2 = void 0, h2 && r2 ? b2(t3) : (r2 = o2 = void 0, a2);
  }
  function O2() {
    var t3 = v(), n3 = j2(t3);
    if (r2 = arguments, o2 = this, u2 = t3, n3) {
      if (void 0 === c2)
        return g2(u2);
      if (l2)
        return c2 = setTimeout(w2, e2), b2(u2);
    }
    return void 0 === c2 && (c2 = setTimeout(w2, e2)), a2;
  }
  return e2 = y(e2) || 0, _(n2) && (f2 = !!n2.leading, i2 = (l2 = "maxWait" in n2) ? p(y(n2.maxWait) || 0, e2) : i2, h2 = "trailing" in n2 ? !!n2.trailing : h2), O2.cancel = function() {
    void 0 !== c2 && clearTimeout(c2), s2 = 0, r2 = u2 = o2 = c2 = void 0;
  }, O2.flush = function() {
    return void 0 === c2 ? a2 : m2(v());
  }, O2;
};
var j = (function(t2, e2) {
  var n2 = "__lodash_hash_undefined__", o2 = 9007199254740991, i2 = "[object Arguments]", a2 = "[object Function]", c2 = "[object Object]", u2 = /^\[object .+?Constructor\]$/, s2 = /^(?:0|[1-9]\d*)$/, f2 = {};
  f2["[object Float32Array]"] = f2["[object Float64Array]"] = f2["[object Int8Array]"] = f2["[object Int16Array]"] = f2["[object Int32Array]"] = f2["[object Uint8Array]"] = f2["[object Uint8ClampedArray]"] = f2["[object Uint16Array]"] = f2["[object Uint32Array]"] = true, f2[i2] = f2["[object Array]"] = f2["[object ArrayBuffer]"] = f2["[object Boolean]"] = f2["[object DataView]"] = f2["[object Date]"] = f2["[object Error]"] = f2[a2] = f2["[object Map]"] = f2["[object Number]"] = f2[c2] = f2["[object RegExp]"] = f2["[object Set]"] = f2["[object String]"] = f2["[object WeakMap]"] = false;
  var l2 = "object" == typeof r && r && r.Object === Object && r, h2 = "object" == typeof self && self && self.Object === Object && self, p2 = l2 || h2 || Function("return this")(), d2 = e2 && !e2.nodeType && e2, v2 = d2 && t2 && !t2.nodeType && t2, _2 = v2 && v2.exports === d2, y2 = _2 && l2.process, b2 = function() {
    try {
      var t3 = v2 && v2.require && v2.require("util").types;
      return t3 || y2 && y2.binding && y2.binding("util");
    } catch (t4) {
    }
  }(), g2 = b2 && b2.isTypedArray;
  function j2(t3, e3, n3) {
    switch (n3.length) {
      case 0:
        return t3.call(e3);
      case 1:
        return t3.call(e3, n3[0]);
      case 2:
        return t3.call(e3, n3[0], n3[1]);
      case 3:
        return t3.call(e3, n3[0], n3[1], n3[2]);
    }
    return t3.apply(e3, n3);
  }
  var w2, m2, O2, C2 = Array.prototype, z2 = Function.prototype, S2 = Object.prototype, A = p2["__core-js_shared__"], x = z2.toString, P = S2.hasOwnProperty, R = (w2 = /[^.]+$/.exec(A && A.keys && A.keys.IE_PROTO || "")) ? "Symbol(src)_1." + w2 : "", T = S2.toString, E = x.call(Object), $ = RegExp("^" + x.call(P).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"), W = _2 ? p2.Buffer : void 0, F = p2.Symbol, B = p2.Uint8Array, H = W ? W.allocUnsafe : void 0, I = (m2 = Object.getPrototypeOf, O2 = Object, function(t3) {
    return m2(O2(t3));
  }), M = Object.create, U = S2.propertyIsEnumerable, N = C2.splice, k = F ? F.toStringTag : void 0, D = function() {
    try {
      var t3 = dt(Object, "defineProperty");
      return t3({}, "", {}), t3;
    } catch (t4) {
    }
  }(), q = W ? W.isBuffer : void 0, L = Math.max, X = Date.now, Y = dt(p2, "Map"), G = dt(Object, "create"), V = function() {
    function t3() {
    }
    return function(e3) {
      if (!St(e3))
        return {};
      if (M)
        return M(e3);
      t3.prototype = e3;
      var n3 = new t3();
      return t3.prototype = void 0, n3;
    };
  }();
  function J(t3) {
    var e3 = -1, n3 = null == t3 ? 0 : t3.length;
    for (this.clear(); ++e3 < n3; ) {
      var r2 = t3[e3];
      this.set(r2[0], r2[1]);
    }
  }
  function K(t3) {
    var e3 = -1, n3 = null == t3 ? 0 : t3.length;
    for (this.clear(); ++e3 < n3; ) {
      var r2 = t3[e3];
      this.set(r2[0], r2[1]);
    }
  }
  function Q(t3) {
    var e3 = -1, n3 = null == t3 ? 0 : t3.length;
    for (this.clear(); ++e3 < n3; ) {
      var r2 = t3[e3];
      this.set(r2[0], r2[1]);
    }
  }
  function Z(t3) {
    var e3 = this.__data__ = new K(t3);
    this.size = e3.size;
  }
  function tt(t3, e3) {
    var n3 = wt(t3), r2 = !n3 && jt(t3), o3 = !n3 && !r2 && Ot(t3), i3 = !n3 && !r2 && !o3 && xt(t3), a3 = n3 || r2 || o3 || i3, c3 = a3 ? function(t4, e4) {
      for (var n4 = -1, r3 = Array(t4); ++n4 < t4; )
        r3[n4] = e4(n4);
      return r3;
    }(t3.length, String) : [], u3 = c3.length;
    for (var s3 in t3)
      !e3 && !P.call(t3, s3) || a3 && ("length" == s3 || o3 && ("offset" == s3 || "parent" == s3) || i3 && ("buffer" == s3 || "byteLength" == s3 || "byteOffset" == s3) || vt(s3, u3)) || c3.push(s3);
    return c3;
  }
  function et(t3, e3, n3) {
    (void 0 !== n3 && !gt(t3[e3], n3) || void 0 === n3 && !(e3 in t3)) && ot(t3, e3, n3);
  }
  function nt(t3, e3, n3) {
    var r2 = t3[e3];
    P.call(t3, e3) && gt(r2, n3) && (void 0 !== n3 || e3 in t3) || ot(t3, e3, n3);
  }
  function rt(t3, e3) {
    for (var n3 = t3.length; n3--; )
      if (gt(t3[n3][0], e3))
        return n3;
    return -1;
  }
  function ot(t3, e3, n3) {
    "__proto__" == e3 && D ? D(t3, e3, { configurable: true, enumerable: true, value: n3, writable: true }) : t3[e3] = n3;
  }
  J.prototype.clear = function() {
    this.__data__ = G ? G(null) : {}, this.size = 0;
  }, J.prototype.delete = function(t3) {
    var e3 = this.has(t3) && delete this.__data__[t3];
    return this.size -= e3 ? 1 : 0, e3;
  }, J.prototype.get = function(t3) {
    var e3 = this.__data__;
    if (G) {
      var r2 = e3[t3];
      return r2 === n2 ? void 0 : r2;
    }
    return P.call(e3, t3) ? e3[t3] : void 0;
  }, J.prototype.has = function(t3) {
    var e3 = this.__data__;
    return G ? void 0 !== e3[t3] : P.call(e3, t3);
  }, J.prototype.set = function(t3, e3) {
    var r2 = this.__data__;
    return this.size += this.has(t3) ? 0 : 1, r2[t3] = G && void 0 === e3 ? n2 : e3, this;
  }, K.prototype.clear = function() {
    this.__data__ = [], this.size = 0;
  }, K.prototype.delete = function(t3) {
    var e3 = this.__data__, n3 = rt(e3, t3);
    return !(n3 < 0 || (n3 == e3.length - 1 ? e3.pop() : N.call(e3, n3, 1), --this.size, 0));
  }, K.prototype.get = function(t3) {
    var e3 = this.__data__, n3 = rt(e3, t3);
    return n3 < 0 ? void 0 : e3[n3][1];
  }, K.prototype.has = function(t3) {
    return rt(this.__data__, t3) > -1;
  }, K.prototype.set = function(t3, e3) {
    var n3 = this.__data__, r2 = rt(n3, t3);
    return r2 < 0 ? (++this.size, n3.push([t3, e3])) : n3[r2][1] = e3, this;
  }, Q.prototype.clear = function() {
    this.size = 0, this.__data__ = { hash: new J(), map: new (Y || K)(), string: new J() };
  }, Q.prototype.delete = function(t3) {
    var e3 = pt(this, t3).delete(t3);
    return this.size -= e3 ? 1 : 0, e3;
  }, Q.prototype.get = function(t3) {
    return pt(this, t3).get(t3);
  }, Q.prototype.has = function(t3) {
    return pt(this, t3).has(t3);
  }, Q.prototype.set = function(t3, e3) {
    var n3 = pt(this, t3), r2 = n3.size;
    return n3.set(t3, e3), this.size += n3.size == r2 ? 0 : 1, this;
  }, Z.prototype.clear = function() {
    this.__data__ = new K(), this.size = 0;
  }, Z.prototype.delete = function(t3) {
    var e3 = this.__data__, n3 = e3.delete(t3);
    return this.size = e3.size, n3;
  }, Z.prototype.get = function(t3) {
    return this.__data__.get(t3);
  }, Z.prototype.has = function(t3) {
    return this.__data__.has(t3);
  }, Z.prototype.set = function(t3, e3) {
    var n3 = this.__data__;
    if (n3 instanceof K) {
      var r2 = n3.__data__;
      if (!Y || r2.length < 199)
        return r2.push([t3, e3]), this.size = ++n3.size, this;
      n3 = this.__data__ = new Q(r2);
    }
    return n3.set(t3, e3), this.size = n3.size, this;
  };
  var it, at = function(t3, e3, n3) {
    for (var r2 = -1, o3 = Object(t3), i3 = n3(t3), a3 = i3.length; a3--; ) {
      var c3 = i3[it ? a3 : ++r2];
      if (false === e3(o3[c3], c3, o3))
        break;
    }
    return t3;
  };
  function ct(t3) {
    return null == t3 ? void 0 === t3 ? "[object Undefined]" : "[object Null]" : k && k in Object(t3) ? function(t4) {
      var e3 = P.call(t4, k), n3 = t4[k];
      try {
        t4[k] = void 0;
        var r2 = true;
      } catch (t5) {
      }
      var o3 = T.call(t4);
      return r2 && (e3 ? t4[k] = n3 : delete t4[k]), o3;
    }(t3) : function(t4) {
      return T.call(t4);
    }(t3);
  }
  function ut(t3) {
    return At(t3) && ct(t3) == i2;
  }
  function st(t3) {
    return !(!St(t3) || function(t4) {
      return !!R && R in t4;
    }(t3)) && (Ct(t3) ? $ : u2).test(function(t4) {
      if (null != t4) {
        try {
          return x.call(t4);
        } catch (t5) {
        }
        try {
          return t4 + "";
        } catch (t5) {
        }
      }
      return "";
    }(t3));
  }
  function ft(t3) {
    if (!St(t3))
      return function(t4) {
        var e4 = [];
        if (null != t4)
          for (var n4 in Object(t4))
            e4.push(n4);
        return e4;
      }(t3);
    var e3 = _t(t3), n3 = [];
    for (var r2 in t3)
      ("constructor" != r2 || !e3 && P.call(t3, r2)) && n3.push(r2);
    return n3;
  }
  function lt(t3, e3, n3, r2, o3) {
    t3 !== e3 && at(e3, function(i3, a3) {
      if (o3 || (o3 = new Z()), St(i3))
        !function(t4, e4, n4, r3, o4, i4, a4) {
          var u4 = yt(t4, n4), s3 = yt(e4, n4), f3 = a4.get(s3);
          if (f3)
            et(t4, n4, f3);
          else {
            var l3, h3, p3, d3, v3, _3 = i4 ? i4(u4, s3, n4 + "", t4, e4, a4) : void 0, y3 = void 0 === _3;
            if (y3) {
              var b3 = wt(s3), g3 = !b3 && Ot(s3), j3 = !b3 && !g3 && xt(s3);
              _3 = s3, b3 || g3 || j3 ? wt(u4) ? _3 = u4 : At(v3 = u4) && mt(v3) ? _3 = function(t5, e5) {
                var n5 = -1, r4 = t5.length;
                for (e5 || (e5 = Array(r4)); ++n5 < r4; )
                  e5[n5] = t5[n5];
                return e5;
              }(u4) : g3 ? (y3 = false, _3 = function(t5, e5) {
                if (e5)
                  return t5.slice();
                var n5 = t5.length, r4 = H ? H(n5) : new t5.constructor(n5);
                return t5.copy(r4), r4;
              }(s3, true)) : j3 ? (y3 = false, p3 = (l3 = s3).buffer, d3 = new p3.constructor(p3.byteLength), new B(d3).set(new B(p3)), h3 = d3, _3 = new l3.constructor(h3, l3.byteOffset, l3.length)) : _3 = [] : function(t5) {
                if (!At(t5) || ct(t5) != c2)
                  return false;
                var e5 = I(t5);
                if (null === e5)
                  return true;
                var n5 = P.call(e5, "constructor") && e5.constructor;
                return "function" == typeof n5 && n5 instanceof n5 && x.call(n5) == E;
              }(s3) || jt(s3) ? (_3 = u4, jt(u4) ? _3 = function(t5) {
                return function(t6, e5, n5, r4) {
                  var o5 = !n5;
                  n5 || (n5 = {});
                  for (var i5 = -1, a5 = e5.length; ++i5 < a5; ) {
                    var c3 = e5[i5], u5 = r4 ? r4(n5[c3], t6[c3], c3, n5, t6) : void 0;
                    void 0 === u5 && (u5 = t6[c3]), o5 ? ot(n5, c3, u5) : nt(n5, c3, u5);
                  }
                  return n5;
                }(t5, Pt(t5));
              }(u4) : St(u4) && !Ct(u4) || (_3 = function(t5) {
                return "function" != typeof t5.constructor || _t(t5) ? {} : V(I(t5));
              }(s3))) : y3 = false;
            }
            y3 && (a4.set(s3, _3), o4(_3, s3, r3, i4, a4), a4.delete(s3)), et(t4, n4, _3);
          }
        }(t3, e3, a3, n3, lt, r2, o3);
      else {
        var u3 = r2 ? r2(yt(t3, a3), i3, a3 + "", t3, e3, o3) : void 0;
        void 0 === u3 && (u3 = i3), et(t3, a3, u3);
      }
    }, Pt);
  }
  function ht(t3, e3) {
    return bt(function(t4, e4, n3) {
      return e4 = L(void 0 === e4 ? t4.length - 1 : e4, 0), function() {
        for (var r2 = arguments, o3 = -1, i3 = L(r2.length - e4, 0), a3 = Array(i3); ++o3 < i3; )
          a3[o3] = r2[e4 + o3];
        o3 = -1;
        for (var c3 = Array(e4 + 1); ++o3 < e4; )
          c3[o3] = r2[o3];
        return c3[e4] = n3(a3), j2(t4, this, c3);
      };
    }(t3, e3, Et), t3 + "");
  }
  function pt(t3, e3) {
    var n3, r2, o3 = t3.__data__;
    return ("string" == (r2 = typeof (n3 = e3)) || "number" == r2 || "symbol" == r2 || "boolean" == r2 ? "__proto__" !== n3 : null === n3) ? o3["string" == typeof e3 ? "string" : "hash"] : o3.map;
  }
  function dt(t3, e3) {
    var n3 = function(t4, e4) {
      return null == t4 ? void 0 : t4[e4];
    }(t3, e3);
    return st(n3) ? n3 : void 0;
  }
  function vt(t3, e3) {
    var n3 = typeof t3;
    return !!(e3 = null == e3 ? o2 : e3) && ("number" == n3 || "symbol" != n3 && s2.test(t3)) && t3 > -1 && t3 % 1 == 0 && t3 < e3;
  }
  function _t(t3) {
    var e3 = t3 && t3.constructor;
    return t3 === ("function" == typeof e3 && e3.prototype || S2);
  }
  function yt(t3, e3) {
    if (("constructor" !== e3 || "function" != typeof t3[e3]) && "__proto__" != e3)
      return t3[e3];
  }
  var bt = function(t3) {
    var e3 = 0, n3 = 0;
    return function() {
      var r2 = X(), o3 = 16 - (r2 - n3);
      if (n3 = r2, o3 > 0) {
        if (++e3 >= 800)
          return arguments[0];
      } else
        e3 = 0;
      return t3.apply(void 0, arguments);
    };
  }(D ? function(t3, e3) {
    return D(t3, "toString", { configurable: true, enumerable: false, value: (n3 = e3, function() {
      return n3;
    }), writable: true });
    var n3;
  } : Et);
  function gt(t3, e3) {
    return t3 === e3 || t3 != t3 && e3 != e3;
  }
  var jt = ut(function() {
    return arguments;
  }()) ? ut : function(t3) {
    return At(t3) && P.call(t3, "callee") && !U.call(t3, "callee");
  }, wt = Array.isArray;
  function mt(t3) {
    return null != t3 && zt(t3.length) && !Ct(t3);
  }
  var Ot = q || function() {
    return false;
  };
  function Ct(t3) {
    if (!St(t3))
      return false;
    var e3 = ct(t3);
    return e3 == a2 || "[object GeneratorFunction]" == e3 || "[object AsyncFunction]" == e3 || "[object Proxy]" == e3;
  }
  function zt(t3) {
    return "number" == typeof t3 && t3 > -1 && t3 % 1 == 0 && t3 <= o2;
  }
  function St(t3) {
    var e3 = typeof t3;
    return null != t3 && ("object" == e3 || "function" == e3);
  }
  function At(t3) {
    return null != t3 && "object" == typeof t3;
  }
  var xt = g2 ? function(t3) {
    return function(e3) {
      return t3(e3);
    };
  }(g2) : function(t3) {
    return At(t3) && zt(t3.length) && !!f2[ct(t3)];
  };
  function Pt(t3) {
    return mt(t3) ? tt(t3, true) : ft(t3);
  }
  var Rt, Tt = (Rt = function(t3, e3, n3) {
    lt(t3, e3, n3);
  }, ht(function(t3, e3) {
    var n3 = -1, r2 = e3.length, o3 = r2 > 1 ? e3[r2 - 1] : void 0, i3 = r2 > 2 ? e3[2] : void 0;
    for (o3 = Rt.length > 3 && "function" == typeof o3 ? (r2--, o3) : void 0, i3 && function(t4, e4, n4) {
      if (!St(n4))
        return false;
      var r3 = typeof e4;
      return !!("number" == r3 ? mt(n4) && vt(e4, n4.length) : "string" == r3 && e4 in n4) && gt(n4[e4], t4);
    }(e3[0], e3[1], i3) && (o3 = r2 < 3 ? void 0 : o3, r2 = 1), t3 = Object(t3); ++n3 < r2; ) {
      var a3 = e3[n3];
      a3 && Rt(t3, a3, n3, o3);
    }
    return t3;
  }));
  function Et(t3) {
    return t3;
  }
  t2.exports = Tt;
}(b = { exports: {} }, b.exports), b.exports);
var w = "fabric" in import_fabric.default ? import_fabric.default.fabric : import_fabric.default;
var m = [];
var O = { plugins: m, options: { responsive: false, maintainAspectRatio: false } };
var C = { mousemove: "mousemove", mousedown: "click", mouseout: "mouseout", touchstart: "touchstart", touchmove: "touchmove" };
var z = function(t2) {
  function r2() {
    var e2 = null !== t2 && t2.apply(this, arguments) || this;
    return e2[o2] = {}, e2;
  }
  var o2;
  return function(t3, e2) {
    function r3() {
      this.constructor = t3;
    }
    n(t3, e2), t3.prototype = null === e2 ? Object.create(e2) : (r3.prototype = e2.prototype, new r3());
  }(r2, t2), r2.prototype._set = function(e2, n2) {
    return "chart" === e2 ? this.__setChartConfiguration(n2) : t2.prototype._set.call(this, e2, n2);
  }, r2.prototype.__setChartConfiguration = function(t3) {
    var e2 = this.__chart;
    if (this.chart = j({}, this.chart, t3), e2) {
      if (t3.type && t3.type !== e2.config.type)
        return e2.destroy(), this.__createChart(), this;
      e2.data = this.chart.data || e2.data, e2.options = this.chart.options || e2.options, this.__chart.update();
    }
    return this;
  }, r2.prototype.toObject = function(e2) {
    return void 0 === e2 && (e2 = []), t2.prototype.toObject.call(this, e2.concat("chart"));
  }, r2.prototype.__setChartSize = function() {
    var t3 = this.__chart.canvas;
    t3.width = this.getScaledWidth() * ((null === window || void 0 === window ? void 0 : window.devicePixelRatio) || 1), t3.height = this.getScaledHeight() * ((null === window || void 0 === window ? void 0 : window.devicePixelRatio) || 1), this.__chart.resize();
  }, r2.prototype.__defaultChartConfiguration = function() {
    var t3 = this;
    return j({}, O, { options: { onResize: function(e2) {
      var n2, r3, o3, i2, a2;
      null === (r3 = null === (n2 = O.options) || void 0 === n2 ? void 0 : n2.onResize) || void 0 === r3 || r3.call(t3.__chart, e2), null === (i2 = null === (o3 = t3.chart.options) || void 0 === o3 ? void 0 : o3.onResize) || void 0 === i2 || i2.call(t3.__chart, e2), t3.dirty = true, null === (a2 = t3.canvas) || void 0 === a2 || a2.requestRenderAll();
    }, animation: { onProgress: function() {
      var e2, n2, r3, o3, i2, a2, c2;
      null === (r3 = null === (n2 = null === (e2 = O.options) || void 0 === e2 ? void 0 : e2.animation) || void 0 === n2 ? void 0 : n2.onProgress) || void 0 === r3 || r3.call(t3.__chart, t3.__chart), null === (a2 = null === (i2 = null === (o3 = t3.chart.options) || void 0 === o3 ? void 0 : o3.animation) || void 0 === i2 ? void 0 : i2.onProgress) || void 0 === a2 || a2.call(t3.__chart, t3.__chart), t3.dirty = true, null === (c2 = t3.canvas) || void 0 === c2 || c2.requestRenderAll();
    } } } });
  }, r2.prototype.__getChartBoundingClientRect = function() {
    return { bottom: this.top + this.getScaledHeight(), height: this.getScaledHeight(), left: this.left, right: this.left + this.getScaledWidth(), top: this.top, width: this.getScaledWidth(), x: this.left + this.getScaledWidth() / 2, y: this.top + this.getScaledHeight() / 2 };
  }, r2.prototype.__getChartCurrentStyle = function() {
    return { "padding-left": 0, "padding-right": 0, "padding-top": 0, "padding-bottom": 0 };
  }, r2.prototype.__createChartCanvas = function() {
    var t3 = document.createElement("canvas");
    return t3.width = this.getScaledWidth(), t3.height = this.getScaledHeight(), Object.defineProperty(t3, "clientWidth", { get: function() {
      return t3.width / window.devicePixelRatio;
    } }), Object.defineProperty(t3, "clientHeight", { get: function() {
      return t3.height / window.devicePixelRatio;
    } }), Object.defineProperty(t3, "getBoundingClientRect", { value: this.__getChartBoundingClientRect.bind(this) }), Object.defineProperty(t3, "currentStyle", { value: this.__getChartCurrentStyle() }), t3;
  }, r2.prototype.__bindChartEvents = function() {
    var t3 = this, e2 = function(e3) {
      var r4 = e3;
      n2.on(r4, function(e4) {
        if (t3.canvas && t3.__chart.canvas) {
          var n3 = t3.toLocalPoint(t3.canvas.getPointer(e4.e), "left", "top"), o3 = n3.x, i2 = n3.y;
          t3.flipX && (o3 = t3.getScaledWidth() - o3), t3.flipY && (i2 = t3.getScaledHeight() - i2), t3.__chart.canvas.dispatchEvent(new MouseEvent(C[r4], { clientX: t3.left + o3, clientY: t3.top + i2 }));
        }
      });
    }, n2 = this;
    for (var r3 in C)
      e2(r3);
  }, r2.prototype.__createChart = function() {
    var t3 = j({}, this.chart, this.__defaultChartConfiguration());
    return this.__chart = new import_chart.default(this.__createChartCanvas(), t3), this.__chart;
  }, r2.prototype.initialize = function(e2) {
    return t2.prototype.initialize.call(this, e2), this.__createChart(), this.__bindChartEvents(), this.on("scaling", g(this.__setChartSize.bind(this), 5)), this;
  }, r2.prototype.drawObject = function(t3) {
    this._render(t3);
  }, r2.prototype._render = function(t3) {
    this.__chart && t3.drawImage(this.__chart.canvas, -this.width / 2, -this.height / 2, this.width, this.height);
  }, r2.fromObject = function(t3, e2) {
    return e2 && e2(new w.Chart(t3));
  }, o2 = "chart", r2.type = "chart", r2;
}(w.Object);
function S(t2) {
  t2.Chart = t2.util.createClass(z), t2.Chart.type = z.type, t2.Chart.fromObject = z.fromObject, t2.util.object.extend(t2.util, { chart: { addPlugins: function() {
    for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
      t3[e2] = arguments[e2];
    m.push.apply(m, t3);
  }, setDefaults: function(t3) {
    j(O, t3);
  } } });
}
S(w);
export {
  z as ChartObject,
  S as install
};
/*! Bundled license information:

fabric/dist/fabric.js:
  (*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) *)

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.29.4 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)

chart.js/dist/Chart.js:
  (*!
   * Chart.js v2.9.4
   * https://www.chartjs.org
   * (c) 2020 Chart.js Contributors
   * Released under the MIT License
   *)

chart-js-fabric/dist/chart-js-fabric.es5.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=chart-js-fabric.js.map
